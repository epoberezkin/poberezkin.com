<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Evgeny Poberezkin</title>
    <link href="https://www.poberezkin.com/feed.atom" rel="self" />
    <link href="https://www.poberezkin.com" />
    <id>https://www.poberezkin.com/feed.atom</id>
    <author>
        <name>Evgeny Poberezkin</name>
        
        <email>evgeny@poberezkin.com</email>
        
    </author>
    <updated>2025-08-12T00:00:00Z</updated>
    <entry>
    <title>MLS: The Naked King of End-to-End Encryption</title>
    <link href="https://www.poberezkin.com/posts/2025-08-12-mls-the-naked-king-of-end-to-end-encryption.html" />
    <id>https://www.poberezkin.com/posts/2025-08-12-mls-the-naked-king-of-end-to-end-encryption.html</id>
    <published>2025-08-12T00:00:00Z</published>
    <updated>2025-08-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <section class="header">
    <div class="info">
      Posted on
      
        August 12, 2025
      
      
        by Evgeny Poberezkin
      
    </div>
    <div class="info">
      
        Tags: <a title="All pages tagged &#39;security&#39;." href="/tags/security.html" rel="tag">security</a>, <a title="All pages tagged &#39;internet&#39;." href="/tags/internet.html" rel="tag">internet</a>
      
    </div>
  </section>
  <section>
    <p>This essay is purposefully provocative. It has no intention to offend anybody. I appreciate that many people worked very hard designing and implementing MLS (Messaging Layer Security), and many of them have a fervent belief that MLS is a necessary technology.</p>
<p>But the value of the technology is not determined by how much was invested, nor by who supports it. The value of technology comes from effectively solving problems for people. By that metric, many simple technical solutions are more valuable than complex ones.</p>
<p>The goal of this essay is to revisit the core problems that MLS aims to solve, and consider whether it solves them well enough. And if it does not solve them well enough, then what areas it can be effectively applied to, and what are the alternatives to MLS.</p>
<h2 id="what-problem-does-mls-aim-to-solve">What Problem Does MLS Aim to Solve?</h2>
<p>The problem that the cryptographers who designed MLS aimed to solve is end-to-end (E2E) encryption in large groups. E2E encryption, by definition, is a cryptographic solution that protects the content of the messages from the communication providers.</p>
<p>A simple approach to E2E encryption in large groups would be for all members to agree on a shared key. But the problem of this approach is the cost of key updates. If the group is really large, then every time a member leaves, the remaining members must agree on a new key so that the member who left cannot decrypt the new messages. With a simple approach the cost of agreeing on the group key grows linearly with the group size, and it does not scale well enough.</p>
<h2 id="what-is-the-proposed-solution">What is the proposed solution?</h2>
<p>Instead of agreeing on a new key with remaining members, MLS proposes to represent this shared key as a composition of the tree of keys (a “ratchet tree”), where each member contributes a “leaf” (some part of the key). When a member leaves, the remaining members would only need to update a small part of the tree, reducing the cost of an update from <code>O(N)</code> (N is the number of members) to <code>O(log N)</code>.</p>
<p>While the essence of the approach sounds very simple, practical implementation of this idea is very complex: it involves a key schedule, proposals/commits for group changes, and handling of pre-shared keys (PSKs) for added entropy.</p>
<h2 id="does-mls-work-for-end-to-end-encryption">Does MLS Work for End-to-End Encryption?</h2>
<p><em>TL;DR: Yes, if you accept “Trust Me Bro” security model</em>.</p>
<p>To answer this question, we first need to agree what “to work” means in this context. Let’s start from a rather non-controversial statement: the purpose of E2E encryption is to protect message content from the untrusted communication providers, and to provide effective mechanisms to mitigate the risk of the provider being compromised. So, “to work”, any solution for E2E encryption must satisfy those criteria.</p>
<p>Let’s look at the Double Ratchet algorithm, for comparison, that is used for E2E encryption in Signal, SimpleX Chat and many other messengers. Does it protect message content from the untrusted provider? Yes, as long as the provider did not perform man-in-the-middle attack <a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> on the key exchange. Does it prevent or mitigate the risk of MITM attack? This is implementation-dependent. Signal allows communication parties to compare security codes to confirm that key exchange was not compromised. SimpleX network servers simply cannot replace the keys, as key agreement requires another channel; in addition, SimpleX also allows comparing security codes, to mitigate the risk that the used channel was compromised. In any case, the Double Ratchet algorithm itself provides the security code that communication parties can compare to confirm the integrity of key exchange. From that we can conclude that the Double Ratchet algorithm is an effective solution for E2E encryption that achieves its goal, and in addition to that it has important security properties: forward secrecy and post-compromise security <a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>.</p>
<p>Let’s apply the same reasoning to MLS. Does MLS protect message content from the untrusted provider? One of the components of MLS is the “authentication service” — a component that is supplied by a communication provider. The MLS specification states in <a href="https://www.rfc-editor.org/rfc/rfc9420.html#name-authentication-service-comp">part 16.10</a>:</p>
<blockquote>
<p>A compromised Authentication Service (AS) can assert a binding for a signature key and identity pair of its choice, thus allowing impersonation of a given user. This ability is sufficient to allow the AS to join new groups as if it were that user. Depending on the application architecture, it may also be sufficient to allow the compromised AS to join the group as an existing user, for instance, as if it were a new device associated with the same user.</p>
</blockquote>
<p>The MLS specification explicitly requires trust in the communication provider as a condition for MLS securing the message content from the untrusted provider, which is self-contradictory — <strong>we are required to trust an untrusted party</strong>, which contradicts the purpose of E2E encryption.</p>
<p>Does the MLS specification offer a practical mechanism for the end users to mitigate the effect of a compromised Authentication Service? No, it does not; it only refers to the approaches based on key transparency, but they are not practical in real-world applications, and, to the best of my knowledge, are not implemented in any of the communication platforms that deployed MLS <a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>.</p>
<p>Proponents of MLS would argue that it still provides some security, as it protects past messages from the provider being compromised in the future. But this is an invalid argument, as the expectation that users have about E2E encryption is that the provider is cryptographically unable to compromise it without detection, rather than it is only unable to compromise past messages. And if the provider wants to compromise group security, nothing stops it from infiltrating the group via the authentication service it controls at the group inception.</p>
<h2 id="is-end-to-end-encryption-in-large-groups-a-real-problem">Is End-to-End Encryption in Large Groups a Real Problem?</h2>
<p>It depends on the definition of “large”, but we are assuming that “large” is any group where simple member broadcast to update keys is inefficient, so we are talking about many thousands of members.</p>
<p>In practical scenarios, there are two types of such groups:</p>
<ul>
<li>groups comprised of the general public, which are not completely public. E.g., they may have some admission criteria. Practically, the content in such groups is impossible to protect beyond a thousand or so members (coincidentally, it is the limit on group size in Signal), as it becomes increasingly easy to join such a group as it grows. So members of such semi-closed/semi-public groups should not have expectations of content security, and MLS does not solve any real problems in this case. At best, such groups can provide participation privacy, but MLS does not provide it <a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a>.</li>
<li>large enterprise groups. While enterprises must protect their content from the public and from competitors, for every enterprise it is important to retain and to monitor content in their groups, for compliance, knowledge retention, and dispute resolution. Therefore, any E2E encryption would be counter-productive, and instead the enterprise would benefit more from using trusted servers it can control.</li>
</ul>
<p>The proponents of MLS would argue that it allows E2E encryption in large federated groups. But this is also an invalid argument, as having multiple Authentication Services increases the risk of one of them being compromised, exposing messages of all users, even those that do not use the compromised provider. Federation also makes it harder to mitigate this risk.</p>
<p>I am open to being presented with the scenario where E2E encryption (protection from the untrusted provider) in really large groups could be more beneficial than choosing a secure and trusted provider or using servers under the control of the communication parties.</p>
<h2 id="alternatives-for-medium-sized-groups">Alternatives for Medium-Sized Groups</h2>
<p>Signal’s approach for groups up to 1000 members is pragmatic and effective: all members agree pairwise states for the Double Ratchet algorithm. This way the cost of agreeing keys is “front-loaded” — each new member must agree on a key with each other member before being able to send messages. When a member leaves, no special action is needed, other than notifying all members about it.</p>
<p>Does it mean that each member has to encrypt and send a message 1000 times? No, it would be very inefficient. In Signal, each message is encrypted with one small random symmetric key, and then this small key, and not the whole message, is encrypted separately for each member. Then, a message sender packages all encrypted keys and an encrypted message together into a bundle and sends it to the provider, which forwards the message and one of the encrypted keys to each member.</p>
<p>What is the cost of sending a message with this approach? It depends on the variant of the Double Ratchet, but in any case, it is not more than 100-150kb plus the message size for a group of 1000 members, which is acceptable even on relatively slow internet connections.</p>
<p>How can the risk of the compromised provider be mitigated? In the case of Signal, there is no simple and effective solution to verify all connections, but some members could verify their pairwise security codes. In the case of a decentralized network, it is sufficient to have several unaffiliated servers re-broadcasting messages in the group to mitigate the risk of one of them being compromised — as long as some of the servers do not collude, they would act as “the second verification channel” to each other. This is the approach considered for medium-sized E2E encrypted groups in SimpleX network.</p>
<h2 id="who-benefits-from-mls">Who Benefits From MLS?</h2>
<p>This is the most controversial statement, and the reason to make it is not to upset people, but to be proven wrong.</p>
<p>To me, it increasingly looks like the only people who benefit from MLS are its designers and implementers, and not the end users, particularly if MLS is being compared to other, simpler and more secure alternatives.</p>
<p>MLS might have provided some security via its modular design and separation of components — e.g., if providers explained to end users the difference between Delivery Service component, which may be untrusted, and Authentication Service, which must be trusted, and offered a separate choice of providers for these components.</p>
<p>But without the separation of services on the business level, this separation in design is purely academic rather than practical. Promoting MLS as an effective solution for E2E encryption, without disclosing the requirement for provider trust, is at best misleading, at worst — fraudulent <a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a>.</p>
<p>MLS, in its current form, hailed by cryptography experts, large technology companies, and tech media as the next generation of secure messaging, almost the king of encryption, appears to be naked. And, like the naked king’s attire, its implementations are quite expensive to create as well.</p>
<p>I would love to hear the arguments about what problems MLS in its current state solves, and how the requirement for provider trust can be mitigated, as so far I have failed to find any coherent answers to these questions — MLS appears to be a proverbial “solution in search of a problem”.</p>
<p>Until then, my strong recommendation to the users is to consider “MLS encryption” as ineffective in protecting message content from communication providers, and use communication products that use other, effective solutions for E2E encryption.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Man-in-the-middle attack is the attack by the intermediary (e.g., a communication provider) on the key exchange, where instead of breaking the encryption, the attacker simply substitutes the key, allowing it to read all messages between members. You can read more about how a MITM attack is performed and how to mitigate it in <a href="https://simplex.chat/blog/20240314-simplex-chat-v5-6-quantum-resistance-signal-double-ratchet-algorithm.html#5-man-in-the-middle-attack-mitigated-by-two-factor-key-exchange">this post</a>.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>Somewhat counterintuitively, perfect-forward secrecy (PFS) protects past messages, sent before the long-term encryption keys were compromised, and post-compromise security (PCS, also known as break-in recovery) protects future messages, sent after long-term keys were compromised.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>A notable exception here is Nostr-based <a href="https://www.whitenoise.chat">WhiteNoise</a> that avoids the need for an authentication service, relying on user identities being their public keys. The main downside of WhiteNoise remains the lack of participation privacy, as relays have knowledge of all groups where the user participates.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>In fact, using MLS is likely to make it harder to provide participation privacy — centralized authentication service requires a network-wide user identity, so providers would know all groups where a user participates.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>IETF’s <a href="https://www.rfc-editor.org/rfc/rfc9750.html#name-authentication-service">ongoing work</a> to find solutions for mitigating a compromised Authentication Service confirms the acceptance of this problem: <em>“The AS is invested with a large amount of trust and the compromise of the AS could allow an adversary to, among other things, impersonate group members.”</em> But this work has not found any robust solutions yet, its recommendations are not mandatory for MLS implementations, and some of them involve substantial complications of already complex specification, without fully removing AS trust requirement.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
  </section>
  <section class="links">
    <a href="https://www.reddit.com/submit?url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2025-08-12-mls-the-naked-king-of-end-to-end-encryption.html&title=MLS: The Naked King of End-to-End Encryption" target="_blank"><img src="/images/reddit.png"></a>
    <a href="https://twitter.com/intent/tweet?via=epoberezkin&text=MLS%3A%20The%20Naked%20King%20of%20End-to-End%20Encryption&hashtags=security%2Cinternet&original_referer=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2025-08-12-mls-the-naked-king-of-end-to-end-encryption.html&url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2025-08-12-mls-the-naked-king-of-end-to-end-encryption.html" target="_blank"><img src="/images/tweet.png"></a>
    
  </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Why privacy becoming a norm requires venture funding</title>
    <link href="https://www.poberezkin.com/posts/2023-10-31-why-privacy-impossible-without-venture-funding.html" />
    <id>https://www.poberezkin.com/posts/2023-10-31-why-privacy-impossible-without-venture-funding.html</id>
    <published>2023-10-31T00:00:00Z</published>
    <updated>2023-10-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <section class="header">
    <div class="info">
      Posted on
      
        October 31, 2023
      
      
        by Evgeny Poberezkin
      
    </div>
    <div class="info">
      
        Tags: <a title="All pages tagged &#39;security&#39;." href="/tags/security.html" rel="tag">security</a>, <a title="All pages tagged &#39;internet&#39;." href="/tags/internet.html" rel="tag">internet</a>
      
    </div>
  </section>
  <section>
    <p>This post is about myths and realities of privacy, business and venture funding. The privacy community is isolated from the rest of people. Unless it changes privacy won’t become a norm for technology solutions.</p>
<h2 id="without-venture-funding-simplex-chat-would-not-exist">Without venture funding, SimpleX Chat would not exist</h2>
<p>In 2022 I raised funds for <a href="https://simplex.chat">SimpleX Chat</a> from several angel investors and an early stage VC fund Village Global <a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>. They believe that everybody will want communication privacy, and that SimpleX Chat will become a communication platform that provides it, profitably, solving a decade-old problem of tech businesses abusing privacy of their users.</p>
<p>It enabled our team <a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> to continue working full time, and to pay for a security audit done by Trail of Bits, one of the best security consultancies in the world <a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>.</p>
<p>When we <a href="https://simplex.chat/blog/20230422-simplex-chat-vision-funding-v5-videos-files-passcode.html">announced this funding</a>, the community response was polarized: while most people were excited about us having the funds to continue the development, some critics stated that <em>venture funding is incompatible with privacy and the need to make profit creates a conflict of interest with users’ privacy</em>.</p>
<p>We discovered that in the same way majority of people ignore their privacy, regardless how much it costs them <a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a>, many people in privacy community believe some damaging myths – both groups equally preventing privacy from becoming a norm.</p>
<h2 id="myths-about-privacy">Myths about privacy</h2>
<h3 id="myth-1-venture-funding-is-incompatible-with-privacy">Myth 1: Venture funding is incompatible with privacy</h3>
<p>The narrative in support of this statement:</p>
<ul>
<li>a business needs to make profit for the investors,</li>
<li>majority of the users won’t pay, as they don’t care about privacy,</li>
<li>so, the business will be “made” by its investors to sell users’ data <a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a>,</li>
<li>therefore venture funding is incompatible with privacy.</li>
</ul>
<p>The main error in that logic is the assumption that today’s status quo – that majority of people don’t care about privacy – will never change.</p>
<p>But we see a growing number of people realizing the value of privacy, and willing to pay for it, unhappy about mass-scale surveillance by the tech platforms, that costs them real money.</p>
<p>SimpleX Chat investors are betting that a large number of people will refuse to use technology that doesn’t respect and protect their privacy, demanding the level of privacy they had before smartphones.</p>
<p>The nature of VC investment is to expect very high rewards with very high risk of failure – the norm is losing 9 investments out of 10. So the future when all people care about privacy doesn’t have to be certain, but if it happens, there will be large rewards for the investors.</p>
<h3 id="myth-2-making-profit-creates-conflict-of-interest-with-privacy">Myth 2: Making profit creates conflict of interest with privacy</h3>
<p>The main wrong assumption here that the only way to make profit is by selling users’ data.</p>
<p>We are building the business that sells privacy, as a product, <em>to its customers</em>, and does not sell the data <em>of its customers</em>. We believe that selling users’ data is unethical, even if people consented to it, and that it should be directly prohibited by law – it should become a focus of legislators.</p>
<p>This myth also equates profit with corruption and greed. But having profit simply means earning more than spending, something that any responsible person, family or organization must do. Making a profit is an important objective of any organization that wants to be financially sustainable and self-reliant, whether it’s a business or non-profit, and without profit the organization remains dependent on its funders, open to negative influence.</p>
<p>So, making profit in the long term is required to protect the privacy of customers, which is exactly opposite to this myth.</p>
<h3 id="myth-3-privacy-is-only-possible-with-non-profit-organizations">Myth 3: Privacy is only possible with non-profit organizations</h3>
<p>This wrong belief here is that the organizations that do not pay tax on profit <a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a> is unlikely to compromise privacy of their users.</p>
<p>Non-profit status does not pay bills – the organization still needs money to operate, whether it pays tax on profit or not. Non-profit technology organizations, as they grow, can become heavily dependent on the funding from the state-sponsored funds and big tech companies.</p>
<p>Once the organization is profitable it is more likely to do what its customers want. But if the organization has no customers, but only users <a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a>, and is dependent on its donors, then it is at a high risk of being influenced. Many non-profits are specifically established by corporations to lobby their interests, and it was also non-profits that advocated anti-privacy legislation in different countries, with the mission of achieving online safety at a cost of everybody losing privacy <a href="#fn8" class="footnote-ref" id="fnref8" role="doc-noteref"><sup>8</sup></a>.</p>
<p>There is an area when non-profit structure is effective – to provide the assurance to the users and developers that the network protocols will continue to be licensed under the open-source license, and to ensure a wider community review of protocol changes. We will be setting up a non-profit organization to manage the evolution of the SimpleX protocols in 2024, so that they are wider adopted in client and server applications.</p>
<h2 id="reality-of-privacy">Reality of privacy</h2>
<h3 id="reality-1-privacy-is-possible-only-if-everybody-has-it">Reality 1: Privacy is possible only if everybody has it</h3>
<p>Privacy of communications requires that the network is used by a large number of people. Niche privacy-focused products used by a small number of users may put them under suspicion, hurting their privacy. So we need mass adoption of privacy tech to achieve real privacy.</p>
<p>Mass adoption requires a “whole product”, to make this product attractive and usable for majority of the users <a href="#fn9" class="footnote-ref" id="fnref9" role="doc-noteref"><sup>9</sup></a>. For example, many people say that the absence of built-in stickers in SimpleX Chat is a blocker for adoption, and therefore, counterintuitively, we will need to add stickers to make it more private.</p>
<p>The majority of users need a very stable, polished and simple user experience. It requires at least 10x the investment compared with a usable v1 of the product.</p>
<p>So while we believe that SimpleX platform will be sustainable and profitable once it grows to millions of users, to get there we need high risk investment, and neither non-profit funding, nor bootstrapping, nor business customers can provide it for a mass-market consumer product – exactly because VC funding expects only 10% chance of success and can bet a substantial capital on this chance.</p>
<h3 id="reality-2-privacy-is-a-product-people-are-willing-to-pay-for">Reality 2: Privacy is a product people are willing to pay for</h3>
<p>If privacy is a value, some people will pay for it. We believe that freemium model works best – when a small share of users pay for some secondary benefits and additional services. If a small share of users pays a few dollars each month, it will be more than sufficient to fund both hosting and development of the platform once it grows.</p>
<p>We were lucky to have many supporters who donated to the total of approximately $40,000 to date. Without their support venture funding would not have been possible, as these donations proved to our investors that people will pay for privacy once we have a usable product. So if you believe that privacy should be provided profitably, it would hugely help us if you <a href="https://github.com/simplex-chat/simplex-chat#help-us-with-donations">start donating</a> today, even if it is a very small amount.</p>
<h3 id="reality-3-commercial-companies-are-better-at-creating-successful-products">Reality 3: Commercial companies are better at creating successful products</h3>
<p>The history of technology and of the Internet is largely written by commercial companies, with some rare exceptions, like Wikipedia. Many technology pieces were created in academia and by enthusiasts, but in most cases it is venture-funded companies that made them widely adopted.</p>
<p>Even the open web would not exist if not for a venture-funded company Netscape <a href="#fn10" class="footnote-ref" id="fnref10" role="doc-noteref"><sup>10</sup></a> – without it the Internet would be owned by a tech oligopoly 20 years earlier.</p>
<p>All other hugely successful Internet products were also created by commercial companies, and not by non-profits – Google, Facebook, Amazon, Twitter, Instagram, WhatsApp, etc. While they made users’ privacy a collateral damage of their success, and became synonymous with mass-surveillance for many people, they have shown what product experience people want, and enabled us replicating this user experience in decentralized technologies, like Mastodon, Nostr or SimpleX.</p>
<p>We now want to build the network that will be as useful and as widely adopted as the products of these companies, but open and decentralized, evolving the open web standards. We believe that it can only be done by a commercial company, as it allows both to raise sufficient investment and to hire a highly motivated and talented team, that would be able to prioritize creating value for the customers.</p>
<p>People are increasingly willing to pay for privacy. This allows companies to build better products. Which in turn brings more users to privacy-focused products and technologies.</p>
<h3 id="reality-4-venture-funding-is-the-best-way-to-build-large-consumer-focused-companies">Reality 4: Venture funding is the best way to build large consumer-focused companies</h3>
<p>Mass-market communication products have low revenue per customer with much higher expectations of the users than products for businesses. So while building technology for businesses can be possible with little or no investment, this path is not viable for consumer Internet products – they require substantial investment to get to mass-adoption.</p>
<p>It’s certainly possible to build initial prototypes and early versions of the product without or with very little outside funding, like we did with v1 of SimpleX Chat, but it becomes impossible to sustain as the number of users and complexity of the product grows.</p>
<p>So if we agree that real privacy requires a mass-market adoption of privacy-focused technology, then we should accept that venture funding is the only viable path to it, and to make sure that privacy of the users is not compromised on this path.</p>
<h2 id="qed-global-privacy-is-impossible-without-venture-funding">QED: Global privacy is impossible without venture funding</h2>
<p>Without venture funding, it is impossible to create a consumer product that can compete with large technology companies.</p>
<p>We believe that to achieve communication privacy we must build superior products that are private and secure, convenient and user-friendly, reliable and performant. VC funding from the right investors will enable that.</p>
<p>There is a growing number of privacy-focused tech companies providing technology solutions based on open-source software. These companies are backed by VCs that believe that privacy will be demanded by the majority of people.</p>
<p>We see our mission in making privacy so common that we would not need to think about it, as it would be protected by any technology product we use. If you want to help us build private and secure communication network, use SimpleX Chat with your friends and spread the word.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>https://villageglobal.vc – an exceptionally helpful and supportive fund. Without their capital and help SimpleX Chat would not exist. Some of its LPs make some of our users worry about the risks of negative influence on the mission and users privacy. These concerns are caused by misunderstanding of how VC investments work. LPs can’t be involved in VC fund operations, other than providing capital, and can’t influence invested companies in any way.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>Right now we have 5 people, two of which joined in 2022, and one engineer joined just recently. We are looking for a few more people to <a href="https://github.com/simplex-chat/simplex-chat/blob/stable/docs/JOIN_TEAM.md">join the team</a>!<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>https://simplex.chat/blog/20221108-simplex-chat-v4.2-security-audit-new-website.[html<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>Based on the publicly available revenue data, using the largest social network must be causing its users to lose a hundred or more of dollars each year each, on average, in the form of higher prices and unnecessary impulse-driven purchases enabled by users’ data.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>VCs can only influence the companies as the agreement allows, so it depends on the founders what level of control the investors have. The tale of investors “making” companies do bad things is supported by the founders who accepted a high level of control from investors, and then prefer blaming the investors rather than accepting responsibility.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>“Non-profit” does not mean that organization does not need profit to exist - it only means that this organization won’t pay tax on any profit it makes. While it may be beneficial to organization in some cases, in may be harmful in some others, as it creates certain regulatory obligations and limits this organization freedom.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7"><p>Other than Internet technology companies, there is only one other industry that refers to its customers as “users”.<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn8"><p>For example, <a href="https://thorn.org">thorn.org</a>.<a href="#fnref8" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn9"><p>The concept of “the whole product” is from the book <a href="https://en.wikipedia.org/wiki/Crossing_the_Chasm">Crossing the Chasm</a> by Geoffrey Moore. While the chasm between early adopters and pragmatic users usually exists only for the business products, it appears that privacy community is also isolated from the rest of people by such chasm.<a href="#fnref9" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn10"><p>Netscape evolved the standards created to distribute documents into an application platform, inventing all the foundational pieces of the web technologies we rely on today: SSL for web security, JavaScript to enable client-side applications and cookies to allow user authentication. Even though cookies are often used to track users, hurting their privacy, they are necessary to login to online services.<a href="#fnref10" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
  </section>
  <section class="links">
    <a href="https://www.reddit.com/r/SimpleXChat/comments/17kv2tn/why_privacy_becoming_a_norm_requires_venture/" target="_blank"><img src="/images/reddit.png"></a>
    <a href="https://twitter.com/intent/tweet?via=epoberezkin&text=Why%20privacy%20becoming%20a%20norm%20requires%20venture%20funding&hashtags=security%2Cinternet&original_referer=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2023-10-31-why-privacy-impossible-without-venture-funding.html&url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2023-10-31-why-privacy-impossible-without-venture-funding.html" target="_blank"><img src="/images/tweet.png"></a>
    
  </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Why privacy needs to be redefined</title>
    <link href="https://www.poberezkin.com/posts/2022-12-07-why-privacy-needs-to-be-redefined.html" />
    <id>https://www.poberezkin.com/posts/2022-12-07-why-privacy-needs-to-be-redefined.html</id>
    <published>2022-12-07T00:00:00Z</published>
    <updated>2022-12-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <section class="header">
    <div class="info">
      Posted on
      
        December  7, 2022
      
      
        by Evgeny Poberezkin
      
    </div>
    <div class="info">
      
        Tags: <a title="All pages tagged &#39;security&#39;." href="/tags/security.html" rel="tag">security</a>, <a title="All pages tagged &#39;internet&#39;." href="/tags/internet.html" rel="tag">internet</a>
      
    </div>
  </section>
  <section>
    <p>It’s been more than a year since I wrote here. Since December 2021 I’ve been working on SimpleX Chat <a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> non-stop.</p>
<p>I said many times that SimpleX is not only one of the most private communication platforms in existence <a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>, it also redefines the meaning of privacy for its users, and delivers the level of metadata privacy no other communication platform can because of their design decisions.</p>
<p>Quite a few people criticized me for that, saying that you cannot really redefine what privacy means, it has a fixed meaning and you either have it or not.</p>
<p>This is what this post is about.</p>
<h2 id="why-privacy-matters">Why privacy matters</h2>
<p><strong>What do we mean by privacy and why do we believe it’s important?</strong></p>
<p>Cambridge dictionary <a href="https://dictionary.cambridge.org/dictionary/english/privacy">defines</a> privacy as <em>“someone’s right to keep their personal matters and relationships secret”</em>. Wikipedia <a href="https://en.wikipedia.org/wiki/Privacy">extends it</a> a bit further: <em>“Privacy is the ability of an individual or group to seclude themselves or information about themselves, and thereby express themselves selectively”</em>.</p>
<p>When we asked our users why it is important to them, many said that it gives them the feeling of safety, as they know that what they write or even read, meaning no harm and within the boundaries of the law, cannot be used against them.</p>
<p><strong>What negative consequences can we have because of the lack of privacy?</strong></p>
<p>It starts from relatively benign violations of privacy via manipulative ads, that exploit people weaknesses, making them buy the things they don’t need, and price discrimination, that not only makes wealthy people pay higher prices, or makes people in urgencies buy more expensive airline tickets, but also makes poor people pay much higher prices for financial services and insurance – so called “poverty premium” <a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>.</p>
<p>These consequences continue with the manipulation of elections <a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a>. The violation of privacy doesn’t just endanger our economics, they endanger democracy itself.</p>
<p>But it doesn’t stop here. People can be prosecuted solely based on their associations. The most shocking, life-changing consequences are described in the memoir of Mohamedou Ould Slahi, recently shot as a movie The Mauritanian <a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a>. When he was released after 14 years in prison the judge wrote in his opinion: <em>“… associations alone are not enough, of course, to make detention lawful.”</em></p>
<h2 id="is-fourth-amendment-enough">Is Fourth Amendment enough?</h2>
<p>Here comes the important part: our associations can damage our lives beyond any reasonable expectations. Historically we felt like if the content of what we read or write is protected, then our privacy is protected. The relevant laws include <a href="https://en.wikipedia.org/wiki/Fourth_Amendment_to_the_United_States_Constitution">the 4th amendment to the US constitution</a> that says:</p>
<blockquote>
<p><em>The right of the people to be secure in their persons, houses, papers, and effects, against unreasonable searches and seizures, shall not be violated, and no Warrants shall issue, but upon probable cause, supported by Oath or affirmation, and particularly describing the place to be searched, and the persons or things to be seized.</em></p>
</blockquote>
<p>In the end of the 18th century, when the dominating form of communication was paper mail, delivered by postal couriers, these protections were sufficient. People knew that if the envelope was not tampered with, it meant that their privacy was protected. Postal service was not able to determine all associations from the fact of delivering messages, and many envelopes did not have a return address, so even if the postal courier could see who the mail is delivered to, they could not see who it is from.</p>
<h2 id="e2e-encryption-is-not-bulletproof">E2E encryption is not bulletproof</h2>
<p>Nowadays, for most people the postal service is replaced by large technology companies who have full visibility and control on who sends what to whom and when. Some communication platforms promise end-to-end encryption (for example, WhatsApp and Signal) and many people trust them, but before considering why it is not enough, let’s look at the end-to-end encryption.</p>
<p>Many people believe, quite religiously, that if the communication is end-to-end encrypted then it absolutely cannot be tampered with while in transit. What is end-to-end encryption? It is the application of cryptography to the content of the message that requires that the sender and the recipient somehow agree on the encryption key to use. It is not that different from putting your mail into a box with a complex lock on it, and somehow passing the key and the box to the recipient <a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a>. If you then were to pass the box via the postal courier, then you probably wouldn’t want to pass the key to open the box via the same courier – it would be sensible to pass the key in some other way, maybe send it in a separate letter.</p>
<p>But when we use electronic communications this common sense betrays us and we use the same courier to pass the key as we use to pass the messages locked with the key. Although the modern cryptography is designed in such a way that the courier cannot decrypt the message if it was encrypted with the recipient key, almost nothing stops the courier from intercepting the key of the recipient and replacing it with their own key <a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a>, and then the courier would decrypt the message in transit and re-encrypt it with the recipient key for the delivery.</p>
<p>I am not saying that every single communication service performs such an attack on their users, and some of them (for example, Signal) allow the users to validate the keys by comparing the security codes <a href="#fn8" class="footnote-ref" id="fnref8" role="doc-noteref"><sup>8</sup></a>. But they do have technical ability to break into end-to-end encryption unless some alternative channel was used to pass the key, so a widely shared belief that end-to-end encryption cannot be tampered with is simply incorrect.</p>
<p>Even if end-to-end encryption is trustworthy (e.g., we verified the keys), and even if we do not use our real identities and do not use the phone numbers, with the current level of technology it is still not enough to provide sufficient privacy. The communication operators, and in some cases network observers, can see which user profile sends messages to which. Even if users of the network are identified by some random numbers (as is the case in Session, for example), it still makes all connections between the users observable.</p>
<p>The operator, or any attacker who got hold of this data, can now apply machine learning to compare communication patterns in this pseudonymous network with the communication patterns in the existing public networks (e.g., Twitter, Facebook, etc.) and correlate pseudonious identities with the real ones, with variable degree of certainty. So the names and associations that the users believe to be private can become known to the service providers, observers and attackers.</p>
<h2 id="how-simplex-design-redefines-privacy">How SimpleX design redefines privacy</h2>
<p>Given the above, we should no longer say that privacy of content and of the real names only is “privacy” – it is only a required but not a sufficient part of what the communication platform should provide to its users to be considered “private”. The other necessary part is protecting the privacy of the associations, even if they are pseudonymous. It can be achieved is by avoiding the use of any persistent user addresses or identifiers that are used to deliver messages <a href="#fn9" class="footnote-ref" id="fnref9" role="doc-noteref"><sup>9</sup></a>. This is why and how we designed SimpleX – by using only temporary identifiers for the connections between the users <a href="#fn10" class="footnote-ref" id="fnref10" role="doc-noteref"><sup>10</sup></a>.</p>
<p>The way SimpleX operates can be compared with having multiple email addresses, two for each contact, when one address being used only to send messages, and another only to receive – and these addresses will soon automatically switch between different servers (currently they can be switched manually). Such communication via email would be quite difficult to manage – SimpleX clients automate it. You can see a diagram of how the SimpleX network operates on <a href="https://simplex.chat/#simplex-explained">the website</a> and read more in <a href="https://github.com/simplex-chat/simplexmq/blob/stable/protocol/overview-tjr.md">the whitepaper</a>.</p>
<p>I hope to see that some other communication platforms adopt a design that avoids persistent user profile identifiers, and instead use <a href="https://csrc.nist.gov/glossary/term/Pairwise_Pseudonymous_Identifier">pairwise identifiers</a> among other <a href="https://en.wikipedia.org/wiki/Privacy-enhancing_technologies">privacy enhancing technologies</a>. It is not too difficult technically, and I believe that such design will become the absolute minimum of what the communication network should adopt to be considered private.</p>
<p>This is how we should redefine privacy.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p><a href="https://simplex.chat">SimpleX Chat</a> is the first, and probably the only, messaging platform that has no user profile identifiers of any kind – not even random numbers are used (we literally do not know a number of users who use our servers).<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>SimpleX Chat security has just been <a href="https://simplex.chat/blog/20221108-simplex-chat-v4.2-security-audit-new-website.html">assessed by Trail of Bits</a>, a US security and technology consulting company that has big tech companies, major blockchain projects and governmental agencies as its clients.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p><a href="https://wagestream.com/en/">Wagestream</a>, the company where I led the engineering team for a year prior to SimpleX Chat, aims to reduce <a href="https://fairbydesign.com/povertypremium/">poverty premium</a>, helping more than a million front-line employees in the UK, US and Australia to avoid expensive pay-day loans.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>We have only recently observed how our Facebook connections and activity was <a href="https://en.wikipedia.org/wiki/Facebook–Cambridge_Analytica_data_scandal">exploited by Cambridge Analytica</a> to manipulate the outcome of the US elections.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>He spent more than 14 years in Guantanamo prison because of his past association with Al Qaeda that he severed all ties with 9 years prior to 9/11 attacks. <a href="https://en.wikipedia.org/wiki/Mohamedou_Ould_Slahi">Wikipedia</a>.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>This is a simplification of course, and in modern cryptography the actual key used to decrypt the message is not passed – either only the encryption key is passed (which is different from the decryption key that is kept private – as happens with <a href="https://en.wikipedia.org/wiki/RSA_(cryptosystem)">RSA cryptography</a>) or both sides pass the public parts of their key pairs to each other and compute a shared secret using the received public part and the private part they never sent (it happens this way in <a href="https://en.wikipedia.org/wiki/Diffie–Hellman_key_exchange">Diffe-Hellman exchange</a>).<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7"><p>It is referred to as <a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">man-in-the-middle attack</a> (MITM).<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn8"><p>It allows you to validate that the key was not substituted by comparing the secrets you and your contact have in the app (e.g. by sending it via another channel or by scanning a QR code).<a href="#fnref8" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn9"><p>Although, such a network can have temporary addresses for user discovery, without compromising privacy.<a href="#fnref9" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn10"><p>In fact, there are 4 different identifiers, because each connection consists of two unidirectional messaging queues, commonly on two different servers, and each queue has different addresses to send and to receive the messages, so even if the transport connection security is compromised, there will be no shared identifiers or ciphertext between the received and sent traffic of the server.<a href="#fnref10" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
  </section>
  <section class="links">
    <a href="https://www.reddit.com/r/SimpleXChat/comments/zf0j3x/why_privacy_needs_to_be_redefined/" target="_blank"><img src="/images/reddit.png"></a>
    <a href="https://twitter.com/intent/tweet?via=epoberezkin&text=Why%20privacy%20needs%20to%20be%20redefined&hashtags=security%2Cinternet&original_referer=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2022-12-07-why-privacy-needs-to-be-redefined.html&url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2022-12-07-why-privacy-needs-to-be-redefined.html" target="_blank"><img src="/images/tweet.png"></a>
    
  </section>
</article>
]]></summary>
</entry>
<entry>
    <title>What I wish somebody told me when I was learning Haskell</title>
    <link href="https://www.poberezkin.com/posts/2021-04-21-what-i-wish-somebody-told-me-when-i-was-learning-Haskell.html" />
    <id>https://www.poberezkin.com/posts/2021-04-21-what-i-wish-somebody-told-me-when-i-was-learning-Haskell.html</id>
    <published>2021-04-21T00:00:00Z</published>
    <updated>2021-04-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <section class="header">
    <div class="info">
      Posted on
      
        April 21, 2021
      
      
        by Evgeny Poberezkin
      
    </div>
    <div class="info">
      
        Tags: <a title="All pages tagged &#39;haskell&#39;." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged &#39;coding&#39;." href="/tags/coding.html" rel="tag">coding</a>, <a title="All pages tagged &#39;essay&#39;." href="/tags/essay.html" rel="tag">essay</a>
      
    </div>
  </section>
  <section>
    <p><img src="/images/haskell.png" width="40%" style="float: left; margin: 20px 20px 10px 0;"></p>
<p>This post started as a rant in the email to a colleague, moving to messages with my son, and then to LinkedIn exchanges with some well known people in Haskell community (who were kind enough not to ban me)…</p>
<p>I tried to convert this rant into the collection of ideas that I hope could help both the people who are just starting to learn Haskell and, maybe, some of those who are getting through the advanced levels.</p>
<h2 id="why-haskell">Why Haskell?</h2>
<p>Many programmers using Haskell in production believe that it is the most advanced programming language, giving its users the highest productivity and the lowest cost of application ownership among all programming languages <a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>.</p>
<p>Not only it has the immutable data structures and both lazy and strict evaluation, it has a very advanced type system, with polymorphism and inheritance for type classes (somewhat similar to interfaces in other languages), generic programming, quasi-quotes (allowing for embedded DSLs), type families, generalized algebraic data types, <a href="https://www.poberezkin.com/posts/2020-09-04-dependent-types-to-code-are-what-static-types-to-data.html">ad-hoc dependent types</a>, etc.</p>
<p>I have written that Haskell is <a href="https://www.poberezkin.com/posts/2020-03-15-haskell-a-higher-order-language.html">a higher order language</a>, that allows to create an equivalent of the new language as a library. Even the core of the Haskell itself - data structures, Monads, concurrent channels and transactional memory, that might exist as language level primitives in other languages, are just libraries written in Haskell.</p>
<h2 id="why-there-is-no-wider-adoption">Why there is no wider adoption?</h2>
<p>If Haskell is such an advanced and effective language why do we not see a much wider commercial adoption? I believe it is caused by how we teach it - it takes 5 times longer than it could have if the onboarding of the newcomers were more effective.</p>
<p>Most engineers afford 2 months to get productive and fluent with a new language. It is exactly how much time it takes with Haskell if you are surrounded by other engineers who use it <a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>, but if an engineer learns Haskell on their own, they usually get stuck.</p>
<p>Most tutorials and books teach Haskell in a way similar to how imperative languages are taught, without focussing on the differences on how to read and write Haskell programs. We do agree that functional programming is fundamentally different, yet we teach it in a “classic” way.</p>
<h2 id="so-what-i-wish-somebody-told-me">So, what I wish somebody told me</h2>
<p>The post title is borrowed from a great writing <a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a> that, sadly, lacks quite a few simple ideas that might have saved me several months as I was learning Haskell.</p>
<p>The Haskell education and onboarding, in comparison with JavaScript, for example, is broken - quite a few people abandon learning Haskell (I did too). There is a way to make people productive in Haskell quickly, but it needs to be done very differently. What seems missing is the basics:</p>
<ul>
<li>advice on how to read, write and think about “code”.</li>
<li>guidance on what works and should be used in production and what is best avoided.</li>
</ul>
<p>I hope that below ideas could help reducing this investment - some of them helped me, and some I had to figure out in a hard way.</p>
<h2 id="how-to-read-and-think-about-code">How to read and think about code</h2>
<h3 id="read-types-first-not-code">Read types first, not code</h3>
<p>We take it for granted that to understand “what the program does” you have to “read its code”. Unfortunately, coming from imperative languages, we do not see types as part of the code - we see them as annotations, something secondary, being there to appease compiler.</p>
<p>This mindset does not work in Haskell. Trying to understand what the function does purely from its code is at least ineffective, and in many cases it is not possible.</p>
<p>To get fluent and productive with Haskell you should not try to understand what a function “does”, instead focussing on what it “is” by looking at its type first, and to start seeing the types as the primary part of your code that drives your implementation, rather than restricts it.</p>
<p>Once you get into the habit of reading the types first, you are likely to discover that most libraries have more than enough documentation to use them effectively, contrary to a popular belief.</p>
<h3 id="read-it-slowly">Read it slowly</h3>
<p>To become effective at reading Haskell you have to unlearn how you read imperative languages.</p>
<p>The problem for the beginners is that we are used to having a lot of code that has to be read as prose. Haskell code can be very terse, and it has to be read slower, in some cases, as if it were a formula. When you get used to it, you can write and read the same logic much faster - and it also makes it easier to understand it later.</p>
<p>I had a particular example when 70 lines of TypeScript code took 8 one-line functions in Haskell (and all lines were normal length and quite readable), so 16 lines together with type signatures <a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a>.</p>
<p>Reading each Haskell line can take twice longer, but because of much smaller overall size it is at least twice faster to write and to read than the equivalent logic in TypeScript.</p>
<h3 id="avoid-terms-used-in-imperative-languages">Avoid terms used in imperative languages</h3>
<p>It may seem insignificant, but using the correct terminology would help switching to the functional mindset:</p>
<ul>
<li>functions are not “called” and “executed”, they are “applied” and “evaluated”.</li>
<li>functions do not “return” values, even when they use <code>return</code> function, they are a binding of function code to the function name.</li>
<li>preferring <code>pure</code> over <code>return</code> <a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a> would both save you typing and help switching mindset.</li>
<li>“names” are not “variables”, they are not “assigned”, they are “bound” to values.</li>
<li><code>do</code> syntax does not define execution steps, it defines the sequence of actions bound via their Monad type class interface.</li>
</ul>
<h2 id="model-your-program-with-types">Model your program with types</h2>
<h3 id="types-are-the-model-of-your-program">Types are the model of your program</h3>
<p>Types in Haskell are not just annotations - they are the core of the language used to model the program and to define the shape of the data and the constraints on the program actions.</p>
<p>Looking at the function types you should be able to understand what the code is, without even looking at the code itself (and if it is not the case, consider using type synonyms or <code>newtype</code>).</p>
<p>Most imperative programmers see types as restrictions on their data. The reason for that is that most type systems are quite limited. Haskell advanced type allows to codify not only your data structures, but also your code behaviours and invariants.</p>
<h3 id="model-top-down-not-bottom-up">Model top down, not bottom up</h3>
<p>It is tempting to model the program bottom up, starting from the elements that define some small parts of your program - this is what we often do with imperative languages.</p>
<p>You would have a more effective design by modelling the program from top to bottom, breaking down the whole program to the small number of components, then breaking down each component to smaller parts, and so on until you have the whole program <a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a>.</p>
<h3 id="understand-data-class-type-and-newtype-differences">Understand data, class, type and newtype differences</h3>
<p>The term <code>class</code> creates confusion. In many languages “class” means a hybrid of a data record and type class in Haskell; such thing requires data mutability and internal state.</p>
<p>Haskell class is a pure interface that can be implemented by many data types. The class does not tell you anything about the data, it only defines supported methods that can be implemented by class instances (another confusing term that does not mean the data instance, it actually means a particular, possibly parameterized type that implements the class).</p>
<p>As for the rest, <code>data</code> means “data type”, <code>type</code> means type synonym (just a shorthand for another data type), and <code>newtype</code> means the data type container that allows to differentiate, on a type level, between the data types that have the same internal representation - with zero memory and execution time overhead.</p>
<h3 id="become-fluent-with-monads-and-other-abstractions">Become fluent with monads (and other abstractions)</h3>
<p>The learning usually happens from specific examples to abstractions. While it is effective to learn a few examples to understand the Monad type class, learning 10 different types of Monads, as some tutorials encourage you to do, would neither help you understand Monad abstraction, nor help understand when it would be helpful to make your own data type a Monad class instance.</p>
<p>You would master Haskell faster if you learn to operate on abstractions regardless of examples.</p>
<p>“<a href="https://two-wrongs.com/the-what-are-monads-fallacy">Monad tutorial fallacy</a>” post compares Monads to the musical instruments, saying that you can only learn a specific instrument, not an abstract one. This comparison is flawed though, because, unlike musical instruments, all Monad instances have the same interface <a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a>.</p>
<p>To understand Monad type class you also need to understand Functor and Applicative, that Monad inherits from. It means that monads have a richer interface than just bind method (<code>&gt;&gt;=</code>), so it is necessary to be fluent with these classes.</p>
<h3 id="write-concise-code">Write concise code</h3>
<p>Some samples of equivalent code that would have helped me if somebody explained it earlier:</p>
<ol type="1">
<li>Changing value inside Monad:</li>
</ol>
<ul>
<li>with do notation:</li>
</ul>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">getReversed ::</span> <span class="dt">IO</span> <span class="dt">String</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>getReversed <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  a <span class="ot">&lt;-</span> <span class="fu">getLine</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  <span class="fu">return</span> <span class="op">$</span> <span class="fu">reverse</span> a</span></code></pre></div>
<ul>
<li>same with Functor methods:</li>
</ul>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">getReversed ::</span> <span class="dt">IO</span> <span class="dt">String</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>getReversed <span class="ot">=</span> <span class="fu">reverse</span> <span class="op">&lt;$&gt;</span> <span class="fu">getLine</span></span></code></pre></div>
<ol start="2" type="1">
<li>Combining values from 2 (or more) Monads</li>
</ol>
<ul>
<li>with do notation:</li>
</ul>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- assuming NoBuffering mode</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="ot">getName ::</span> <span class="dt">IO</span> <span class="dt">String</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>getName <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  <span class="fu">putStr</span> <span class="st">&quot;Name: &quot;</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>  name <span class="ot">&lt;-</span> <span class="fu">getLine</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  <span class="fu">putStr</span> <span class="st">&quot;Surname: &quot;</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>  surname <span class="ot">&lt;-</span> <span class="fu">getLine</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>  <span class="fu">return</span> <span class="op">$</span> name <span class="op">&lt;&gt;</span> <span class="st">&quot; &quot;</span> <span class="op">&lt;&gt;</span> surname</span></code></pre></div>
<ul>
<li>with Functor and Applicative methods:</li>
</ul>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ot">getName ::</span> <span class="dt">IO</span> <span class="dt">String</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>getName <span class="ot">=</span> (<span class="op">&lt;&gt;</span>) <span class="op">&lt;$&gt;</span> get <span class="st">&quot;Name: &quot;</span> <span class="op">&lt;*&gt;</span> ((<span class="ch">&#39; &#39;</span> <span class="op">:</span>) <span class="op">&lt;$&gt;</span> get <span class="st">&quot;Surname: &quot;</span>)</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    get s <span class="ot">=</span> <span class="fu">putStr</span> s <span class="op">&gt;&gt;</span> <span class="fu">getLine</span></span></code></pre></div>
<ul>
<li>with Monoid fold (<a href="https://www.reddit.com/r/haskell/comments/mvztwt/what_i_wish_somebody_told_me_when_i_was_learning/gvfd4il/?utm_source=reddit&amp;utm_medium=web2x&amp;context=3">suggested by enobayram</a>)</li>
</ul>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">getName ::</span> <span class="dt">IO</span> <span class="dt">String</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>getName <span class="ot">=</span> fold [get <span class="st">&quot;Name: &quot;</span>, <span class="fu">pure</span> <span class="st">&quot; &quot;</span>, get <span class="st">&quot;Surname: &quot;</span>]</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    get s <span class="ot">=</span> <span class="fu">putStr</span> s <span class="op">&gt;&gt;</span> <span class="fu">getLine</span></span></code></pre></div>
<p>Many people would argue that the code in <code>do</code> notation is easier to read. If that is how you feel, it goes back to the point that you have to unlearn how you read code and learn it again.</p>
<p><code>do</code> notation is easier to read because it does look like an imperative code, and, possibly, by adding this syntactic sugar Haskell might have made learning more complex, as it makes it look like you can write an imperative code in Haskell.</p>
<p>As you learn, you will realise that while succinct code takes longer to read per line, it is much faster overall - so you are saving yourself time by making it more succinct. Also, many libraries use a succinct functional style, so getting fluent with it will pay back very quickly.</p>
<h3 id="do-not-worry-about-the-glue-code">Do not worry about the glue code</h3>
<p>Most of us use computers having quite vague ideas about how they work. Yet when it comes to reading the code, we have an expectation that we would have an equal understanding of every line and every character in our code.</p>
<p>With Haskell it helps to differentiate between your application domain code, that you want to be as readable as possible, and the “glue code”, that simply connects different things.</p>
<p>Such glue are, for example, various “lift” functions that allow to compose different Monad types. Next time you stumble on something that looks like “lift”, you can skip looking up what exactly it is - focus on the types around it and the functions that do something meaningful to your application - if compiler is happy and your code passes tests, understanding every bit of glue code is unnecessary.</p>
<p>What helps is making reusable functions with short names that minimize the cognitive overhead.</p>
<p>For example, one of the pieces of glue I found useful was this function:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ot">liftError ::</span> (<span class="dt">MonadIO</span> m, <span class="dt">MonadError</span> e&#39; m) <span class="ot">=&gt;</span> (e <span class="ot">-&gt;</span> e&#39;) <span class="ot">-&gt;</span> <span class="dt">ExceptT</span> e <span class="dt">IO</span> a <span class="ot">-&gt;</span> m a</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>liftError f a <span class="ot">=</span> liftIO (first f <span class="op">&lt;$&gt;</span> runExceptT a) <span class="op">&gt;&gt;=</span> liftEither</span></code></pre></div>
<p>While it may look scary inside, like a computer, you don’t need to understand how it works to be able to use it effectively - it is enough to understand by looking at its type that it “lifts” an action expressed as <code>ExceptT e IO</code> monad to a more generic monad <code>(MonadIO m, MonadError e' m)</code>, transforming the error type at the same time - it is useful when composing different libraries or modules each using their own error type.</p>
<p>An equivalent code in <code>do</code> notation might be easier to parse for the beginners:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ot">liftError ::</span> (<span class="dt">MonadIO</span> m, <span class="dt">MonadError</span> e&#39; m) <span class="ot">=&gt;</span> (e <span class="ot">-&gt;</span> e&#39;) <span class="ot">-&gt;</span> <span class="dt">ExceptT</span> e <span class="dt">IO</span> a <span class="ot">-&gt;</span> m a</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>liftError f a <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  b <span class="ot">&lt;-</span> liftIO <span class="op">$</span> runExceptT a</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> c <span class="ot">=</span> <span class="kw">case</span> b <span class="kw">of</span> <span class="co">-- this case is Bifunctor `first` method used above</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">Left</span> e <span class="ot">-&gt;</span> <span class="dt">Left</span> (f e)</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>        <span class="dt">Right</span> x <span class="ot">-&gt;</span> <span class="dt">Right</span> x</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>  liftEither c</span></code></pre></div>
<p>But the point is that you do not need to understand either code to effectively use this function, and you will see that short functions are easier to maintain.</p>
<h2 id="embrace-purity">Embrace purity</h2>
<h3 id="function-evaluation-produces-no-side-effects">Function evaluation produces no side effects</h3>
<p>In a functional language a function does nothing - it simply defines a transformation between types - but it does not perform this transformation until it is… It is tempting to say “called”, but the functions are not “called” in functional languages - they are evaluated and combined in bigger transformations, until the whole program is constructed.</p>
<p>Functions that do nothing cannot produce side effects. To my surprise this is true even for the functions that evaluate to the IO monad - it is conventional to say that such functions perform IO, are executed step by step, and have side effects.</p>
<p>But in reality it is not function evaluation that produces side effects - a function simply evaluates to an IO action. This action can be chained with another IO action or it can be passed as parameter and simply be thrown away based on some other function evaluation. The whole program is one combined IO action that is, when executed, does indeed produce side effects.</p>
<p>Many tutorials separate code to functions with and without side effects, but it only increases the confusion about how the language works, and confronted with a simple function of the type <code>Bool -&gt; IO a -&gt; IO b -&gt; IO (Either a b)</code> most beginners (myself included) are puzzled by what this function can possibly do.</p>
<p>But once you remind yourself that functions do nothing, you may realize that this function probably evaluates to a single IO action by choosing one of two provided IO actions based on the boolean value (and none of the actions is performed, until the whole program runs):</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>ifIO<span class="op">:</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> b <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Either</span> a b)</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>ifIO x a b <span class="ot">=</span> <span class="kw">if</span> x <span class="kw">then</span> <span class="dt">Right</span> <span class="op">&lt;$&gt;</span> b <span class="kw">else</span> <span class="dt">Left</span> <span class="op">&lt;$&gt;</span> a</span></code></pre></div>
<h2 id="choose-effective-tools">Choose effective tools</h2>
<h3 id="effective-developer-environment-for-fast-iteration">Effective developer environment for fast iteration</h3>
<p>My choices, mostly suggested by some pragmatic people, were:</p>
<ul>
<li>stack, to avoid managing ghc and cabal separately, and always have compatible dependency versions that were tested against each other on stackage.org</li>
<li>simple-hpack project template, for simpler dependency management</li>
<li>Haskell Language Server for IDE</li>
<li>ormolu for code formatting</li>
<li>hlint - it is very helpful with its non-trivial suggestions on how the code could be simplified, making your code more concise.</li>
<li>if you use VS Code - <a href="https://marketplace.visualstudio.com/items?itemName=haskell.haskell">this extension</a> includes ormolu and hlint out of the box.</li>
</ul>
<p>Patrick Thompson has a great post about <a href="https://blog.sumtypeofway.com/posts/fast-iteration-with-haskell.html">faster iteration in industrial Haskell</a> on the subject.</p>
<p>Whichever tools you use, make sure they support fast code iteration.</p>
<h3 id="use-hoogle">Use Hoogle</h3>
<p>Hoogle is a great resource to find functions via their type signatures. You are likely to have many cases when you know what kind of function you need (that is, its type), and you may expect that some library has it - but how do you find it?</p>
<p>In many other languages you would try to think how it is named, and then search for it by name. With Haskell all you need is to search for the type of a function.</p>
<p>For example if you search for function with type <a href="https://hoogle.haskell.org/?hoogle=(b+-%3E+c)+-%3E+(a+-%3E+m+b)+-%3E+(a+-%3E+m+c)&amp;scope=set:stackage"><code>(a -&gt; b) -&gt; (c -&gt; f a) -&gt; c -&gt; f b</code></a> <a href="#fn8" class="footnote-ref" id="fnref8" role="doc-noteref"><sup>8</sup></a>, which is a composition inside Functor, you would find two packages that implement it as function <code>&lt;.&gt;</code> which looks similar to <code>&lt;$&gt;</code> (the latter being function application inside Functor) - you can either use this function from the library or just look at its code and see that <code>f &lt;.&gt; g</code> is exactly the same as <code>fmap f . g</code>, so you could just use this code.</p>
<h2 id="more-advanced-things-that-worked-for-me">More advanced things that worked for me</h2>
<h3 id="use-recommendations-from-fp-complete">Use recommendations from FP Complete</h3>
<p>Using <code>ReaderT</code> monad transformer (or <code>MonadReader</code> class) with <a href="https://hackage.haskell.org/package/unliftio">unliftio</a> library would save you a lot of time when you get to handling exceptions (all real applications need it) <a href="#fn9" class="footnote-ref" id="fnref9" role="doc-noteref"><sup>9</sup></a>.</p>
<p>If the application is large, you can have a polymorphic type of the environment in each application component, that only requires a particular property in the environment, without being able to access the whole, and without the need to recompile a module when the type of the environment changes - no need for a large shared global object <a href="#fn10" class="footnote-ref" id="fnref10" role="doc-noteref"><sup>10</sup></a>.</p>
<p>Also, I found it effective to have <code>MonadError</code> in the stack than using exceptions - it seemed “better” to pass logical errors as <code>Either</code>, and without <code>MonadError</code> you would be either constantly handling them with <code>case</code> or with double functor applications <a href="#fn11" class="footnote-ref" id="fnref11" role="doc-noteref"><sup>11</sup></a>.</p>
<h3 id="haskell-libraries-can-create-a-new-language">Haskell libraries can create a “new language”</h3>
<p>What comes as a surprise to newcomers is how large and complex Haskell libraries can be - many of them define their own “languages”, using complex combinations of operators not used anywhere else to express their logic. <a href="#fn12" class="footnote-ref" id="fnref12" role="doc-noteref"><sup>12</sup></a></p>
<p>Such libraries require a higher investment than some large libraries in other languages, but they require less time and offer better return on investment than learning a new language.</p>
<p>The last point applies to Haskell itself: it requires a substantially higher investment to master it, but it offers better returns on this investment. Paraphrasing a proverb <a href="#fn13" class="footnote-ref" id="fnref13" role="doc-noteref"><sup>13</sup></a>, “I don’t have enough time to learn the languages that require less time to learn”.</p>
<h3 id="learn-concurrent-programming-and-stm">Learn concurrent programming and STM</h3>
<p>Tutorials often explain State monad, but it is rarely useful other than for imperative algorithms without side effects - there can be more efficient equivalent functional algorithms available just a search away (quite often, already implemented as a library) or you do need side effects.</p>
<p>You would be better off investing this time to learn STM primitives and the Haskell model of concurrency - <a href="https://www.oreilly.com/libqrary/view/parallel-and-concurrent/9781449335939/">Parallel and Concurrent Programming in Haskell</a> is a great book that covers it.</p>
<h3 id="do-not-use-algebraic-effects-yet">Do not use algebraic effects (yet)</h3>
<p>I am talking about about an approach to modelling operations via algebraic data types, that is provided by several libraries: polysemy, fused-effects, etc. <a href="#fn14" class="footnote-ref" id="fnref14" role="doc-noteref"><sup>14</sup></a></p>
<p>The exception is when you work with a project that uses them already, and you have people to save you when you get stuck implementing any non-trivial scenario.</p>
<p>The problem is that there are lots of libraries you are likely to use that are implemented with Monads, and you would spend a large amount of time figuring out wiring between the parts of your code. Also, exception handling proved non-trivial.</p>
<p>A very promising development is <a href="https://github.com/hasura/eff">Eff</a> library that relies on the new core language primitive <a href="https://github.com/lexi-lambda/ghc-proposals/blob/delimited-continuation-primops/proposals/0000-delimited-continuation-primops.md">proposed</a> by <a href="https://github.com/lexi-lambda">Alexis King</a> that was just added to GHC - that might be the solution we have all been waiting for, but we are still probably 3-10 years away from the ecosystem catching up.</p>
<p>For now, you would be much better off investing this time into getting fluent with Monad <a href="http://hackage.haskell.org/package/transformers">transformers</a> and <a href="https://hackage.haskell.org/package/mtl">mtl</a> libraries, and not worry about n<sup>2</sup> composition cost <a href="#fn15" class="footnote-ref" id="fnref15" role="doc-noteref"><sup>15</sup></a>.</p>
<h2 id="where-to-learn-from">Where to learn from</h2>
<h3 id="do-not-read-lyah">Do not read LYAH</h3>
<p><a href="https://learnyouahaskell.github.io">Learn You a Haskell</a> is branded as “the funkiest way to learn Haskell”, but to me it was the book that killed my interest to Haskell for several years. It has many details but it doesn’t provide a big picture.</p>
<p>If you must read it (e.g. your boss makes you), do it quickly and avoid the most detail-heavy chapters. And once you have read it, do not assume you can write real world Haskell programs - this book does not prepare you for it.</p>
<h3 id="what-to-read">What to read</h3>
<p>In addition to the books and posts mentioned before, you could find these books helpful:</p>
<p><a href="https://en.m.wikibooks.org/wiki/Haskell">Haskell in wikibooks</a> - it was one of the most helpful resources for me.</p>
<p><a href="https://wiki.haskell.org/Typeclassopedia">Typeclassopedia</a> by Brent Yorgey.</p>
<p><a href="https://leanpub.com/thinking-with-types">Thinking with Types</a> by Sandy Maguire will provide with a much deeper understanding of type system, once you are fluent with the basics.</p>
<p><a href="http://book.realworldhaskell.org/read/">Real world Haskell</a> looks promising - I wasn’t lucky enough to stumble upon it when I needed it, but I’ve learned from other <a href="http://www.serpentine.com/blog/">writings</a> and <a href="http://hackage.haskell.org/user/BryanOSullivan">code</a> of Bryan O’Sullivan.</p>
<p>There are lots of helpful blogs as well, the one by <a href="https://lexi-lambda.github.io">Alexis King</a> stands out with its simplicity and clarity of writing about type systems.</p>
<p>Finally, <a href="https://www.reddit.com/r/haskell/">r/haskell</a> subreddit is a very engaged and supportive community of developers at all levels, where you can learn all the news and ask any questions.</p>
<h2 id="learn-and-use-haskell">Learn and use Haskell!</h2>
<p>When people get a bit fluent with Haskell they suddenly see not only its rigour and stability, but also its simplicity - which may be surprising for many people, as Haskell is not particularly famous for it.</p>
<p>Many people using Haskell believe that it is simpler to create and maintain reliable, extensible and performant applications in Haskell than in any other language.</p>
<p>Haskell adoption can be made substantially easier with a bit more structured communication from the Haskell community, which is exceptionally supportive and helpful.</p>
<p>So, when you find yourself unable to maintain your own code after 3 years of writing it, time and time again, consider learning Haskell - some very complex and reliable systems are built using it.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>As the measure of engineering productivity we can use the average time to launch a given set of requirements with a fixed size team, and as the cost of ownership - the engineering time required to maintain the application.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>It is worth watching <a href="https://www.youtube.com/watch?v=ybSBCVhVWs8">the video by the Aaron Contorer</a>, the chairman of FP Complete, about functional programming, where he tells how Haskell allows to achieve productivity, quality and performance without the need to compromise on any of them.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p><a href="https://github.com/sdiehl/wiwinwlh">What I wish I knew when learning Haskell</a> is a great writing by Stephen Diehl that gave me a big picture of what can be done with Haskell - for some time it was my go to reference to find other resources.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>I did took advantage of Haskell data immutability though, being able to use a dictionary as a key to another dictionary (by value) - in typescript I had to compute its hash.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p><code>pure</code> and <code>return</code> are the same for <a href="https://hackage.haskell.org/package/base-4.15.0.0/docs/Control-Monad.html#t:Monad">well-behaved monads</a>. <a href="https://www.idris-lang.org">Idris</a> that is very similar to Haskell, with first class dependent types, completely removed <code>return</code> and only has <code>pure</code> - you could do it too in your Haskell code.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>A great book on modelling software systems is <a href="https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/index.html">Structure and Interpretation of Computer Programs</a> that is used as MIT course text - you would become a much better programmer if you study it, regardless of the language you use, and it would help you with the functional programming in particular - it uses Lisp.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7"><p>“you don’t need to understand how it works to play on it” - it is based on the <a href="https://byorgey.wordpress.com/2009/01/12/abstraction-intuition-and-the-monad-tutorial-fallacy/">earlier post</a> by Brent Yorgey. Some specific monad instances have additional interfaces, but there is a common interface
to them all. And you can still play on them differently.<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn8"><p>The actual letters you use for different types do not matter.<a href="#fnref8" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn9"><p>See great posts by Michael Snoyman about <a href="https://www.fpcomplete.com/blog/2017/06/readert-design-pattern/">ReaderT pattern</a> and <a href="https://www.fpcomplete.com/blog/2017/06/tale-of-two-brackets/">unliftio</a><a href="#fnref9" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn10"><p>Using <code>HasField</code> from base or a fancier one from <a href="https://hackage.haskell.org/package/generic-lens">generic-lens</a> package.<a href="#fnref10" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn11"><p>We used this approach for <a href="https://github.com/simplex-chat/simplexmq/blob/master/src/Simplex/Messaging/Agent.hs#L106">SMP agent</a> that is part of <a href="https://simplex.chat">https://simplex.chat</a>. The caveat here is that <code>unliftio</code> <a href="https://github.com/fpco/unliftio/issues/68">does not define an instance</a> of <code>MonadUnliftIO</code> for <code>ExceptT</code>, so you would have to either have an orphan instance or <code>newtype</code> it, and be aware that both your logical errors and IO exceptions will be mixed into Either value - which is what you might want anyway.<a href="#fnref11" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn12"><p>Lenses are one such example.<a href="#fnref12" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn13"><p>“I am not rich enough to buy cheap things”.<a href="#fnref13" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn14"><p>There are advanced composition scenarios that require using effects, but they are quite rare.<a href="#fnref14" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn15"><p>The cost to compose effects is linear, but there is a large constant factor, that makes mtl n<sup>2</sup> composition cheaper in real world applications, particularly given that most of this cost has been covered by mtl library.<a href="#fnref15" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
  </section>
  <section class="links">
    <a href="https://www.reddit.com/r/haskell/comments/mvztwt/what_i_wish_somebody_told_me_when_i_was_learning/" target="_blank"><img src="/images/reddit.png"></a>
    <a href="https://twitter.com/intent/tweet?via=epoberezkin&text=What%20I%20wish%20somebody%20told%20me%20when%20I%20was%20learning%20Haskell&hashtags=haskell%2Ccoding%2Cessay&original_referer=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2021-04-21-what-i-wish-somebody-told-me-when-i-was-learning-Haskell.html&url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2021-04-21-what-i-wish-somebody-told-me-when-i-was-learning-Haskell.html" target="_blank"><img src="/images/tweet.png"></a>
    
  </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Ajv Version 7: Big changes and improvements</title>
    <link href="https://www.poberezkin.com/posts/2021-02-11-ajv-version-7-big-changes-and-improvements.html" />
    <id>https://www.poberezkin.com/posts/2021-02-11-ajv-version-7-big-changes-and-improvements.html</id>
    <published>2021-02-11T00:00:00Z</published>
    <updated>2021-02-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <section class="header">
    <div class="info">
      Posted on
      
        February 11, 2021
      
      
        by Evgeny Poberezkin
      
    </div>
    <div class="info">
      
        Tags: <a title="All pages tagged &#39;open-source&#39;." href="/tags/open-source.html" rel="tag">open-source</a>, <a title="All pages tagged &#39;javascript&#39;." href="/tags/javascript.html" rel="tag">javascript</a>, <a title="All pages tagged &#39;json-schema&#39;." href="/tags/json-schema.html" rel="tag">json-schema</a>, <a title="All pages tagged &#39;coding&#39;." href="/tags/coding.html" rel="tag">coding</a>, <a title="All pages tagged &#39;ajv&#39;." href="/tags/ajv.html" rel="tag">ajv</a>
      
    </div>
  </section>
  <section>
    <p><a href="https://github.com/ajv-validator/ajv"><img src="/images/ajv.svg" width="20%" style="min-width: 100px; clear:right; float: right; margin: 0 1.65% 2.5% 5%;"></a></p>
<p>This post is <em><a href="https://openjsf.org/blog/2021/02/11/project-news-ajv-version-7-big-changes-and-improvements/">also published by OpenJS foundation</a></em></p>
<h2 id="version-7">Version 7</h2>
<p>It’s been over a month since Ajv version 7 was released, and in this time many users have migrated to the new version. Ajv v7 is a complete rewrite that both changed the language to TypeScript and also changed the library design. I’m happy to share that it has been relatively smooth, without any major issues.</p>
<h2 id="whats-new">What’s new</h2>
<p>I’ve <a href="http://www.poberezkin.com/posts/2020-11-14-ajv-time-to-migrate-to-version-7.html">written previously</a> about what has changed in version 7, to summarize:</p>
<ol type="1">
<li>Support of the JSON Schema draft 2019-09 - users have been asking specifically for <code>unevaluatedProperties</code> keyword, which adds flexibility to the valuation scenarios, even if at a performance cost.</li>
<li>More secure code generation in case untrusted schemas are used. Execution of code that might be embedded in untrusted schemas is now prevented by design, on a compiler type system level (and you don’t need to use TypeScript to benefit from it, unless you are defining your own keywords).</li>
<li>Standalone validation code generation is now comprehensively supported, for all schemas.</li>
<li>Strict mode protecting users from common mistakes when writing JSON Schemas.</li>
</ol>
<p>That is a big list of improvements that was possible thanks to Mozilla’s MOSS program grant.</p>
<h2 id="better-for-community">Better for community</h2>
<p>I’m also excited to share that Ajv v7 has grown contribution interest from its users, with some cases when independent users are interested to collaborate between them on some new features.</p>
<p>There are several reasons for that, I believe:</p>
<ul>
<li>the code is better organised and written on a higher level - it is easier to read and to change than before.</li>
<li>documentation is now better structured with additional sections specifically for contributors - <a href="https://github.com/ajv-validator/ajv/blob/master/docs/components.md">code components</a> and <a href="https://github.com/ajv-validator/ajv/blob/master/docs/codegen.md">code generation</a>.</li>
</ul>
<p>I am really looking forward to all the new ideas and features coming from Ajv users.</p>
<h2 id="whats-changed-and-removed">What’s changed and removed</h2>
<p>These improvements came at a cost of a full library redesign, that requires being aware of these changes during migration:</p>
<ul>
<li>Importing from your code</li>
<li>Installation</li>
<li>Code generation performance</li>
<li>Caching compiled schemas</li>
<li>Validation of JSON Schema formats</li>
<li>Migrating from JSON Schema draft 4</li>
</ul>
<p>Below these changes are covered in detail - they were causing migration difficulties to some users.</p>
<h3 id="importing-ajv-from-your-code">Importing Ajv from your code</h3>
<p>To import Ajv in typescript you can still use default import, as before:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> Ajv <span class="im">from</span> <span class="st">&quot;ajv&quot;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> ajv <span class="op">=</span> <span class="kw">new</span> <span class="fu">Ajv</span>()</span></code></pre></div>
<p>But to import in JavaScript you now need to use <code>default</code> property of the exported object:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> Ajv <span class="op">=</span> <span class="pp">require</span>(<span class="st">&quot;ajv&quot;</span>)<span class="op">.</span><span class="at">default</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="co">// or const {default: Ajv} = require(&quot;ajv&quot;)</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> ajv <span class="op">=</span> <span class="kw">new</span> <span class="fu">Ajv</span>()</span></code></pre></div>
<p>And if you use JavaScript modules you need to import Ajv this way:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">// from .mjs file</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> Ajv <span class="im">from</span> <span class="st">&quot;ajv&quot;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> ajv <span class="op">=</span> <span class="kw">new</span> Ajv<span class="op">.</span><span class="fu">default</span>()</span></code></pre></div>
<p>This is a compromise approach that leads to a bit smaller compiled JavaScript code size of Ajv, and, what is more important, allows to export additional things alongside Ajv and does not force dependencies to use <code>esModuleInterop</code> setting of TypeScript. Possibly, there is a better way to export Ajv - please share any ideas in <a href="https://github.com/ajv-validator/ajv/issues/1381">this issue</a>.</p>
<h3 id="ajv-installation">Ajv installation</h3>
<p>Several users, in particular those who use <code>yarn</code> rather than <code>npm</code>, had issues related to version conflicts between old and new versions. Because Ajv is a dependency of many JavaScript tools, the users can have both version 6 and version 7 installed at the same time.</p>
<p>When version 6 was released 2 years ago there were a lot of version conflicts as well. Since then <code>npm</code> seems to have improved - it handles multiple versions correctly when performing a clean installation - at least I have not seen any example that shows version conflicts in this scenario. But when performing incremental installations version conflicts still happened to a few users.</p>
<p>This situation should resolve itself as dependencies migrate, and in all cases clean <code>npm</code> installation resolved the problem.</p>
<h3 id="code-generation-performance">Code generation performance</h3>
<p>Validation code that Ajv v7 generates is at least as efficient as code generated by v6, and in many cases it is faster - version 7 introduced <a href="https://github.com/ajv-validator/ajv/blob/master/docs/codegen.md#code-optimization">several tree optimisations</a> and other improvements for it. The primary objective to re-design code generation was to improve its security when using untrusted schemas and to make the code more maintainable.</p>
<p>As as side effect, it also led to the reduction of Ajv bundle size.</p>
<p>The downside that may be affecting some users is that the code generation itself is now 4-5 times slower.</p>
<p>For most users it won’t have an impact on the application performance, as schema compilation should only happen once, when the application is started, or when the schema is used for the first time. But there are several scenarios when it can be important:</p>
<ol type="1">
<li>When using schemas in short-lived environments when validation is performed only once or few times per compilation - it may include serverless environments, short-lived web pages, etc. In this case you should explore the possibility of using the standalone validation code to compile all your schemas at build-time. Ajv v7 improved the stability of generating standalone validation code and it is now supported for all schemas.</li>
<li>When schema is generated dynamically for each validation (or to perform a small number of validations). There is no solution for such scenario - Ajv (and any other validator that compiles schemas to code) is simply not a good fit for such scenarios, if the performance is critical. The main advantage of schema compilation is that the produced validation code is much faster than it would have been to interpret the schema. But if the schema is dynamic, then there is no benefit to the compilation - a validator that interprets the schema in the process of validation could be a better fit. While it may be 50-100 times slower to validate, it may still be faster than compiling schema to code. You need to run your own benchmarks and decide what is better for your application.</li>
<li>When you used Ajv incorrectly and accidentally compiled schema for each validation. The correct usage is either to use the same Ajv instance to manage both schemas and compiled validation functions, or to manage (cache) them in your application code. In Ajv v7 this incorrect usage is more likely to be noticeable both because of slower compilation speed and also because Ajv caches the functions using schema itself as a key and not it’s serialised presentation.</li>
</ol>
<p>To summarize, if you use Ajv correctly, as it is intended, it will be both safer and faster, but if you use(d) it incorrectly it may become slower.</p>
<h3 id="caching-compiled-schemas">Caching compiled schemas</h3>
<p>Ajv compiles schemas to validation code that is very fast, but the compilation itself is costly, so it is important to reuse compiled validation functions.</p>
<p>There are 2 possible approaches:</p>
<ol type="1">
<li>Compile schemas either at start time or on demand, lazily, and manage how validation functions are re-used in your application code:</li>
</ol>
<div class="sourceCode" id="cb4"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> schema <span class="op">=</span> <span class="pp">require</span>(<span class="st">&quot;mu_schema.json&quot;</span>)</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> validate <span class="op">=</span> ajv<span class="op">.</span><span class="fu">compile</span>(schema)</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="co">// ...</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="co">// in this case schema compilation happens</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="co">// when app is started, before any request is processed</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="kw">async</span> <span class="kw">function</span> <span class="fu">processRequest</span>(req) {</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (<span class="op">!</span><span class="fu">validate</span>(req<span class="op">.</span><span class="at">body</span>)) <span class="cf">throw</span> <span class="bu">Error</span>(<span class="st">&quot;bad request&quot;</span>)</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>It is important that <code>ajv.compile</code> is used outside of any API endpoints, as otherwise ajv may recompile the schema every time it is used (depending whether you pass the same schema reference or not).</p>
<ol start="2" type="1">
<li>Add all schemas to Ajv instance, using it as a cache of compiled validation functions, later retrieve them using either the schema <code>$id</code> attribute from the schema or the key passed to <code>addSchema</code> method.</li>
</ol>
<p>File <code>./my_schema.json</code>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode json"><code class="sourceCode json"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="fu">{</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;$id&quot;</span><span class="fu">:</span> <span class="st">&quot;https://example.com/schemas/my_schema&quot;</span><span class="fu">,</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;type&quot;</span><span class="fu">:</span> <span class="st">&quot;object&quot;</span><span class="fu">,</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;properties&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;foo&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;type&quot;</span><span class="fu">:</span> <span class="st">&quot;string&quot;</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">}</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>  <span class="fu">}</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="fu">}</span></span></code></pre></div>
<p>Code:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> schema <span class="op">=</span> <span class="pp">require</span>(<span class="st">&quot;./my_schema.json&quot;</span>)</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>ajv<span class="op">.</span><span class="fu">addSchema</span>(schema<span class="op">,</span> <span class="st">&quot;my_schema&quot;</span>)</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="co">// ...</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="co">// schema compilation happens on demand</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="co">// but only the first time the schema is used</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="kw">async</span> <span class="kw">function</span> <span class="fu">processRequest</span>(req) {</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> validate <span class="op">=</span> ajv<span class="op">.</span><span class="fu">getSchema</span>(<span class="st">&quot;https://example.com/schemas/my_schema&quot;</span>)</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>  <span class="co">// or</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>  <span class="co">// const validate = ajv.getSchema(&quot;my_schema&quot;)</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (<span class="op">!</span><span class="fu">validate</span>(req<span class="op">.</span><span class="at">body</span>)) <span class="cf">throw</span> <span class="bu">Error</span>(<span class="st">&quot;bad request&quot;</span>)</span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>If you are passing exactly the same (and not just deeply equal) schema object to ajv, ajv would use a cached validation function anyway, using schema object reference as a key.</p>
<p>But if you pass the new instance of the schema, even if the contents of the object is deeply equal, ajv would compile it again. In version 6 Ajv used a serialized schema as a cache key, and it partially protected from the incorrect usage of compiled validation functions, but it had both performance and memory costs. Some users had <a href="https://github.com/ajv-validator/ajv/issues/1413">this problem</a> when migrating to version 7.</p>
<h3 id="validation-of-json-schema-formats">Validation of JSON Schema formats</h3>
<p>Format validation has always been a difficult area, as it is not possible to find an optimal balance between validation performance, correctness and security - these objectives are contradictory, and, depending on your application, you would need a different approach to validate the same format.</p>
<p>JSON Schema specification evolved to the point of declaring format validation as an optional, opt-in behaviour, and Ajv v7 made the same choice - formats are now released as a separate package <a href="https://github.com/ajv-validator/ajv-formats">ajv-formats</a>.</p>
<p>Unlike JSON Schema specifies, Ajv does not just quietly ignore formats - it would have been error-prone - you have to explicitly configure it for the desired behaviour (or do not use formats in the schemas).</p>
<p>You have several options:</p>
<ol type="1">
<li>Fully disable format validation with the option <code>validateFormats: false</code>. In this case, even if you use formats in the schema, they will be ignored.</li>
<li>Define the list of formats that you want to be ignored by passing <code>true</code> values for some formats in <code>formats</code> option:</li>
</ol>
<div class="sourceCode" id="cb7"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">new</span> <span class="fu">Ajv</span>({<span class="dt">formats</span><span class="op">:</span> {<span class="dt">email</span><span class="op">:</span> <span class="kw">true</span>}})</span></code></pre></div>
<p>The configuration above would allow and ignore <code>email</code> format in your schemas, but would still throw exception if any other format is used. This approach is more performant than passing regular expression <code>/.*/</code> or function <code>() =&gt; true</code> because they would have to be executed, and in case of <code>true</code> no validation code is generated when this format is used.
3. Use <a href="https://github.com/ajv-validator/ajv-formats">ajv-formats</a> package - it includes all formats previously shipped as part of Ajv, some of the formats have two options - more performant and more correct (<code>fast</code> and <code>full</code> - see the docs to ajv-formats).
4. Define your own functions (or use some a 3rd-party library) to validate formats that suit your application - you can pass functions to ajv for each format you use and you can even use asynchronous validation if, for example, you want to validate the existence and/or configuration of a domain name as part of <code>email</code> or <code>hostname</code> validation.</p>
<p>The last approach to validate formats - defining your own functions or using a library - is strongly recommended as it allows you to achieve the right balance between validation security, speed and correctness that fits your application.</p>
<h3 id="migrating-from-json-schema-draft-4">Migrating from JSON Schema draft 4</h3>
<p>Draft 4 of the JSON Schema is the first version that Ajv supported, and since then there were several important changes in the specification that made supporting multiple versions of JSON Schema in the same code unnecessarily complex.</p>
<p>JSON Schema draft 2019-09 has introduced further complexity, so the support for draft 4 was removed.</p>
<p>You can either continue using JSON Schema draft 4 with Ajv version 6, or if you want to have all the advantages of using Ajv version 7 you need to migrate your schemas - it is very simple with <a href="https://github.com/ajv-validator/ajv-cli#migrate-schemas">ajv-cli</a> command line utility.</p>
<h2 id="what-is-next">What is next</h2>
<p>Thanks for continuing sponsorship from Mozilla, many new improvements are coming in Ajv - the new major version 8 will be released in a few months.</p>
<p>The most exciting new feature that was just released in <a href="https://github.com/ajv-validator/ajv/releases/tag/v7.1.0">version 7.1.0</a> is the support for the alternative specification for JSON validation - <a href="https://jsontypedef.com">JSON Type Definition</a> - it was <a href="https://datatracker.ietf.org/doc/rfc8927/">approved as RFC8927</a> in November 2020. This is a much simpler and more restrictive standard than JSON Schema, and it enforces better data design for JSON APIs, prevents user mistakes and maps well to type systems of all major languages. See <a href="https://github.com/ajv-validator/ajv/tree/master#choosing-schema-language">Choosing schema language</a> section in Ajv readme for a detailed comparison.</p>
<p>Ajv version 8 will bring many additional features and stability improvements and also will support the changes in the most recent JSON Schema draft 2020-12.</p>
<p>The second exciting change that is coming soon is a new Ajv website - to make the documentation more accessible and discoverable, and to make contributions easier.</p>
<p>Thanks a lot for supporting Ajv!</p>
  </section>
  <section class="links">
    <a href="https://www.reddit.com/submit?url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2021-02-11-ajv-version-7-big-changes-and-improvements.html&title=Ajv Version 7: Big changes and improvements" target="_blank"><img src="/images/reddit.png"></a>
    <a href="https://twitter.com/intent/tweet?via=epoberezkin&text=Ajv%20Version%207%3A%20Big%20changes%20and%20improvements&hashtags=open-source%2Cjavascript%2Cjson-schema%2Ccoding%2Cajv&original_referer=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2021-02-11-ajv-version-7-big-changes-and-improvements.html&url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2021-02-11-ajv-version-7-big-changes-and-improvements.html" target="_blank"><img src="/images/tweet.png"></a>
    
      <a href="https://github.com/ajv-validator/ajv" target="_blank"><img src="/images/repo.png"></a>
    
  </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Ajv validator: time to migrate to version 7!</title>
    <link href="https://www.poberezkin.com/posts/2020-11-14-ajv-time-to-migrate-to-version-7.html" />
    <id>https://www.poberezkin.com/posts/2020-11-14-ajv-time-to-migrate-to-version-7.html</id>
    <published>2020-11-14T00:00:00Z</published>
    <updated>2020-11-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <section class="header">
    <div class="info">
      Posted on
      
        November 14, 2020
      
      
        by Evgeny Poberezkin
      
    </div>
    <div class="info">
      
        Tags: <a title="All pages tagged &#39;open-source&#39;." href="/tags/open-source.html" rel="tag">open-source</a>, <a title="All pages tagged &#39;javascript&#39;." href="/tags/javascript.html" rel="tag">javascript</a>, <a title="All pages tagged &#39;json-schema&#39;." href="/tags/json-schema.html" rel="tag">json-schema</a>, <a title="All pages tagged &#39;coding&#39;." href="/tags/coding.html" rel="tag">coding</a>, <a title="All pages tagged &#39;ajv&#39;." href="/tags/ajv.html" rel="tag">ajv</a>
      
    </div>
  </section>
  <section>
    <p><a href="https://github.com/ajv-validator/ajv"><img src="/images/ajv.svg" width="20%" style="min-width: 100px; clear:right; float: right; margin: 0 1.65% 2.5% 5%;"></a></p>
<h2 id="prologue">Prologue</h2>
<p>My relationship with <a href="https://github.com/ajv-validator/ajv">Ajv</a> changed over time, going full circle:</p>
<ul>
<li>the weekend project to enable another project almost nobody knows about (this short <a href="./2019-07-10-talk-why-you-should-open-source-for-real.html">conference talk</a> can give you some context).</li>
<li>the project I had a growing excitement about as it was becoming more and more adopted, with some huge number of JavaScript developers using it <a href="https://www.google.com/maps/d/u/1/edit?mid=1MGRV8ciFUGIbO1l0EKFWNJGYE7iSkDxP&amp;ll=21.319581133324633%2C-23.649554920324135&amp;z=3">all over the world</a>, millions of GitHub projects depending on it and over 100 million <a href="https://www.npmjs.com/package/ajv">npm downloads</a> every month.</li>
<li>a huge burden I could not allow myself to drop long after I stopped being interested in it.</li>
<li>realisation that I will develop it further only if I am paid for it and applying for Mozilla’s Open Source Support grant - and <a href="./2020-08-14-ajv-json-validator-mozilla-open-source-grant-openjs-foundation.html">having it awarded</a> to my excitement.</li>
<li>being as excited about it as I was 5 years ago, having fully re-written Ajv in version 7 at my current level of the problem understanding and competence (I removed lots of embarrassing 5 year old code), thanks to the grant that paid for this work - and there is lots more work to do.</li>
</ul>
<h2 id="whats-changed-in-version-7">What’s changed in version 7</h2>
<p>5 years of adding features and resolving bugs resulted in somewhat tangled mess of <a href="https://github.com/olado/doT">doT templates</a> (doT engine is still a solid piece of software though) and ES5 code that quite a few people managed to figure out - I am super grateful to <a href="https://github.com/ajv-validator/ajv/graphs/contributors">almost 100 contributors</a>.</p>
<p>Now that Ajv is fully re-written in TypeScript I hope that it can enable much wider contributions from Ajv users.</p>
<h3 id="code-generation">Code generation</h3>
<p><a href="https://github.com/olado/doT">doT templates</a> are replaced with a new code generation API (any suggestions how it can be improved would be super helpful) to generate control flow code using light-weight syntax trees. This tree is optimized, reducing generated code size by 10-15%, compared with version 6.</p>
<p>To generate expressions (and conditions) Ajv now uses tagged template literals that make the code easy to read (unlike string concatenation or doT templates), but at the same time make accidental mistakes impossible - otherwise they could lead to remote code injection (when untrusted schemas are used). If Ajv internal code were to use an unsafe string where a number or variable name is expected, it would be quoted and not executed - so the schema would fail to compile or throw an exception, but not execute untrusted code.</p>
<p>As a side effect it made the code of validation keywords much more concise and expressive. See <a href="https://github.com/ajv-validator/ajv/blob/master/docs/codegen.md">code generation</a> in Ajv docs. I believe it may have a value as a standalone library - let me know if you have any use cases for it, I am considering splitting it from Ajv.</p>
<h3 id="schema-compilation">Schema compilation</h3>
<p>The code that manages schema compilation and reference resolution is radically simplified - the same functionality is achieved with half of the code, with many recursive functions removed or refactored, without losing support of any edge cases. It also allowed to implement support for dynamic recursive references (JSON Schema draft-2019-09) that enable <a href="https://github.com/ajv-validator/ajv/blob/master/docs/validation.md#extending-recursive-schemas">extension of recursive schemas</a>.</p>
<h3 id="validation-keywords-definition">Validation keywords definition</h3>
<p>Ajv version 6 has two types of validation keywords - “standard” JSON Schema keywords, hard-wired into Ajv, and “custom keywords” - they have their own API in version 6.</p>
<p>Defining the keywords that are as performant as “standard” keywords required either using string concatenation, which is difficult, or doT templates - that nobody liked. Ajv version 7 removed the difference between bundled and user-defined keywords. While there remains a very small number of hard-wired keywords that are fundamental to how schema compilation and code generation logic works - <code>type</code>, <code>$id</code> and <code>$ref</code> - all other keywords are defined using <a href="https://github.com/ajv-validator/ajv/blob/master/docs/keywords.md#define-keyword-with-code-generation-function">the same new API</a> that is available to the users to define the additional keywords.</p>
<p>I am really excited about this change, as it should simplify using Ajv to implement any JSON schema language specification, not only JSON Schema with a capital “S”, and even wider - to implement any DSL for JSON data processing and transformation. By the time version 7 becomes the main version in December 2020 you will be able to use core Ajv class without any bundled keywords, as the foundation for your own JSON-based DSL compiler.</p>
<p>Users will also be able to use it both to define their own collections of keywords (JSON Schema specification calls them “vocabularies”) and also to use a subset of included keywords to reduce the size of the browser bundle.</p>
<p>One other exciting milestone for Ajv coming in 2021 is the support of the new specification for JSON data: <a href="https://jsontypedef.com">JSON Type Definition</a> - it started from <a href="https://github.com/json-schema-org/json-schema-spec/issues/710">this conversation</a> in JSON Schema GitHub organization and has been <a href="https://datatracker.ietf.org/doc/rfc8927/">approved as RFC8927</a> just a week ago.</p>
<p>We finally have a language to define JSON structure that enterprise users will be confident using because of its RFC status. It is super simple and much less error-prone (although with the new Ajv strict mode writing JSON Schemas became less error-prone too).</p>
<h3 id="strict-mode-for-json-schema">Strict mode for JSON Schema</h3>
<p>Ajv version 6 has several options to reduce errors when writing schemas: <code>strictKeywords</code>, <code>unknownFormats</code>, etc. It helped to reduce errors to the users who enabled these options, but all the new users had to learn about these problems from their own mistakes.</p>
<p>Version 7 of Ajv changed this approach to make <a href="https://github.com/ajv-validator/ajv/blob/master/docs/strict-mode.md">“strict mode”</a> default - it is an opinionated (and optional) set of restrictions about how JSON Schema should be written. For example, a common mistake for the new JSON Schema users is this schema (that is a valid JSON Schema):</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode json"><code class="sourceCode json"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="fu">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;properties&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;foo&quot;</span><span class="fu">:</span> <span class="fu">{</span><span class="dt">&quot;type&quot;</span><span class="fu">:</span> <span class="st">&quot;string&quot;</span><span class="fu">}</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  <span class="fu">}</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="fu">}</span></span></code></pre></div>
<p>A majority of the new users of JSON Schema reasonably expect that this schema requires that your data is an object with a property “foo” that is a string - and it would be actually correct if it were <a href="https://jsontypedef.com">JSON Type Definition</a> schema. But in JSON Schema specification this schema means the following:</p>
<blockquote>
<p>IF your data is an <code>object</code>, AND this object has a property <code>"foo"</code>, THEN the type of this property should be a <code>string</code>.</p>
</blockquote>
<p>So any non-object is valid against this schema, and also any object without a property “foo”. Quite a surprise!</p>
<p>In <a href="https://github.com/ajv-validator/ajv/blob/master/docs/strict-mode.md">strict mode</a> that Ajv has enabled by default this schema would log a warning (or optionally throw an exception with <code>strictTypes: true</code> option) unless you add “type” keyword:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode json"><code class="sourceCode json"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="fu">{</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;type&quot;</span><span class="fu">:</span> <span class="st">&quot;object&quot;</span><span class="fu">,</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;properties&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;foo&quot;</span><span class="fu">:</span> <span class="fu">{</span><span class="dt">&quot;type&quot;</span><span class="fu">:</span> <span class="st">&quot;string&quot;</span><span class="fu">}</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>  <span class="fu">}</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="fu">}</span></span></code></pre></div>
<p>It still allows objects without property “foo” - you need to use the “required” keyword, but at least it won’t allow non-objects now.</p>
<p>If you use TypeScript there is an even stricter option now - you can use a generic type <code>JSONSchemaType&lt;T&gt;</code> as a type for the schema itself (assuming the data has type <code>T</code>) that would fail TypeScript compilation unless you add some other keywords - see the <a href="https://github.com/ajv-validator/ajv#getting-started">example in readme</a>.</p>
<p>While strict mode is designed to avoid mistakes, it does not change JSON Schema semantics or validation results - if a schema is correct in “strict mode”, it is also correct without it and it produces the same validation results.</p>
<h3 id="parse-dont-validate">Parse don’t validate</h3>
<p>Users of static type systems live by <a href="https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/">this mantra</a>, and for TypeScript users compiled validation functions are now type guards - validating data narrows its type according to the used schema.</p>
<p>Ajv users who use TypeScript <a href="https://github.com/ajv-validator/ajv/issues/736">asked to add it</a> for a couple of years - 70 people voted for this feature! Now that TypeScript support is first class, and not an afterthought, both this and another important problem of Ajv is addressed - validation errors now belong to tagged union type.</p>
<p>I am now thinking whether it should be taken it a step further - extending Ajv to generate parsing code that would not just validate the object that was pre-parsed by <code>JSON.parse()</code>, but would parse JSON and validate it at the same time, returning data of the expected type if the validation succeeds, and failing as soon as schema violation is encountered when it is possible (some validation keywords would still require parsing the whole JSON). I am not promising it, but it may happen some time next year.</p>
<h2 id="what-was-removed">What was removed</h2>
<p>Some people may get sad - I definitely am - that Ajv version 7 no longer supports draft-04 of JSON Schema specification. Draft-04 was the first version of JSON Schema that Ajv supported since 2015 and removing its support is a big decision - it is still used in some old schemas. But the specification has so substantially evolved in draft-06, -07 and -2019-09 that continuing to support draft-04 would further complicate already complex code - removing it brought some simplicity back.</p>
<p>So you will either have to migrate your schemas to draft-06 or later (e.g. using <a href="https://github.com/ajv-validator/ajv-cli">ajv-cli</a>) or to continue using Ajv version 6 that will be supported until the end of Q1 2021 and will remain stable for a much longer time.</p>
<p>Another breaking change is that support of JSON Schema formats was split to a separate package <a href="https://github.com/ajv-validator/ajv-formats">ajv-formats</a>. The first reason was that JSON Schema specification draft-2019-09 made format validation optional. The second, and more important, reason is that semantic string validation is complex, and it is impossible to find the right balance between correctness, performance and complexity that is acceptable to all users and applications. While you still can easily add the formats provided by ajv-formats package, it is up to you to assess their suitability and, if needed, to replace with other implementations that are appropriate for your use cases.</p>
<h2 id="time-to-migrate-to-version-7">Time to migrate to version 7!</h2>
<p>Although Ajv version 7 is still in beta, I believe it is stable enough and safe to use. Just make the version fixed until the major version is out of beta - there may be small API changes.</p>
<p>There are several benefits to switch to Ajv <a href="https://github.com/ajv-validator/ajv/releases">v7.0.0-beta.4</a>:</p>
<ul>
<li>support of all important JSON Schema draft-2019-09 features:
<ul>
<li>many <a href="https://github.com/ajv-validator/ajv/blob/master/docs/json-schema.md#json-schema-draft-2019-09">new validation keywords</a>, including <code>unevaluatedProperties</code> than many users needed.</li>
<li>dynamic recursive references to enable <a href="https://github.com/ajv-validator/ajv/blob/master/docs/validation.md#extending-recursive-schemas">extending recursive schemas</a></li>
</ul></li>
<li>new, easy to use keyword definition and code generation APIs, both used for included keywords and available to the users - <a href="https://github.com/ajv-validator/ajv-keywords/releases/tag/v4.0.0-beta.0">ajv-keywords</a> package was also updated to use these APIs.</li>
<li>smaller bundle size (10% reduction with the all new features added) and reduced generated code size (10-15%) - while it was not an objective, it is a nice side effect. For a moment, I was wondering if the energy savings it might create on a global scale would save one tree…</li>
</ul>
<p>Have fun migrating to Ajv version 7 - it is available to all of us, thanks to Mozilla’s grant and support. I hope these changes help you - if so, share it with other people.</p>
<p>Any feedback and suggestions would be super helpful - thank you!</p>
  </section>
  <section class="links">
    <a href="https://www.reddit.com/r/javascript/comments/jtzk94/ajv_validator_time_to_migrate_to_version_7_lots/" target="_blank"><img src="/images/reddit.png"></a>
    <a href="https://twitter.com/intent/tweet?via=epoberezkin&text=Ajv%20validator%3A%20time%20to%20migrate%20to%20version%207%21&hashtags=open-source%2Cjavascript%2Cjson-schema%2Ccoding%2Cajv&original_referer=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2020-11-14-ajv-time-to-migrate-to-version-7.html&url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2020-11-14-ajv-time-to-migrate-to-version-7.html" target="_blank"><img src="/images/tweet.png"></a>
    
      <a href="https://github.com/ajv-validator/ajv" target="_blank"><img src="/images/repo.png"></a>
    
  </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Dependent types to code are what static types to data</title>
    <link href="https://www.poberezkin.com/posts/2020-09-04-dependent-types-to-code-are-what-static-types-to-data.html" />
    <id>https://www.poberezkin.com/posts/2020-09-04-dependent-types-to-code-are-what-static-types-to-data.html</id>
    <published>2020-09-04T00:00:00Z</published>
    <updated>2020-09-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <section class="header">
    <div class="info">
      Posted on
      
        September  4, 2020
      
      
        by Evgeny Poberezkin
      
    </div>
    <div class="info">
      
        Tags: <a title="All pages tagged &#39;haskell&#39;." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged &#39;executable&#39;." href="/tags/executable.html" rel="tag">executable</a>, <a title="All pages tagged &#39;coding&#39;." href="/tags/coding.html" rel="tag">coding</a>
      
    </div>
  </section>
  <section>
    <h2 id="modeling-state-machines-with-dependent-types-in-haskell-part-2">Modeling state machines with dependent types in Haskell: Part 2</h2>
<p>This post is “literate” haskell (thanks to <a href="https://github.com/sol/markdown-unlit">markdown-unlit</a>), it can be run from the site repo using GHC 8.8.3 with <code>stack run atm</code>.</p>
<p>You may want to read first “<a href="/posts/2020-06-29-modeling-state-machine-dependent-types-haskell-1.html">Modeling state machines with dependent types in Haskell: Part 1</a>”, - this post builds upon it and answers the questions raised there.</p>
<p>If you used <a href="https://hackage.haskell.org/package/singletons">singletons</a> package and aware of the state of dependent types support in Haskell (that is, no support, but good workarounds allowing to emulate them), it should be ok to read independently.</p>
<h2 id="why">Why?</h2>
<p>In the first part I wrote about the motivation to use dependent types, but having read a post by Alexis King “<a href="https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/">Parse don’t validate</a>” about static type systems, I had an analogy to add to the motivation that is in this post title:</p>
<blockquote>
<h4 id="dependent-types-to-code-are-what-static-types-to-data">dependent types to code are what static types to data</h4>
</blockquote>
<p>In the same way the static type systems ensure data validity by construction and prevent writing code that expects or creates invalid data, dependent types can ensure code validity on the code flow, logic and state transitions level.</p>
<h2 id="questions-to-cover">Questions to cover</h2>
<p><a href="https://www.manning.com/books/type-driven-development-with-idris"><img src="/images/idris-book.png" alt="Edwin Brady: Type driven development in Idris" width="33.3%" style="min-width: 165px; float: right; margin: 0 0 5% 5%;"></a></p>
<p>The part 1 left open these questions:</p>
<ol type="1">
<li>How can we write code with dependently typed actions in a more conventional way with <code>do</code> notation.</li>
<li>How to make actions return results and to have state changes depend on these results.</li>
</ol>
<p>The ATM (cash machine) example for the second question is borrowed from the excellent book by Edwin Brady: “<a href="https://www.manning.com/books/type-driven-development-with-idris">Type driven development with Idris</a>”. Even if you are not interested in Idris, I highly recommend this book, as it could give you many ideas for writing code in any language - particularly in Haskell, as Idris is syntactically very similar, but with the types as first class citizens and full dependent types support.</p>
<p>We will use singletons library and we will need to enable “a few” GHC extensions:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE DataKinds, FlexibleInstances, GADTs, InstanceSigs,</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  LambdaCase, PolyKinds, ScopedTypeVariables, TemplateHaskell,</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="ot">  TypeApplications, TypeFamilies, UndecidableInstances #-}</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# OPTIONS_GHC -Wall -Werror=incomplete-patterns #-}</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# OPTIONS_GHC -fno-warn-unticked-promoted-constructors #-}</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Control.Monad</span> (void, forever)</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Control.XFreer</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Control.XMonad</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Kind</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Singletons</span> ()</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Singletons.TH</span></span></code></pre></div>
<h1 id="dependent-types-ergonomics">Dependent types ergonomics</h1>
<p>Let’s deal with the first question first - how to write dependently typed code so it looks, well, like code.</p>
<p>Consider a super simple not-so-abstract example of some state transitions:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">ToggleState</span> <span class="ot">=</span> <span class="dt">On</span> <span class="op">|</span> <span class="dt">Off</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Read</span>, <span class="dt">Eq</span>)</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Command</span> (<span class="ot">s ::</span> <span class="dt">ToggleState</span>) (<span class="ot">s&#39; ::</span> <span class="dt">ToggleState</span>)<span class="ot"> a ::</span> <span class="dt">Type</span> <span class="kw">where</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>  <span class="dt">TurnOn</span><span class="ot"> ::</span> <span class="dt">Command</span> <span class="dt">Off</span> <span class="dt">On</span> a</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>  <span class="dt">TurnOff</span><span class="ot"> ::</span> a <span class="ot">-&gt;</span> <span class="dt">Command</span> <span class="dt">On</span> <span class="dt">Off</span> b</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="ot">  (:&gt;&gt;=) ::</span> <span class="dt">Command</span> s1 s2 a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Command</span> s2 s3 b)  <span class="ot">-&gt;</span> <span class="dt">Command</span> s1 s3 b</span></code></pre></div>
<p>It defines Command type with two constructors parameterized on the result type that change the type-level state from On to Off and back. The last constructor allows chaining them. It is very much like a monadic bind, but it is parameterized on the toggle state to ensure that the sequence is type-aligned, that is the final type of the first argument is the same as the initial type of the second, and the combined type also matches.</p>
<p>We can define a functor instance for this type, but because of the parameterization we cannot define Applicative and Monad. Relatively well covered concept that allows to abstract what is needed here is called parameterized monads - I will not go the into details here, please review it in other sources:</p>
<ul>
<li><a href="https://okmij.org/ftp/Computation/monads.html#param-monad">Parameterized monads</a> by Oleg Kiselev</li>
<li><a href="https://leanpub.com/thinking-with-types/">Thinking with Types</a> (Indexed monads chapter) by Sandy Maguire</li>
</ul>
<p>Rather than defining the instances of indexed applicative and monad by hand, it is possible to use indexed freer monads - an evolution of <a href="https://okmij.org/ftp/Haskell/extensible/more.pdf">freer monads</a> generalized to indexed monads. It has also been covered in <a href="https://okmij.org/ftp/Haskell/extensible/index.html#extext">Parameterized extensible effects and session types</a> by Oleg Kiselev.</p>
<p>These are all fascinating subjects that probably deserve a separate tutorial-style post, please let me know if you have seen it or if you wrote it.</p>
<p>Long story short, we will use <a href="https://hackage.haskell.org/package/freer-indexed">freer-indexed</a> package to create functor, indexed applicative (<code>XApplicative</code>) and indexed monad (<code>XMonad</code>) instances of a derived type with just a few lines of code without the need to manually define monadic operations:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Command&#39;</span> (<span class="ot">s ::</span> <span class="dt">ToggleState</span>) (<span class="ot">s&#39; ::</span> <span class="dt">ToggleState</span>)<span class="ot"> res ::</span> <span class="dt">Type</span> <span class="kw">where</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">TurnOn&#39;</span><span class="ot"> ::</span> <span class="dt">Command&#39;</span> <span class="dt">Off</span> <span class="dt">On</span> a</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">TurnOff&#39;</span><span class="ot"> ::</span> a <span class="ot">-&gt;</span> <span class="dt">Command&#39;</span> <span class="dt">On</span> <span class="dt">Off</span> b</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Cmd</span> <span class="ot">=</span> <span class="dt">XFree</span> <span class="dt">Command&#39;</span></span></code></pre></div>
<p>A modified <code>Command'</code> type does not need to define its own bind constructor, instead it can use <code>XMonad</code> instance of <code>XFree Command'</code> type - the same approach that is used in algebraic effects systems. <code>Command'</code> is in essence an algebraic effect (without any means to compose it with other effects though). <code>XFree</code> is defined in this way in freer-indexed:</p>
<pre class="haskell-ignore"><code>data XFree f p q a where
  Pure :: a -&gt; XFree f p p a
  Bind :: f p q x -&gt; (x -&gt; XFree f q r a) -&gt; XFree f p r a

xfree :: f p q a -&gt; XFree f p q a
xfree fa = Bind fa Pure</code></pre>
<p>So <code>XFree</code> gives you an indexed monad to your algebraic effect. <code>Cmd</code> type created with <code>XFree</code> is the easiest to use with functions <code>turnOn</code> and <code>turnOff</code>, rather than with <code>XFree</code> constructors:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">turnOn ::</span> <span class="dt">Cmd</span> <span class="dt">Off</span> <span class="dt">On</span> a</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>turnOn <span class="ot">=</span> xfree <span class="dt">TurnOn&#39;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="ot">turnOff ::</span> a <span class="ot">-&gt;</span> <span class="dt">Cmd</span> <span class="dt">On</span> <span class="dt">Off</span> b</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>turnOff <span class="ot">=</span> xfree <span class="op">.</span> <span class="dt">TurnOff&#39;</span></span></code></pre></div>
<p>Now, having briefly covered the required abstractions, let’s get over to syntax. To use these indexed monads with <code>do</code> GHC has an extension <a href="https://downloads.haskell.org/ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-RebindableSyntax">RebindableSyntax</a> that, regardless its reputation of redefining too many things at once, is quite useful here - it allows to redefine <code>&gt;&gt;=</code> and <code>&gt;&gt;</code> to be used with indexed monads, and once it is done they can be used with <code>do</code>. The downside is that you cannot combine indexed and normal monads in the same module. It should become better when the new extension <a href="https://www.tweag.io/blog/2020-07-13-qualified-do-announcement/">QualifiedDo</a> is available.</p>
<p>With all these great things we can now write:</p>
<pre class="haskell-ignore"><code>{-# LANGUAGE RebindableSyntax #-}
import Control.XMonad.Do
import Prelude hiding ((&gt;&gt;), (&gt;&gt;=))

toggle :: Cmd Off Off Int
toggle = do
  m &lt;- turnOn
  turnOff m</code></pre>
<p>or without do notation:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ot">toggle ::</span> <span class="dt">Cmd</span> <span class="dt">Off</span> <span class="dt">Off</span> <span class="dt">Int</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>toggle <span class="ot">=</span> turnOn <span class="op">&gt;&gt;=:</span> \m <span class="ot">-&gt;</span> turnOff m</span></code></pre></div>
<p>and it wouldn’t have compiled if state transitions didn’t match.</p>
<p><code>&gt;&gt;=:</code> and <code>&gt;&gt;:</code> operations for indexed monads are defined in <a href="https://hackage.haskell.org/package/freer-indexed">freer-indexed</a> package - it also provides all other monadic operations similar to those defined in <code>Control.Monad</code>, but for indexed monads, e.g. <code>&gt;=&gt;:</code>, <code>xjoin</code> etc.</p>
<h2 id="dependent-types-for-real">Dependent types for real</h2>
<p>Onwards and upwards from here. Having all the necessary indexed monadic machinery in place, we can now get to the main issue at hand: how to make state changes expressed on the type level dependent on the data-level results of the previous actions - that is what dependent types are about.</p>
<p>As promised, the ATM example from the book by Edwin Brady will be implemented here in Haskell.</p>
<p>The possible state transitions of our ATM are shown on the diagram below - it is reproduced here from <a href="https://www.manning.com/books/type-driven-development-with-idris">the book</a> with the kind permission of the publisher, Manning Publications.</p>
<p><img src="/images/atm.png" alt="ATM state transitions (from Type driven development in Idris)" width="100%"></p>
<p>The main thing here is that we want to ensure, on the type level, that the money can be dispensed only if the correct PIN provided at the run time.</p>
<p>We will need to have the state of the ATM available both in types, and also at run-time, so we need to create singleton types for them:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="op">$</span>( singletons</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>     [d|</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>       data ATMState = Ready | CardInserted | Session</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>         deriving (Show)</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>       |]</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a> )</span></code></pre></div>
<p>This is a constraint type family for type-level check that the ATM has card in it:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">HasCard</span> (<span class="ot">s ::</span> <span class="dt">ATMState</span>)<span class="ot"> ::</span> <span class="dt">Constraint</span> <span class="kw">where</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">HasCard</span> <span class="dt">CardInserted</span> <span class="ot">=</span> ()</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">HasCard</span> <span class="dt">Session</span> <span class="ot">=</span> ()</span></code></pre></div>
<p>We will also need the types and singletons to define command result on which our state transition depends:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="op">$</span>( singletons</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>     [d|</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>       data PINCheck = CorrectPIN | WrongPIN</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>         deriving (Show)</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>       |]</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a> )</span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a><span class="op">$</span>( promoteOnly</span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>     [d|</span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>       pinCheckToState :: PINCheck -&gt; ATMState</span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>       pinCheckToState = \case</span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>         CorrectPIN -&gt; Session</span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>         WrongPIN -&gt; CardInserted</span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>       |]</span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a> )</span></code></pre></div>
<p><code>pinCheckToState</code> expresses the state transition dependency that we need - if the correct PIN is provided, the state can change to <code>Session</code> that allows dispensing money. But if the PIN is incorrect, the ATM will remain in <code>CardInserted</code> state and getting money from it will be prohibited on the type level.</p>
<p>Same as in the example in part 1, based on the function <code>pinCheckToState</code> singletons package creates type family and function on singletons.</p>
<p>Now we can define the type for all allowed ATM commands:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">PIN</span> <span class="ot">=</span> <span class="dt">String</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">ATMCommand</span> (<span class="ot">s ::</span> <span class="dt">ATMState</span>) (<span class="ot">s&#39; ::</span> <span class="dt">ATMState</span>)<span class="ot"> a ::</span> <span class="dt">Type</span> <span class="kw">where</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">InsertCard</span> <span class="ot">::</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">ATMCommand</span> <span class="dt">Ready</span> <span class="dt">CardInserted</span> ()</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>  <span class="dt">EjectCard</span> <span class="ot">::</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">HasCard</span> s <span class="ot">=&gt;</span> <span class="dt">ATMCommand</span> s <span class="dt">Ready</span> ()</span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>  <span class="dt">GetPIN</span> <span class="ot">::</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">ATMCommand</span> <span class="dt">CardInserted</span> <span class="dt">CardInserted</span> <span class="dt">PIN</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>  <span class="dt">CheckPIN</span> <span class="ot">::</span></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a>    <span class="dt">PIN</span> <span class="ot">-&gt;</span> <span class="dt">ATMCommand</span> <span class="dt">CardInserted</span> <span class="dt">CardInserted</span> <span class="dt">PINCheck</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>  <span class="dt">StartSession</span> <span class="ot">::</span></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>    <span class="dt">SPINCheck</span> p <span class="ot">-&gt;</span> <span class="dt">ATMCommand</span> <span class="dt">CardInserted</span> (<span class="dt">PinCheckToState</span> p) ()</span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a>  <span class="dt">GetAmount</span> <span class="ot">::</span></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a>    <span class="dt">HasCard</span> s <span class="ot">=&gt;</span> <span class="dt">ATMCommand</span> s s <span class="dt">Int</span></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Dispense</span> <span class="ot">::</span></span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">ATMCommand</span> <span class="dt">Session</span> <span class="dt">Session</span> ()</span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Message</span> <span class="ot">::</span></span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a>    <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">ATMCommand</span> s s ()</span></code></pre></div>
<p>You can check with the state transition diagram that this type correctly expresses all allowed state transitions. <code>StartSession</code> command final state depends on whether the PIN was correct.</p>
<p>Unlike the elevator code from part 1, we will not write ATM code with these constructors, as we did not define a constructor to bind these commands in a sequence. Instead we will use indexed free monad covered above to create our building blocks for the ATM program:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">ATMCmd</span> <span class="ot">=</span> <span class="dt">XFree</span> <span class="dt">ATMCommand</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="ot">insertCard ::</span> <span class="dt">ATMCmd</span> <span class="dt">Ready</span> <span class="dt">CardInserted</span> ()</span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>insertCard <span class="ot">=</span> xfree <span class="dt">InsertCard</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a><span class="ot">ejectCard ::</span> <span class="dt">HasCard</span> s <span class="ot">=&gt;</span> <span class="dt">ATMCmd</span> s <span class="dt">Ready</span> ()</span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>ejectCard <span class="ot">=</span> xfree <span class="dt">EjectCard</span></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a><span class="ot">getPIN ::</span> <span class="dt">ATMCmd</span> <span class="dt">CardInserted</span> <span class="dt">CardInserted</span> <span class="dt">PIN</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a>getPIN <span class="ot">=</span> xfree <span class="dt">GetPIN</span></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a><span class="ot">checkPIN ::</span> <span class="dt">PIN</span> <span class="ot">-&gt;</span> <span class="dt">ATMCmd</span> <span class="dt">CardInserted</span> <span class="dt">CardInserted</span> <span class="dt">PINCheck</span></span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a>checkPIN <span class="ot">=</span> xfree <span class="op">.</span> <span class="dt">CheckPIN</span></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a><span class="ot">startSession ::</span> <span class="dt">SPINCheck</span> p <span class="ot">-&gt;</span> <span class="dt">ATMCmd</span> <span class="dt">CardInserted</span> (<span class="dt">PinCheckToState</span> p) ()</span>
<span id="cb12-16"><a href="#cb12-16" aria-hidden="true" tabindex="-1"></a>startSession <span class="ot">=</span> xfree <span class="op">.</span> <span class="dt">StartSession</span></span>
<span id="cb12-17"><a href="#cb12-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-18"><a href="#cb12-18" aria-hidden="true" tabindex="-1"></a><span class="ot">getAmount ::</span> <span class="dt">HasCard</span> s <span class="ot">=&gt;</span> <span class="dt">ATMCmd</span> s s <span class="dt">Int</span></span>
<span id="cb12-19"><a href="#cb12-19" aria-hidden="true" tabindex="-1"></a>getAmount <span class="ot">=</span> xfree <span class="dt">GetAmount</span></span>
<span id="cb12-20"><a href="#cb12-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-21"><a href="#cb12-21" aria-hidden="true" tabindex="-1"></a><span class="ot">dispense ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">ATMCmd</span> <span class="dt">Session</span> <span class="dt">Session</span> ()</span>
<span id="cb12-22"><a href="#cb12-22" aria-hidden="true" tabindex="-1"></a>dispense <span class="ot">=</span> xfree <span class="op">.</span> <span class="dt">Dispense</span></span>
<span id="cb12-23"><a href="#cb12-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-24"><a href="#cb12-24" aria-hidden="true" tabindex="-1"></a><span class="ot">message ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">ATMCmd</span> s s ()</span>
<span id="cb12-25"><a href="#cb12-25" aria-hidden="true" tabindex="-1"></a>message <span class="ot">=</span> xfree <span class="op">.</span> <span class="dt">Message</span></span></code></pre></div>
<p>That’s a bit of the boilerplate - you would have to do the same with any algebraic effect system (or use template haskell in case of <a href="https://hackage.haskell.org/package/polysemy">polysemy</a>).</p>
<p>Now, using <code>RebindableSyntax</code>, we can write code using <code>do</code>.</p>
<pre class="haskell-ignore"><code>atm :: ATMCmd Ready Ready ()
atm = do
  insertCard
  message &quot;Hello&quot;
  pin &lt;- getPIN
  pinOK &lt;- checkPIN pin
  case pinOK of
    FromSing ok -&gt; do
      startSession ok
      case ok of
        SCorrectPIN -&gt; do
          amount &lt;- getAmount
          dispense amount -- this command would fail to compile in SWrongPIN branch
          ejectCard
          message &quot;Remove card and cash&quot;
        SWrongPIN -&gt; do
          message &quot;Incorrect PIN&quot;
          ejectCard</code></pre>
<p>Compare how similar the <a href="https://github.com/edwinb/TypeDD-Samples/blob/master/Chapter14/ATM.idr#L69">Idris code</a> from the book is to Haskell code we just wrote. Even though emulating dependent types requires some workarounds in Haskell, the ergonomics are quite decent.</p>
<p>What we have above is a data structure yet to be interpreted, but it very much looks like code. The type-level state transitions depend on whether the PIN is correct, and if you try to trick our ATM into giving you 100 without a valid PIN by adding <code>dispense 100</code> into the <code>SWrongPIN</code> branch, the code will not compile - exactly as we wanted.</p>
<p>The main difference with Idris code is that in Haskell the transition between PIN check result on the data level (<code>pinOK</code>) and the type level (<code>ok</code>) has to be explicit with <code>FromSing</code> pattern, and we needed a separate command <code>startSession</code> to change type-level state based on PIN check.</p>
<p>The above is not the actual code that runs if you execute this post - it is used in <a href="https://github.com/epoberezkin/atm-state-machine">atm-state-machine</a> repo. As I wrote, <code>RebindableSyntax</code> does not allow combining indexed and normal monads in the same file, and we need an interpreter that uses IO monad to execute this code.</p>
<p>Fear not, the code above can be re-written without <code>do</code> - it even looks almost like code:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="ot">atm&#39; ::</span> <span class="dt">ATMCmd</span> <span class="dt">Ready</span> <span class="dt">Ready</span> ()</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>atm&#39; <span class="ot">=</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>  insertCard</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">&gt;&gt;:</span> message <span class="st">&quot;Hello&quot;</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">&gt;&gt;:</span> getPIN</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">&gt;&gt;=:</span> checkPIN</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">&gt;&gt;=:</span> \(<span class="dt">FromSing</span> ok) <span class="ot">-&gt;</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>      startSession ok</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>        <span class="op">&gt;&gt;:</span> <span class="kw">case</span> ok <span class="kw">of</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>          <span class="dt">SCorrectPIN</span> <span class="ot">-&gt;</span></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>            getAmount</span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>              <span class="op">&gt;&gt;=:</span> dispense</span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a>              <span class="op">&gt;&gt;:</span> ejectCard</span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a>              <span class="op">&gt;&gt;:</span> message <span class="st">&quot;Remove card and cash&quot;</span></span>
<span id="cb14-15"><a href="#cb14-15" aria-hidden="true" tabindex="-1"></a>          <span class="dt">SWrongPIN</span> <span class="ot">-&gt;</span></span>
<span id="cb14-16"><a href="#cb14-16" aria-hidden="true" tabindex="-1"></a>            message <span class="st">&quot;Incorrect PIN&quot;</span></span>
<span id="cb14-17"><a href="#cb14-17" aria-hidden="true" tabindex="-1"></a>              <span class="op">&gt;&gt;:</span> ejectCard</span></code></pre></div>
<p>To execute our ATM program we need to interpret it. We will make a console demo, but it could have been connected to the real ATM:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="ot">runATMCmd ::</span> <span class="dt">ATMCommand</span> s s&#39; a <span class="ot">-&gt;</span> <span class="dt">IO</span> a</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>runATMCmd <span class="dt">InsertCard</span> <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>  <span class="fu">putStrLn</span> <span class="st">&quot;Insert card (press enter)&quot;</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>  void <span class="fu">getLine</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>runATMCmd <span class="dt">EjectCard</span> <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="st">&quot;Card ejected&quot;</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>runATMCmd <span class="dt">GetPIN</span> <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>  <span class="fu">putStrLn</span> <span class="st">&quot;Enter pin:&quot;</span></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a>  <span class="fu">getLine</span></span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a>runATMCmd (<span class="dt">CheckPIN</span> pin) <span class="ot">=</span></span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a>  <span class="kw">if</span> pin <span class="op">==</span> <span class="st">&quot;1234&quot;</span></span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">then</span> <span class="fu">return</span> <span class="dt">CorrectPIN</span></span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true" tabindex="-1"></a>    <span class="kw">else</span> <span class="fu">return</span> <span class="dt">WrongPIN</span></span>
<span id="cb15-13"><a href="#cb15-13" aria-hidden="true" tabindex="-1"></a>runATMCmd (<span class="dt">StartSession</span> _) <span class="ot">=</span> <span class="fu">return</span> ()</span>
<span id="cb15-14"><a href="#cb15-14" aria-hidden="true" tabindex="-1"></a>runATMCmd <span class="dt">GetAmount</span> <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb15-15"><a href="#cb15-15" aria-hidden="true" tabindex="-1"></a>  <span class="fu">putStrLn</span> <span class="st">&quot;Enter amount:&quot;</span></span>
<span id="cb15-16"><a href="#cb15-16" aria-hidden="true" tabindex="-1"></a>  <span class="fu">read</span> <span class="op">&lt;$&gt;</span><span class="ot"> getLine ::</span> <span class="dt">IO</span> <span class="dt">Int</span></span>
<span id="cb15-17"><a href="#cb15-17" aria-hidden="true" tabindex="-1"></a>runATMCmd (<span class="dt">Dispense</span> cash) <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="op">$</span> <span class="st">&quot;Here is &quot;</span> <span class="op">++</span> <span class="fu">show</span> cash</span>
<span id="cb15-18"><a href="#cb15-18" aria-hidden="true" tabindex="-1"></a>runATMCmd (<span class="dt">Message</span> msg) <span class="ot">=</span> <span class="fu">putStrLn</span> msg</span></code></pre></div>
<p>Note how <code>StartSession</code> does nothing here - but it ensures correct type-level state transition.</p>
<p>This interpreter only knows how to execute individual commands, but we also need the interpreter to execute ATM program - for that we need to interpret <code>Pure</code> and <code>Bind</code> constructors of <code>XFree</code>:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="ot">runATM ::</span> <span class="dt">ATMCmd</span> s s&#39; a <span class="ot">-&gt;</span> <span class="dt">IO</span> a</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>runATM (<span class="dt">Pure</span> x) <span class="ot">=</span> <span class="fu">return</span> x</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>runATM (<span class="dt">Bind</span> c f) <span class="ot">=</span> runATMCmd c <span class="op">&gt;&gt;=</span> \x <span class="ot">-&gt;</span> runATM (f x)</span></code></pre></div>
<h2 id="lets-run-it">Let’s run it!</h2>
<p>The code to run our ATM program is very simple:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> runATM <span class="op">$</span> forever atm&#39;</span></code></pre></div>
<p>Why were we able to use <code>forever</code> from <code>Control.Monad</code> with our ATM program? Isn’t <code>atm'</code> an indexed monad, and <code>forever</code> is defined for normal monads?</p>
<p>The reason we could do so is because <code>freer-indexed</code> defines <code>Applicative</code> and <code>Monad</code> instances for indexed free monads with the same initial and final states. So even though our ATM program uses indexed monads internally, it can be embedded into normal monads.</p>
<p>This is quite important - dependent types and indexed monads are not all or nothing proposition. You can use indexed monads only for some small critical part of your code where you want additional type-level safety, and use normal monads in the rest of your code.</p>
<p>This is it! You can run the code right from this post by cloning the <a href="https://github.com/epoberezkin/poberezkin.com">site repo</a> and executing <code>stack run atm</code>. The source code without the text is available in <a href="https://github.com/epoberezkin/atm-state-machine">atm-state-machine</a>.</p>
<h2 id="unsolved-problems">Unsolved problems</h2>
<ol type="1">
<li>It was a bit annoying to write two interpreters where we should have only needed one. Interpreting ATM commands we created ourselves is fine, but interpreting <code>XFree</code> constructors that we have only seen once, could be better done in the library. A good exercise would be to write a generic interpreter to have any command executed in any monad, not only <code>IO</code>. It would accept <code>runATMCmd</code> as a parameter, but writing its type is a good challenge in itself. So, if we had this function, we could get our runATM interpreter in this way:</li>
</ol>
<pre><code>runATM :: ATMCmd s s&#39; a -&gt; IO a
runATM = runXFree runATMCmd</code></pre>
<p>It would be great to add <code>runXFree</code> function to <a href="https://hackage.haskell.org/package/freer-indexed">freer-indexed</a>.</p>
<ol start="2" type="1">
<li>While what we did here is very similar to algebraic effect systems generalized to indexed effects, the huge difference is that our ATM effect is not composable. If we only needed to track one resource state on the type level, or the resources were independent, we could get away with it - their logic can be written separately and embedded into normal monads or effects as we did with <code>forever atm'</code>.</li>
</ol>
<p>But real life is rarely that simple - what starts as separated often becomes interconnected later.</p>
<p>Generalizing <a href="https://hackage.haskell.org/package/freer-simple">freer-simple</a> effects to indexed monads would be an interesting project - so far I got stuck with it in the branch of <a href="https://github.com/epoberezkin/freer-indexed/tree/effects/src">freer-indexed</a>.</p>
<h2 id="whats-next">What’s next?</h2>
<p>A generalization of this approach can be used to model distributed state transitions with multiple system participants, each having their own view on the system state.</p>
<p>A non-trivial problem is to define an interaction / communication protocol on the type level in such a way that it can be used to write both protocol scenarios with all participants involved and also separate implementations for participants in a type-safe way, using the same protocol type.</p>
<p>Solving the problem of modelling distributed state transitions might be part 3 some day.</p>
  </section>
  <section class="links">
    <a href="https://www.reddit.com/r/haskell/comments/imefh1/dependent_types_to_code_are_what_static_types_to/" target="_blank"><img src="/images/reddit.png"></a>
    <a href="https://twitter.com/intent/tweet?via=epoberezkin&text=Dependent%20types%20to%20code%20are%20what%20static%20types%20to%20data&hashtags=haskell%2Cexecutable%2Ccoding&original_referer=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2020-09-04-dependent-types-to-code-are-what-static-types-to-data.html&url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2020-09-04-dependent-types-to-code-are-what-static-types-to-data.html" target="_blank"><img src="/images/tweet.png"></a>
    
      <a href="https://github.com/epoberezkin/atm-state-machine" target="_blank"><img src="/images/repo.png"></a>
    
  </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Ajv JSON Schema validator: Mozilla MOSS grant and OpenJS Foundation</title>
    <link href="https://www.poberezkin.com/posts/2020-08-14-ajv-json-validator-mozilla-open-source-grant-openjs-foundation.html" />
    <id>https://www.poberezkin.com/posts/2020-08-14-ajv-json-validator-mozilla-open-source-grant-openjs-foundation.html</id>
    <published>2020-08-14T00:00:00Z</published>
    <updated>2020-08-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <section class="header">
    <div class="info">
      Posted on
      
        August 14, 2020
      
      
        by Evgeny Poberezkin
      
    </div>
    <div class="info">
      
        Tags: <a title="All pages tagged &#39;open-source&#39;." href="/tags/open-source.html" rel="tag">open-source</a>, <a title="All pages tagged &#39;javascript&#39;." href="/tags/javascript.html" rel="tag">javascript</a>, <a title="All pages tagged &#39;json-schema&#39;." href="/tags/json-schema.html" rel="tag">json-schema</a>, <a title="All pages tagged &#39;coding&#39;." href="/tags/coding.html" rel="tag">coding</a>, <a title="All pages tagged &#39;ajv&#39;." href="/tags/ajv.html" rel="tag">ajv</a>
      
    </div>
  </section>
  <section>
    <p><a href="https://www.mozilla.org/en-US/moss/"><img src="/images/mozilla.svg" alt="Mozilla" width="33.3%" style="min-width: 165px; float: right; margin: 0 0 5% 5%;"></a></p>
<p><a href="https://openjsf.org/"><img src="/images/openjs.png" width="30%" style="min-width: 150px; clear:right; float: right; margin: 0 1.65% 5% 5%;"></a></p>
<p><a href="https://github.com/ajv-validator/ajv"><img src="/images/ajv.svg" width="20%" style="min-width: 100px; clear:right; float: right; margin: 0 1.65% 2.5% 5%;"></a></p>
<p>I am really excited to share this news: <a href="https://github.com/ajv-validator/ajv">Ajv</a> has been awarded a grant from Mozilla’s <a href="https://www.mozilla.org/en-US/moss/">Open Source Support (MOSS) program</a> in the “Foundational Technology” track and it joined the <a href="https://openjsf.org">OpenJS Foundation</a>!</p>
<h2 id="what-is-ajv">What is Ajv?</h2>
<p>Ajv is a JavaScript open-source library for data validation using <a href="https://json-schema.org/">JSON Schema standard</a>.</p>
<p>I started developing Ajv 5 years ago, because all validators I’ve tested failed some of the tests I had. At the time I thought that JSON Schema is a relatively simple standard and it should not take more than 3-4 weekends to make a working library. It took 4 months of weekends and evenings, outside of work, and it took another year to stabilize and to fix bugs.</p>
<p>Without the help from contributors and users, Ajv would had never become as widely used as it is – I am very grateful to <a href="https://github.com/ajv-validator/ajv/graphs/contributors">almost 100 contributors</a> who helped shape Ajv over 5 years.</p>
<h2 id="why-grant-from-mozilla">Why grant from Mozilla?</h2>
<p>Ajv started when JSON Schema standard was at version 4, it now supports version 7. The current version of JSON Schema (version 8 – draft 2019-09) introduced 2 substantial validation paradigm changes. The additional features increased implementation complexity – to consistently implement these features in Ajv will require substantial re-write. Also, a new promising standard for JSON validation appeared – <a href="https://tools.ietf.org/html/draft-ucarion-json-type-definition-04">JSON Type Definition</a> (JTD).</p>
<p>Ajv users are interested in the support of the latest JSON version, but it was not sustainable for me to implement it in my free time – it is a large amount of work, particularly given how important it is to allow all existing users to migrate without disruption. Support from the users via OpenCollective and GitHub sponsors has confirmed that Ajv needs to be developed further, so I’ve also applied to Mozilla Open Source Support fund. I am very happy that Mozilla awarded the grant.</p>
<h2 id="openjs-foundation">OpenJS Foundation</h2>
<p>OpenJS Foundation supports many critical JavaScript open-source projects with both infrastructure and organization. As Ajv became a part of millions of web applications, having this support will ensure the longevity and stability of Ajv for all users.</p>
<p>Working with OpenJS foundation will also help better align Ajv with the JavaScript ecosystem and to grow the number of contributors, and may help with wider enterprise adoption through greater confidence in the project.</p>
<p>There is more information, and many supportive words from OpenJS Foundation in <a href="https://openjsf.org/blog/2020/08/14/ajv-joins-openjs-foundation-as-an-incubation-project/">the announcement</a>.</p>
<h2 id="what-is-next">What is next?</h2>
<p>I’ve already started working on the next major version of Ajv. The plan is to support both the last version of JSON Schema and JTD in Ajv, so that the users can choose the standard that works best for them – and the users will be able to package only the functionality they actually use.</p>
<p>I am looking for the long-term maintainers joining me to share the ownership of Ajv – please reach out if you are interested! I am working with <a href="https://www.thereadyset.co/">ReadySet</a>, also sponsored by Mozilla, to establish guidelines for the role of a “maintainer” and the contribution standards, to adjust our code of conduct to fit our users and contributors community better, and to encourage a wider, more inclusive, contribution from the community.</p>
<p>We believe that it will lower the barrier for the new contributors and maintainers, for all experience levels, and will make expectations clear - how long it usually takes to review and to decide whether the change is necessary, and what are the requirements.</p>
<p>I am looking forward to the next phase of Ajv development that is possible thanks to Mozilla.</p>
  </section>
  <section class="links">
    <a href="https://www.reddit.com/r/javascript/comments/i9oq86/ajv_json_schema_validator_mozilla_moss_grant_and/" target="_blank"><img src="/images/reddit.png"></a>
    <a href="https://twitter.com/intent/tweet?via=epoberezkin&text=Ajv%20JSON%20Schema%20validator%3A%20Mozilla%20MOSS%20grant%20and%20OpenJS%20Foundation&hashtags=open-source%2Cjavascript%2Cjson-schema%2Ccoding%2Cajv&original_referer=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2020-08-14-ajv-json-validator-mozilla-open-source-grant-openjs-foundation.html&url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2020-08-14-ajv-json-validator-mozilla-open-source-grant-openjs-foundation.html" target="_blank"><img src="/images/tweet.png"></a>
    
      <a href="https://github.com/ajv-validator/ajv" target="_blank"><img src="/images/repo.png"></a>
    
  </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Modeling state machines with dependent types in Haskell: Part 1</title>
    <link href="https://www.poberezkin.com/posts/2020-06-29-modeling-state-machine-dependent-types-haskell-1.html" />
    <id>https://www.poberezkin.com/posts/2020-06-29-modeling-state-machine-dependent-types-haskell-1.html</id>
    <published>2020-06-29T00:00:00Z</published>
    <updated>2020-06-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <section class="header">
    <div class="info">
      Posted on
      
        June 29, 2020
      
      
        by Evgeny Poberezkin
      
    </div>
    <div class="info">
      
        Tags: <a title="All pages tagged &#39;haskell&#39;." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged &#39;executable&#39;." href="/tags/executable.html" rel="tag">executable</a>, <a title="All pages tagged &#39;coding&#39;." href="/tags/coding.html" rel="tag">coding</a>
      
    </div>
  </section>
  <section>
    <p>This post is “literate” haskell (thanks to <a href="https://github.com/sol/markdown-unlit">markdown-unlit</a>), it can be run using GHC 8.8.3 with <code>stack run elevator</code>.</p>
<h2 id="why">Why?</h2>
<p>The reason to use types to model state transitions is to guarantee the correctness of <a href="https://en.wikipedia.org/wiki/Finite-state_machine">state machine</a> implementation by the way it is constructed, so that invalid implementations fail to compile.</p>
<p>When we model a state machine we usually create some diagram or use some meta-language to show allowed state transitions. The code implementing the logic of the state machine is disconnected from this diagram, and it can be large enough to make it impossible or very difficult to validate that the implementation only supports allowed state transitions.</p>
<p>We could use some DSL or library to raise the level of abstraction so that allowed state transitions are more visible in code. It mitigates the problem, but it creates additional complexity and dependency on the component (DSL interpreter or state-machine library) that also can have implementation mistakes.</p>
<p>Modeling state transition in types offers a simple alternative to ensure that only allowed state transitions can be implemented - the code that attempts to perform the state transition that is not allowed will not compile.</p>
<h2 id="how">How?</h2>
<p>Using parametrized types it is possible to express state machine transitions where state can be part of the transition type. Further, using <a href="https://en.wikipedia.org/wiki/Dependent_type">dependent types</a> it is possible to make transitions depend on some run time states. Haskell does not support dependent types directly, but it is possible to have an equivalent of dependent types with singleton types and <a href="https://hackage.haskell.org/package/singletons">singletons</a> - see <a href="2020-05-17-using-dependent-types-haskell-singletons.html">this post</a>.</p>
<h2 id="modeling-elevator-aka-lift-states">Modeling elevator (aka lift) states</h2>
<p>We will model state transition of a simplified <a href="https://en.wikipedia.org/wiki/Elevator">elevator</a> state changes.</p>
<p>The state of the elevator has 3 dimensions: its door can be opened or closed, it can be stopped or going up or down, and it can be on different floors. Not all combinations are allowed though - the elevator must not move with the opened door and it must not open the door while moving. Elevator states and allowed actions and states are shown on the diagram.</p>
<p><a href="https://github.com/epoberezkin/poberezkin.com/tree/master/dot/elevator.gv"><img src="/images/elevator.svg" title="source" alt="Elevator states" /></a></p>
<p>In addition to that elevator cannot go below than the ground floor (type-level natural number <code>0</code> will be used for it).</p>
<p>To have the state of the elevator available both in types, and also at run-time we will use singletons library and we will need to enable some GHC extensions:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE ConstraintKinds, DataKinds, DeriveAnyClass, EmptyCase,</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  FlexibleContexts, FlexibleInstances, FunctionalDependencies, GADTs,</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="ot">  InstanceSigs, LambdaCase, PartialTypeSignatures, PolyKinds, RankNTypes,</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="ot">  ScopedTypeVariables, StandaloneDeriving, TemplateHaskell,</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="ot">  TypeApplications, TypeFamilies, TypeOperators, UndecidableInstances #-}</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# OPTIONS_GHC -Werror=incomplete-patterns #-}</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# OPTIONS_GHC -fno-warn-unticked-promoted-constructors #-}</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Kind</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Singletons</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Singletons.Prelude</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Singletons.TH</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Singletons.TypeLits</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">System.IO</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">System.IO.Interact</span></span></code></pre></div>
<p>We will define the state of the elevator door and movement in types, and also create singleton types for them:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="op">$</span>(singletons [d|</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  data DoorState = Opened | Closed</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    deriving (Show, Read, Eq)</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>  data MoveState = Stopped | Up | Down</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    deriving (Show, Read, Eq)</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>  |])</span></code></pre></div>
<p><a href="2020-05-17-using-dependent-types-haskell-singletons.html">This post</a> shows what singletons library does when you wrap type definitions like that. If you did not use singletons before, you can read an <a href="https://blog.jle.im/entry/introduction-to-singletons-1.html">introduction to singletons library</a> by Justin Le.</p>
<p>We also need to define dependent state changes both in types and at run-time. For that we will need type families and functions on singletons that can also be created with singletons library:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="op">$</span>(singletonsOnly [d|</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  nextFloor :: MoveState -&gt; Nat -&gt; Nat</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  nextFloor Stopped f = f</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  nextFloor Up f = f + 1</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>  nextFloor Down f =</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    if f &gt; 0</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>      then f - 1</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>      else 0</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>  nextMoveState :: MoveState -&gt; Nat -&gt; MoveState</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>  nextMoveState Stopped _ = Stopped</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>  nextMoveState Up _ = Up</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>  nextMoveState Down f =</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>    if f &lt;= 1</span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>      then Stopped</span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>      else Down</span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>  |])</span></code></pre></div>
<p>The two functions above define that the floor should increase when the elevator is going up, and decrease when it is going down, but not below <code>0</code> (<code>nextFloor</code>) and that when the elevator reaches the ground floor it should stop (<code>nextMoveState</code>).</p>
<p>Singletons library generates code that adds type families <code>NextFloor</code> and <code>NextMoveState</code> to the above declaration and equivalent functions on singletons (<code>sNextFloor</code> and <code>sNextMoveState</code>). They are defined similarly to the below (but you do not need to add this code - it is added automatically):</p>
<pre class="haskell-ignore"><code>type family NextFloor (m :: MoveState) (f :: Nat) :: Nat where
  NextFloor Stopped f = f
  NextFloor Up f = f + 1
  NextFloor Down f =
    If (f &gt; 1) (f - 1) 0

sNextMoveState ::
  Sing (m :: MoveState) -&gt; Sing (f :: Nat) -&gt; Sing (NextFloor m f)</code></pre>
<p>etc. The actual generated code is a bit more complex.</p>
<p>Now we can define the type for allowed elevator actions:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">infixr</span> <span class="dv">2</span> <span class="op">:&gt;&gt;</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Elevator</span> <span class="ot">=</span> (<span class="dt">DoorState</span>, <span class="dt">MoveState</span>, <span class="dt">Nat</span>)</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">Moving</span> (<span class="ot">m ::</span> <span class="dt">MoveState</span>)<span class="ot"> ::</span> <span class="dt">Constraint</span> <span class="kw">where</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Moving</span> <span class="dt">Up</span> <span class="ot">=</span> ()</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Moving</span> <span class="dt">Down</span> <span class="ot">=</span> ()</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Action</span> (<span class="ot">s ::</span> <span class="dt">Elevator</span>) (<span class="ot">s&#39; ::</span> <span class="dt">Elevator</span>)<span class="ot"> ::</span> <span class="dt">Type</span> <span class="kw">where</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Open</span> <span class="ot">::</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Action</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>      &#39;(<span class="dt">Closed</span>, <span class="dt">Stopped</span>, f)</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>      &#39;(<span class="dt">Opened</span>, <span class="dt">Stopped</span>, f)</span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Close</span> <span class="ot">::</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Action</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>      &#39;(<span class="dt">Opened</span>, <span class="dt">Stopped</span>, f)</span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>      &#39;(<span class="dt">Closed</span>, <span class="dt">Stopped</span>, f)</span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Move</span> <span class="ot">::</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Moving</span> m <span class="ot">=&gt;</span></span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Sing</span> (<span class="ot">m ::</span> <span class="dt">MoveState</span>) <span class="ot">-&gt;</span></span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Action</span></span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a>      &#39;(<span class="dt">Closed</span>, <span class="dt">Stopped</span>, f)</span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>      &#39;(<span class="dt">Closed</span>, <span class="dt">NextMoveState</span> m f, <span class="dt">NextFloor</span> m f)</span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Stop</span> <span class="ot">::</span></span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Action</span></span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a>      &#39;(<span class="dt">Closed</span>, m, f)</span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a>      &#39;(<span class="dt">Closed</span>, <span class="dt">Stopped</span>, f)</span>
<span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Wait</span> <span class="ot">::</span></span>
<span id="cb5-29"><a href="#cb5-29" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Action</span></span>
<span id="cb5-30"><a href="#cb5-30" aria-hidden="true" tabindex="-1"></a>      &#39;(d, m, f)</span>
<span id="cb5-31"><a href="#cb5-31" aria-hidden="true" tabindex="-1"></a>      &#39;(d, <span class="dt">NextMoveState</span> m f, <span class="dt">NextFloor</span> m f)</span>
<span id="cb5-32"><a href="#cb5-32" aria-hidden="true" tabindex="-1"></a><span class="ot">  (:&gt;&gt;) ::</span> <span class="dt">Action</span> s1 s2 <span class="ot">-&gt;</span> <span class="dt">Action</span> s2 s3 <span class="ot">-&gt;</span> <span class="dt">Action</span> s1 s3</span></code></pre></div>
<p><code>Action</code> type is defined as generalized algebraic data type and it includes elevator state before and after the action as type-level tuples.
Another alternative would be to parametrize <code>Action</code> on 6 separate parameters, but it would be more difficult to manage.</p>
<p><code>Move</code> constructor takes parameter that should be <code>SUp</code> or <code>SDown</code> (singletons for <code>Up</code> and <code>Down</code>) and type family <code>Moving</code> ensures that <code>SStoped</code> cannot be used here.</p>
<p>As actions can only be created using one of the available constructors, only allowed actions can be created. For example, the door can only be opened if it is closed and if the elevator is stopped. And the elevator can only start moving only if the door is closed.</p>
<p><code>Wait</code> action lets the elevator to go up and down, and it will also stop the elevator when it reaches the ground floor.</p>
<p><code>:&gt;&gt;</code> constructor allows to sequence actions, but only in such way that the final state of the first action is the same as the initial state of the second action. It also defines that the resulting compound action starts from the initial state of the first action and ends with the final state of the second action, in this way ensuring the continuity of state transitions.</p>
<p>With this type definition we expressed the original requirements in types without any executable code. The code using these types will not need tests to ensure the validity of state transitions, because we can only create allowed actions and we can only chain actions in a way that state changes are sequential, otherwise the code will not compile.</p>
<p>We can create a small “program” for the elevator to perform a sequence of actions:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">ElevatorProgram</span> f f&#39; <span class="ot">=</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Action</span> &#39;(<span class="dt">Opened</span>, <span class="dt">Stopped</span>, f) &#39;(<span class="dt">Opened</span>, <span class="dt">Stopped</span>, f&#39;)</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="ot">program ::</span> <span class="dt">ElevatorProgram</span> <span class="dv">0</span> <span class="dv">0</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>program <span class="ot">=</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Close</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>  <span class="op">:&gt;&gt;</span> <span class="dt">Move</span> <span class="dt">SUp</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>  <span class="op">:&gt;&gt;</span> <span class="dt">Wait</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">:&gt;&gt;</span> <span class="dt">Wait</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>  <span class="op">:&gt;&gt;</span> <span class="dt">Stop</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>  <span class="op">:&gt;&gt;</span> <span class="dt">Open</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>  <span class="op">:&gt;&gt;</span> <span class="dt">Close</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>  <span class="op">:&gt;&gt;</span> <span class="dt">Move</span> <span class="dt">SDown</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>  <span class="op">:&gt;&gt;</span> <span class="dt">Wait</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>  <span class="op">:&gt;&gt;</span> <span class="dt">Wait</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>  <span class="op">:&gt;&gt;</span> <span class="dt">Stop</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a>  <span class="op">:&gt;&gt;</span> <span class="dt">Open</span></span></code></pre></div>
<p>This sequence of actions has type <code>Action '(Opened, Stopped, 0) '(Opened, Stopped, 0)</code> - the elevator starts and ends on the ground floor, with the opened door and stopped. If you try to write a program that performs the sequence of actions that is not allowed, it will not compile:</p>
<pre class="haskell-ignore"><code>badElevator :: ElevatorProgram 0 1
badElevator =
  Close
  :&gt;&gt; Move SUp
  -- Stop
  :&gt;&gt; Open</code></pre>
<p>The error message will be:</p>
<pre><code>    • Couldn&#39;t match type ‘&#39;Up’ with ‘&#39;Stopped’
      Expected type: Action
                       &#39;( &#39;Closed, &#39;Stopped, 0) &#39;( &#39;Closed, &#39;Stopped, 1)
        Actual type: Action
                       &#39;( &#39;Closed, &#39;Stopped, 0)
                       &#39;( &#39;Closed, NextMoveState &#39;Up 0, NextFloor &#39;Up 0)
    • In the first argument of ‘(:&gt;&gt;)’, namely ‘Move SUp’
      In the second argument of ‘(:&gt;&gt;)’, namely ‘Move SUp :&gt;&gt; Open’
      In the expression: Close :&gt;&gt; Move SUp :&gt;&gt; Open
    |
... |     :&gt;&gt; Move SUp</code></pre>
<p>It almost literally says that “to open door, the elevator must be stopped, it cannot be moving up”! So the correctness of state transitions is ensured by the way the type is defined.</p>
<p>To “fix” the program you just need to add <code>Stop</code> before <code>Open</code>.</p>
<h2 id="whats-the-point">What’s the point?</h2>
<p>We have the program, but what can we do with it? It is not code, so we cannot just run it.</p>
<p>We can interpret this program in different contexts - for that we need to write interpreter. For example, one of the interpreters can be just printing this program to console:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ot">printElevator ::</span> <span class="dt">Action</span> s s&#39; <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>printElevator <span class="dt">Open</span> <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="st">&quot;open&quot;</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>printElevator <span class="dt">Close</span> <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="st">&quot;close&quot;</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>printElevator (<span class="dt">Move</span> m) <span class="ot">=</span> <span class="kw">case</span> m <span class="kw">of</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>  <span class="dt">SUp</span> <span class="ot">-&gt;</span> <span class="fu">putStrLn</span> <span class="st">&quot;up&quot;</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  _ <span class="ot">-&gt;</span> <span class="fu">putStrLn</span> <span class="st">&quot;down&quot;</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>printElevator <span class="dt">Stop</span> <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="st">&quot;stop&quot;</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>printElevator <span class="dt">Wait</span> <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="st">&quot;wait&quot;</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>printElevator (a <span class="op">:&gt;&gt;</span> prog) <span class="ot">=</span> printElevator a <span class="op">&gt;&gt;</span> printElevator prog</span></code></pre></div>
<p>The same approach can be used in real code - there could be an interpreter to control the real elevator. But it is now safe, as by defining allowed operations on the type level we ensured that we cannot perform unsafe actions - opening the door while the elevator is moving, or starting to move without closing the door.</p>
<h2 id="how-to-make-it-interactive">How to make it interactive?</h2>
<p>In some situations this can be useful and real programs can be written in this way - we achieved the possibility to restrict allowed operations in type system.</p>
<p>But how can we make this elevator interactive, so it can respond to the passengers’ commands? These commands are just data, so we need a way to move between data and types.</p>
<p>We will use singletons for the elevator state - they have type <code>Sing (s :: Elevator)</code>. We defined <code>Elevator</code> as a type synonym for the tuple of type <code>(DoorState, MoveState, Nat)</code> and we do not need anything special to use singletons for this type - as we have created singletons for our types <code>DoorState</code> and <code>MoveState</code>, singletons library defines singletons for all standard derived types, including tuples.</p>
<p>Because we want to create elevator actions at run time, from passenger commands, we will also need the existential wrapper for the typed action:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">SomeAction</span> <span class="kw">where</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">SomeAction</span><span class="ot"> ::</span> <span class="dt">Action</span> s s&#39; <span class="ot">-&gt;</span> <span class="dt">Sing</span> s <span class="ot">-&gt;</span> <span class="dt">Sing</span> s&#39; <span class="ot">-&gt;</span> <span class="dt">SomeAction</span></span></code></pre></div>
<p>The action constructor includes the action itself and its initial and final states, so we can pattern match on them.</p>
<p>Now if we have the initial state and the action, we can both check that the action is compatible with it and get its final state:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ot">finalState ::</span> <span class="dt">SomeSing</span> <span class="dt">Elevator</span> <span class="ot">-&gt;</span> <span class="dt">SomeAction</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (<span class="dt">SomeSing</span> <span class="dt">Elevator</span>)</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>finalState (<span class="dt">SomeSing</span> s1) (<span class="dt">SomeAction</span> _ s1&#39; s2) <span class="ot">=</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">case</span> s1 <span class="op">%~</span> s1&#39; <span class="kw">of</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Proved</span> <span class="dt">Refl</span> <span class="ot">-&gt;</span> <span class="dt">Just</span> (<span class="dt">SomeSing</span> s2)</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>    _ <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span></code></pre></div>
<p><code>%~</code> compares types of singletons <code>s1</code> and <code>s1'</code> and returns <code>Proved Refl</code> if they are the same. In this case we could have also converted both singletons to their base types and compare using <code>fromSing s1 == fromSing s1'</code> but it will not work in the contexts where type equality should be established, and not only value equality.</p>
<p>The following function creates the elevator action from the passenger’s commands. We also need to pass the initial state, both to make sure that the action is allowed and also to create actions with specific types, as all constructors are polymorphic:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="ot">actionFromString ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">SomeSing</span> <span class="dt">Elevator</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">SomeAction</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>actionFromString name (<span class="dt">SomeSing</span> st) <span class="ot">=</span> action name st</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="ot">    act ::</span> <span class="dt">Action</span> s s&#39; <span class="ot">-&gt;</span> <span class="dt">Sing</span> s <span class="ot">-&gt;</span> <span class="dt">Sing</span> s&#39; <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">SomeAction</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>    act a s1 s2 <span class="ot">=</span> <span class="dt">Just</span> <span class="op">$</span> <span class="dt">SomeAction</span> a s1 s2</span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a><span class="ot">    action ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Sing</span> (<span class="ot">s ::</span> <span class="dt">Elevator</span>) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">SomeAction</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>    action <span class="st">&quot;open&quot;</span> s<span class="op">@</span>(<span class="dt">STuple3</span> <span class="dt">SClosed</span> <span class="dt">SStopped</span> f) <span class="ot">=</span></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>      act <span class="dt">Open</span> s (<span class="dt">STuple3</span> <span class="dt">SOpened</span> <span class="dt">SStopped</span> f)</span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>    action <span class="st">&quot;close&quot;</span> s<span class="op">@</span>(<span class="dt">STuple3</span> <span class="dt">SOpened</span> <span class="dt">SStopped</span> f) <span class="ot">=</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a>      act <span class="dt">Close</span> s (<span class="dt">STuple3</span> <span class="dt">SClosed</span> <span class="dt">SStopped</span> f)</span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a>    action <span class="st">&quot;up&quot;</span> s<span class="op">@</span>(<span class="dt">STuple3</span> <span class="dt">SClosed</span> <span class="dt">SStopped</span> f) <span class="ot">=</span></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a>      act (<span class="dt">Move</span> <span class="dt">SUp</span>) s (<span class="dt">STuple3</span> <span class="dt">SClosed</span> <span class="dt">SUp</span> (sNextFloor <span class="dt">SUp</span> f))</span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a>    action <span class="st">&quot;down&quot;</span> s<span class="op">@</span>(<span class="dt">STuple3</span> <span class="dt">SClosed</span> <span class="dt">SStopped</span> f) <span class="ot">=</span></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a>      act (<span class="dt">Move</span> <span class="dt">SDown</span>) s</span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a>        (<span class="dt">STuple3</span> <span class="dt">SClosed</span> (sNextMoveState <span class="dt">SDown</span> f) (sNextFloor <span class="dt">SDown</span> f))</span>
<span id="cb12-16"><a href="#cb12-16" aria-hidden="true" tabindex="-1"></a>    action <span class="st">&quot;stop&quot;</span> s<span class="op">@</span>(<span class="dt">STuple3</span> <span class="dt">SClosed</span> _ f) <span class="ot">=</span></span>
<span id="cb12-17"><a href="#cb12-17" aria-hidden="true" tabindex="-1"></a>      act <span class="dt">Stop</span> s (<span class="dt">STuple3</span> <span class="dt">SClosed</span> <span class="dt">SStopped</span> f)</span>
<span id="cb12-18"><a href="#cb12-18" aria-hidden="true" tabindex="-1"></a>    action <span class="st">&quot;wait&quot;</span> s<span class="op">@</span>(<span class="dt">STuple3</span> d m f) <span class="ot">=</span></span>
<span id="cb12-19"><a href="#cb12-19" aria-hidden="true" tabindex="-1"></a>      act <span class="dt">Wait</span> s (<span class="dt">STuple3</span> d (sNextMoveState m f) (sNextFloor m f))</span>
<span id="cb12-20"><a href="#cb12-20" aria-hidden="true" tabindex="-1"></a>    action _ _ <span class="ot">=</span> <span class="dt">Nothing</span></span></code></pre></div>
<p>We need to specify both initial and final states of the action here, so at first it may seem that we can violate the type restrictions in the Action type and create disallowed action. But if any mistake is made in the function above that could lead to the creation of disallowed command, this function will not compile - try changing any of the state values above.</p>
<h2 id="lets-run-it">Let’s run it!</h2>
<p>We will let “the passengers” control the elevator, but if they try to perform the action that is not allowed it will be rejected.</p>
<p>To print the current elevator state we need a function to convert it to String, so it shows as, e.g., <code>(Opened,Stopped,0)</code>, and not as <code>SomeSing (STuple3 SOpened SStopped (SNat @0))</code>:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="ot">show&#39; ::</span> <span class="dt">SomeSing</span> <span class="dt">Elevator</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>show&#39; (<span class="dt">SomeSing</span> s) <span class="ot">=</span> <span class="fu">show</span> (fromSing s)</span></code></pre></div>
<p>To create an interactive REPL that modifies and prints the elevator state in a loop we will use <a href="https://hackage.haskell.org/package/interact">interact</a> library <a id="interact_text"></a><a href="#interact">*</a>:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> elevator <span class="ot">=</span> toSing (<span class="dt">Opened</span>, <span class="dt">Stopped</span>, <span class="dv">0</span>)</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>  <span class="fu">putStrLn</span> <span class="st">&quot;Enter: open, close, up, down, wait or stop&quot;</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>  <span class="fu">putStrLn</span> <span class="op">$</span> show&#39; elevator</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>  replState runElevator elevator</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a><span class="ot">runElevator ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">SomeSing</span> <span class="dt">Elevator</span> <span class="ot">-&gt;</span> (<span class="dt">String</span>, <span class="dt">SomeSing</span> <span class="dt">Elevator</span>)</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>runElevator act st <span class="ot">=</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>  <span class="kw">case</span> actionFromString act st <span class="op">&gt;&gt;=</span> finalState st <span class="kw">of</span></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Just</span> st&#39; <span class="ot">-&gt;</span> (show&#39; st&#39;, st&#39;)</span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Nothing</span> <span class="ot">-&gt;</span> (<span class="st">&quot;action &quot;</span> <span class="op">++</span> act <span class="op">++</span> <span class="st">&quot; not allowed&quot;</span>, st)</span></code></pre></div>
<p>The “elevator” now support actions “open”, “close”, “up”, “down”, “wait” and “stop” and prints its current state after each action.</p>
<p>You can run the code right from this post by cloning the <a href="https://github.com/epoberezkin/poberezkin.com">site repo</a> and executing <code>stack run elevator</code>. The source code without the text is available <a href="https://github.com/epoberezkin/elevator-state-machine">here</a>.</p>
<h2 id="exercises">Exercises</h2>
<p>You can try these problems with this elevator example (possible solutions are in the <a href="https://github.com/epoberezkin/elevator-state-machine/blob/master/src/Problems.hs">linked repo</a>):</p>
<ol type="1">
<li>Create an operation that chains “run-time” actions <code>SomeAction</code>:</li>
</ol>
<pre class="haskell-ignore"><code>(&gt;&gt;:) :: SomeAction -&gt; SomeAction -&gt; Maybe SomeAction</code></pre>
<ol start="2" type="1">
<li>Create a function that given initial state and a list of commands returns elevator “program” to perform this sequence of actions, if it is valid:</li>
</ol>
<pre class="haskell-ignore"><code>elevatorProgram :: SomeSing Elevator -&gt; [String] -&gt; Maybe SomeAction</code></pre>
<ol start="3" type="1">
<li><p>If you “close” the door on the ground floor and send the elevator “down”, it will remain <code>Stopped</code>, but the command will not be rejected. How to modify the type definition for <code>Action</code> to disallow it? If you do it, <code>actionFromString</code> will no longer compile - it has to be modified as well.</p></li>
<li><p>Create a function that given the current elevator state and the requested floor, returns an action sequence in <code>SomeAction</code> to send it to the specific floor, in case it is stopped and the door is opened, and <code>Nothing</code> otherwise:</p></li>
</ol>
<pre class="haskell-ignore"><code>elevatorToFloor :: SomeSing Elevator -&gt; Natural -&gt; Maybe SomeAction</code></pre>
<h2 id="whats-next">What’s next?</h2>
<p>You may have already asked some of the following questions:</p>
<ol type="1">
<li>How to define actions that return results?</li>
<li>How to define more complex state machines when the same action can change the state differently depending on the results of the previous actions?</li>
<li>Also, how to write interactive programs with these actions in a more conventional way using <code>do</code> notation?</li>
</ol>
<p>All these questions will be answered in Part 2.</p>
<p><a id="interact"></a><a href="#interact_text">*</a> disclaimer - I created it</p>
  </section>
  <section class="links">
    <a href="https://www.reddit.com/r/haskell/comments/hkg9q8/modeling_state_machines_with_dependent_types_in/" target="_blank"><img src="/images/reddit.png"></a>
    <a href="https://twitter.com/intent/tweet?via=epoberezkin&text=Modeling%20state%20machines%20with%20dependent%20types%20in%20Haskell%3A%20Part%201&hashtags=haskell%2Cexecutable%2Ccoding&original_referer=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2020-06-29-modeling-state-machine-dependent-types-haskell-1.html&url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2020-06-29-modeling-state-machine-dependent-types-haskell-1.html" target="_blank"><img src="/images/tweet.png"></a>
    
      <a href="https://github.com/epoberezkin/elevator-state-machine" target="_blank"><img src="/images/repo.png"></a>
    
  </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Using dependent types in Haskell with singletons</title>
    <link href="https://www.poberezkin.com/posts/2020-05-17-using-dependent-types-haskell-singletons.html" />
    <id>https://www.poberezkin.com/posts/2020-05-17-using-dependent-types-haskell-singletons.html</id>
    <published>2020-05-17T00:00:00Z</published>
    <updated>2020-05-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <section class="header">
    <div class="info">
      Posted on
      
        May 17, 2020
      
      
        by Evgeny Poberezkin
      
    </div>
    <div class="info">
      
        Tags: <a title="All pages tagged &#39;haskell&#39;." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged &#39;coding&#39;." href="/tags/coding.html" rel="tag">coding</a>
      
    </div>
  </section>
  <section>
    <p>Haskell has a very advanced type system, but it does not yet have <a href="https://en.wikipedia.org/wiki/Dependent_type">dependent types</a>. Yet, singleton types and <a href="https://hackage.haskell.org/package/singletons">singletons library</a> provide a very good approximation of dependent types, that is shown on this diagram - the explanations to follow.</p>
<p><a href="https://github.com/epoberezkin/poberezkin.com/tree/master/dot/singletons1.gv"><img src="/images/singletons1.svg" title="source" alt="Singleton types" /></a></p>
<p>Justin Le wrote a fantastic <a href="https://blog.jle.im/entry/introduction-to-singletons-1.html">introduction to singletons library</a> and dependent type programming with Haskell - if you did not use singletons library before, I highly recommended reading it.</p>
<p>I’ve written this post to visualise the Haskell “problem” that prevents it from having dependent types, and the “solution” that singleton types offer.</p>
<h2 id="the-problem">The problem</h2>
<p>Haskell types can only have other types as their parameters, but not values. <a href="https://downloads.haskell.org/ghc/8.10.1/docs/html/users_guide/glasgow_exts.html#extension-DataKinds">DataKinds extension</a> automatically promotes all types to kinds and all constructors to types, in this way allowing other types depending on something that looks like values of another type. But there is no way to convert actual values to types, as promoted constructors are not connected to corresponding values and fully erased during compilation.</p>
<p>This is best illustrated with a simple example from Justin’s post. Suppose we have type <code>Door</code> parametrised with the types of the kind <code>DoorState</code>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">DoorState</span> <span class="ot">=</span> <span class="dt">Opened</span> <span class="op">|</span> <span class="dt">Closed</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Door</span> (<span class="ot">a ::</span> <span class="dt">DoorState</span>)<span class="ot"> ::</span> <span class="dt">Type</span> <span class="kw">where</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">MkDoor</span><span class="ot"> ::</span> <span class="dt">Door</span> a</span></code></pre></div>
<p>These two declarations create kinds, types and values that are shown on diagram 2:</p>
<p><a href="https://github.com/epoberezkin/poberezkin.com/tree/master/dot/singletons2.gv"><img src="/images/singletons2.svg" title="source" alt="Types and kinds with DataKinds" /></a></p>
<p>The <code>DoorState</code> type is automatically promoted to <code>DoorState</code> kind, and <code>Opened</code>/<code>Closed</code> values belonging to type <code>DoorState</code> are automatically promoted to <code>'Opened</code>/<code>'Closed</code> types belonging to kind <code>DoorState</code> - these types have no values in them (other than <code>undefined</code>).</p>
<p>As you can see, the values <code>Opened</code>/<code>Closed</code> are not connected to the associated promoted constructors <code>'Opened</code>/<code>'Closed</code> - at the moment Haskell provides no way to connect them directly.</p>
<h2 id="the-solution">The solution</h2>
<p>Singleton types allow creating this missing link between ordinary values and their associated promoted constructors. The idea here is that for each value we need to create a separate type that has only one value in it. In this way, if we connect values in these singleton types to ordinary values (via polymorphic functions), and the singleton types themselves to the promoted constructors (via type inference), we will have managed to link types to values, even though indirectly - so we can use the equivalent of the dependent types in Haskell.</p>
<p>It does sound like a lot of boilerplate to write, but luckily singletons library automates the whole process by using Template Haskell to generate it. To illustrate using the same example as above, but with the singleton types added:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="op">$</span>(singletons [<span class="op">|</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">data</span> <span class="dt">DoorState</span> <span class="ot">=</span> <span class="dt">Opened</span> <span class="op">|</span> <span class="dt">Closed</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span>])</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Door</span> (<span class="ot">a ::</span> <span class="dt">DoorState</span>)<span class="ot"> ::</span> <span class="dt">Type</span> <span class="kw">where</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>  <span class="dt">MkDoor</span><span class="ot"> ::</span> <span class="dt">Sing</span> a <span class="ot">-&gt;</span> <span class="dt">Door</span> a</span></code></pre></div>
<p>The <code>singletons</code> splice adds two singleton types with the necessary framework, as shown on diagram 1 on top of the post.</p>
<p>Singleton types and values serve as an intermediary to link <code>Opened</code>/<code>Closed</code> values with <code>'Opened</code>/<code>'Closed</code> types that are used as parameters for the type <code>Door</code>, in this way making <code>Door</code> an equivalent of a dependent type.</p>
<h2 id="the-future">The future</h2>
<p>Using singleton types for dependent type programming in Haskell is a bit of a workaround, rather than a solution to the problem. It either requires an additional code to write or depends on singletons library templates to generate all the necessary code and on namespace conventions that users have to be aware of.</p>
<p>There is an ongoing work by <a href="https://richarde.dev/">Richard Eisenberg</a> to bring dependent types support to Haskell - it would be very exciting when it comes out.</p>
<p>Until then, we can use singletons library for type-driven development of complex systems, modelling their state transitions and all the relationships in “dependent” types.</p>
  </section>
  <section class="links">
    <a href="https://www.reddit.com/submit?url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2020-05-17-using-dependent-types-haskell-singletons.html&title=Using dependent types in Haskell with singletons" target="_blank"><img src="/images/reddit.png"></a>
    <a href="https://twitter.com/intent/tweet?via=epoberezkin&text=Using%20dependent%20types%20in%20Haskell%20with%20singletons&hashtags=haskell%2Ccoding&original_referer=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2020-05-17-using-dependent-types-haskell-singletons.html&url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2020-05-17-using-dependent-types-haskell-singletons.html" target="_blank"><img src="/images/tweet.png"></a>
    
  </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Why use advanced Haskell types?</title>
    <link href="https://www.poberezkin.com/posts/2020-04-29-why-use-advanced-haskell-types.html" />
    <id>https://www.poberezkin.com/posts/2020-04-29-why-use-advanced-haskell-types.html</id>
    <published>2020-04-29T00:00:00Z</published>
    <updated>2020-04-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <section class="header">
    <div class="info">
      Posted on
      
        April 29, 2020
      
      
        by Evgeny Poberezkin
      
    </div>
    <div class="info">
      
        Tags: <a title="All pages tagged &#39;haskell&#39;." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged &#39;coding&#39;." href="/tags/coding.html" rel="tag">coding</a>
      
    </div>
  </section>
  <section>
    <p>Haskell type system has dramatically evolved, both with the language extensions and libraries. It can be a challenge to navigate this space. So why anything beyond basic types is needed?</p>
<p>Types in Haskell provide a way not only to type-check the code you write, but to design the whole system in types, before any code is written, and then use the types to guide the development. It is worth reading the book “<a href="https://www.manning.com/books/type-driven-development-with-idris">Type-driven development in Idris</a>” by Edwin Brady about this approach.</p>
<p>Let’s try to design types for some service accounts that can represent a user or an organisation.</p>
<p>The source code is available in <a href="https://github.com/epoberezkin/advanced-haskell-types">advanced-haskell-types</a> repo.</p>
<h2 id="approach-1---basic-types">Approach #1 - basic types</h2>
<p>While users and organisations are quite different, they may have many similarities (for example, have a look at <a href="https://developer.github.com/v3/users/#get-a-single-user">GitHub API</a> that returns both users and orgs).</p>
<p>Our users and orgs share some functionality and we would want to store them in one list. So we will make a single type to hold these accounts:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- shared information for both users and organisations</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">AInfo</span> <span class="ot">=</span> <span class="dt">AInfo</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>              {<span class="ot"> name ::</span> <span class="dt">Text</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>              ,<span class="ot"> displayName ::</span> <span class="dt">Text</span> }</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Account</span> <span class="ot">=</span> <span class="dt">User</span> <span class="dt">AInfo</span> <span class="op">|</span> <span class="dt">Org</span> <span class="dt">AInfo</span> <span class="dt">Members</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Members</span> <span class="ot">=</span> [<span class="dt">Account</span>]</span></code></pre></div>
<p>We’ve already met the first problem with this approach - members of the organisation should be users, but <code>Members</code> type allows both users and organisations - we will have to manage it in code.</p>
<p>Here are some functions for these accounts:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- all shared functions should work with both users and orgs</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="ot">accountName ::</span> <span class="dt">Account</span> <span class="ot">-&gt;</span> <span class="dt">Text</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>accountName (<span class="dt">User</span> info) <span class="ot">=</span> name info</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>accountName (<span class="dt">Org</span> info _) <span class="ot">=</span> name info</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- but some functions may only work with orgs,</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="co">-- so we will have to use Maybe type to return results</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="ot">orgMembers ::</span> <span class="dt">Account</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Members</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>orgMembers (<span class="dt">User</span> _) <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>orgMembers (<span class="dt">Org</span> _ ms) <span class="ot">=</span> <span class="dt">Just</span> ms</span></code></pre></div>
<p>It’s easy to put accounts in one list and process this list, as they have the same type, but we will have to check the result when we use a function intended only for organisations:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> user <span class="ot">=</span> <span class="dt">User</span> (<span class="dt">AInfo</span> <span class="st">&quot;john&quot;</span> <span class="st">&quot;John Doe&quot;</span>)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>      org <span class="ot">=</span> <span class="dt">Org</span> (<span class="dt">AInfo</span> <span class="st">&quot;team&quot;</span> <span class="st">&quot;John&#39;s team&quot;</span>) [user]</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>      accounts <span class="ot">=</span> [user, org]</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  <span class="fu">print</span> <span class="op">$</span> <span class="fu">map</span> accountName accounts</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">case</span> orgMembers org <span class="kw">of</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Just</span> ms <span class="ot">-&gt;</span> <span class="fu">print</span> <span class="op">$</span> <span class="fu">map</span> accountName ms</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="fu">return</span> ()</span></code></pre></div>
<p>Could we design better types for our scenario to avoid the need to check the result of functions for orgs? It would also be good to prevent organisations being added as members at a type level, but without losing the ability to process both users and organisation in a single list.</p>
<h2 id="approach-2---existential-quantification">Approach #2 - existential quantification</h2>
<p>Let’s try to create two different types to store users and organisations, to avoid the problems we had:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">User</span> <span class="ot">=</span> <span class="dt">User</span> <span class="dt">AInfo</span> <span class="co">-- we could have made it newtype</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Org</span> <span class="ot">=</span> <span class="dt">Org</span> <span class="dt">AInfo</span> <span class="dt">Members</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Members</span> <span class="ot">=</span> [<span class="dt">User</span>]</span></code></pre></div>
<p>This is better, organisation members can be only users now.</p>
<p>We cannot have one function working on two different types, but we can define a type class and make <code>User</code> and <code>Org</code> types its instances:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Acc</span> a <span class="kw">where</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  accountName ::</span> a <span class="ot">-&gt;</span> <span class="dt">Text</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Acc</span> <span class="dt">User</span> <span class="kw">where</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>  accountName (<span class="dt">User</span> info) <span class="ot">=</span> name info</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Acc</span> <span class="dt">Org</span> <span class="kw">where</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>  accountName (<span class="dt">Org</span> info _) <span class="ot">=</span> name info</span></code></pre></div>
<p>And we can also have a function that works only with organisations, without using Maybe:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ot">orgMembers ::</span> <span class="dt">Org</span> <span class="ot">-&gt;</span> <span class="dt">Members</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>orgMembers (<span class="dt">Org</span> _ ms) <span class="ot">=</span> ms</span></code></pre></div>
<p>The problem that we now have is that <code>User</code> and <code>Org</code> are two different types, and we cannot put them into one list.</p>
<p>Haskell GHC compiler (since v6.8.1 released in 2007) has the extension <a href="https://downloads.haskell.org/ghc/8.8.3/docs/html/users_guide/glasgow_exts.html#extension-ExistentialQuantification">ExistentialQuantification</a> that allows to create a type that can wrap values of multiple types, and the members of this wrapper type can be put in the list:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">A</span> <span class="ot">=</span> <span class="kw">forall</span> a<span class="op">.</span> <span class="dt">Acc</span> a <span class="ot">=&gt;</span> <span class="dt">A</span> a</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Accounts</span> <span class="ot">=</span> [<span class="dt">A</span>]</span></code></pre></div>
<p>In our case we limit the allowed types to the instances of <code>Acc</code> type class, so we can use the list elements with our type class functions, but it is not the only shared criteria the types can have and still be useful - see another example in ExistentialQuantification docs.</p>
<p>Now we can put wrapped users and orgs into the same list and process them:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> user <span class="ot">=</span> <span class="dt">User</span> (<span class="dt">AInfo</span> <span class="st">&quot;john&quot;</span> <span class="st">&quot;John Doe&quot;</span>)</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>      org <span class="ot">=</span> <span class="dt">Org</span> (<span class="dt">AInfo</span> <span class="st">&quot;team&quot;</span> <span class="st">&quot;John&#39;s team&quot;</span>) [user]</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>      accounts <span class="ot">=</span> [<span class="dt">A</span> user, <span class="dt">A</span> org] <span class="co">-- we need to wrap users and orgs</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- we do not need to check type of the org now</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>  <span class="fu">print</span> <span class="op">.</span> <span class="fu">map</span> accountName <span class="op">$</span> orgMembers org</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- the only way to unwrap an existential wrapper is with pattern matching</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>  <span class="fu">print</span> <span class="op">$</span> <span class="fu">map</span> (\(<span class="dt">A</span> acc) <span class="ot">-&gt;</span> accountName acc) accounts</span></code></pre></div>
<p>There are two downsides of this approach:</p>
<ol type="1">
<li>We cannot limit which types can be instances of <code>Acc</code> type class. While in some more general cases this unlimited extensibility can be helpful, if we want to control which types can be used as <code>Acc</code> we need some other approach.</li>
<li>We have to write some boiler plate code - we really just wanted one type with some additional flexibility in it, and not two different types and type class to represent it.</li>
</ol>
<p>Let’s try to solve these problems.</p>
<h2>
Approach #3 - data families and data kinds
</h2>
<p>We will try to limit the types that can be instances of <code>Acc</code> type class. Types in Haskell have kinds, and in most cases the kind of a type is determined by the number of type parameters.</p>
<p>From v7.4.1 released in 2012 Haskell makes all your types also kinds using <a href="https://downloads.haskell.org/ghc/8.8.3/docs/html/users_guide/glasgow_exts.html#extension-DataKinds">DataKinds</a> extension - we will use it to limit the types that can be used as <code>Acc</code>. We will also use extensions <a href="https://downloads.haskell.org/ghc/8.8.3/docs/html/users_guide/glasgow_exts.html#extension-TypeFamilies">TypeFamilies</a> and ExistentialQuantification we already used to have types of user and organisation related to each other and to put them into the same list.</p>
<p>Let’s define a simple type that has the list of allowed account types:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">AType</span> <span class="ot">=</span> <span class="dt">AUser</span> <span class="op">|</span> <span class="dt">AOrg</span></span></code></pre></div>
<p>With DataKinds extension each <em>type</em> (in this case <code>AType</code>) automatically becomes a <em>kind</em> that can be used to define and restrict other types. We will use this kind to create <code>Account</code> data family:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="kw">family</span> <span class="dt">Account</span> (<span class="ot">a ::</span> <span class="dt">AType</span>)</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="kw">instance</span> <span class="dt">Account</span> <span class="dt">&#39;AUser</span> <span class="ot">=</span> <span class="dt">User</span> <span class="dt">AInfo</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="kw">instance</span> <span class="dt">Account</span> <span class="dt">&#39;AOrg</span> <span class="ot">=</span> <span class="dt">Org</span> <span class="dt">AInfo</span> <span class="dt">Members</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Members</span> <span class="ot">=</span> [<span class="dt">Account</span> <span class="dt">&#39;AUser</span>] <span class="co">-- organisation members can be only users</span></span></code></pre></div>
<p><code>'AUser</code> and <code>'AOrg</code> is a special syntax that allows to use <em>constructors of type</em> <code>AType</code> as <em>types of kind</em> <code>AType</code>. <code>User</code> and <code>Org</code> are just normal constructors of types <code>Account 'AUser</code> and <code>Account 'AOrg</code>.</p>
<p>To define shared functionality we would still have to use a type class, because while <code>Account 'AUser</code> and <code>Account 'AOrg</code> are now related (as family members), they are still two separate types:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Acc</span> (<span class="ot">a ::</span> <span class="dt">AType</span>) <span class="kw">where</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  accountName ::</span> <span class="dt">Account</span> a <span class="ot">-&gt;</span> <span class="dt">Text</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Acc</span> <span class="dt">AUser</span> <span class="kw">where</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>  accountName (<span class="dt">User</span> info) <span class="ot">=</span> name info</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Acc</span> <span class="dt">AOrg</span> <span class="kw">where</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>  accountName (<span class="dt">Org</span> info _) <span class="ot">=</span> name info</span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="ot">orgMembers ::</span> <span class="dt">Account</span> <span class="dt">&#39;AOrg</span> <span class="ot">-&gt;</span> <span class="dt">Members</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>orgMembers (<span class="dt">Org</span> _ ms) <span class="ot">=</span> ms</span></code></pre></div>
<p>Please note that in this case we made types belonging to our custom-made kind <code>AType</code> instances of type-class <code>Acc</code>, rather than account types. We can neither extend data family <code>Account a</code> nor type class <code>Acc</code> without extending our kind <code>AType</code>.</p>
<p>We still need to create an existential wrapper type to put users and orgs in the same list:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">A</span> <span class="ot">=</span> <span class="kw">forall</span> a<span class="op">.</span> <span class="dt">Acc</span> a <span class="ot">=&gt;</span> <span class="dt">A</span> (<span class="dt">Account</span> a)</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Accounts</span> <span class="ot">=</span> [<span class="dt">A</span>]</span></code></pre></div>
<p>We can use exactly the same code to process users and orgs as in approach #2.</p>
<p>We have managed to restrict the types of accounts by defining a kind, but do we really need 2 different types and a type-class, or is there a way to create just one, a more advanced type?</p>
<h2 id="approach-4---gadts">Approach #4 - GADTs</h2>
<p>We can achieve the same flexibility using a generalised algebraic data type - support for such types is enabled with <a href="https://downloads.haskell.org/ghc/8.8.3/docs/html/users_guide/glasgow_exts.html#extension-GADTs">GADTs</a> extension.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">AType</span> <span class="ot">=</span> <span class="dt">AUser</span> <span class="op">|</span> <span class="dt">AOrg</span> <span class="co">-- we still need DataKinds extension</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="co">-- (a :: AType) here requires KindSignatures extension</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Account</span> (<span class="ot">a ::</span> <span class="dt">AType</span>) <span class="kw">where</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>  <span class="dt">User</span><span class="ot"> ::</span> <span class="dt">AInfo</span> <span class="ot">-&gt;</span> <span class="dt">Account</span> <span class="dt">&#39;AUser</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Org</span><span class="ot"> ::</span> <span class="dt">AInfo</span> <span class="ot">-&gt;</span> <span class="dt">Members</span> <span class="ot">-&gt;</span> <span class="dt">Account</span> <span class="dt">&#39;AOrg</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Members</span> <span class="ot">=</span> [<span class="dt">Account</span> <span class="dt">&#39;AUser</span>] <span class="co">-- organisation members can be only users</span></span></code></pre></div>
<p>Now that we have one parametrised type, we can define functions on this general type without a type class, using just pattern matching:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="ot">accountName ::</span> <span class="dt">Account</span> a <span class="ot">-&gt;</span> <span class="dt">Text</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>accountName (<span class="dt">User</span> info) <span class="ot">=</span> name info</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>accountName (<span class="dt">Org</span> info _) <span class="ot">=</span> name info</span></code></pre></div>
<p>We can also define functions on specific types:</p>
<pre><code>orgMembers :: Account &#39;AOrg -&gt; Members
orgMembers (Org _ ms) = ms</code></pre>
<p>We still need an existential wrapper to put a general type in a list, but it is a bit simpler now, as we do not need a type class:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">A</span> <span class="ot">=</span> <span class="kw">forall</span> a<span class="op">.</span> <span class="dt">A</span> (<span class="dt">Account</span> a)</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Accounts</span> <span class="ot">=</span> [<span class="dt">A</span>]</span></code></pre></div>
<p>GADTs extension implies ExistentialQuantification, so we do not need to enable it separately.</p>
<p>The same code as above can be used to process the list of users and orgs.</p>
<h2 id="summary">Summary</h2>
<p>Beyond basic types, we looked at three options that allow to define different entities with shared behaviours and to manage them in the same data structure:</p>
<ol type="1">
<li>Type classes - the most extensible option, that allows to define the behaviour independently of its implementation. The classic scenario for type classes is some kind of widgets/shapes/etc.</li>
<li>Data families restricted with data kinds. The advantage of such data families is that you can define its members in different parts of your code, but you have control of the list of allowed members in a single location using a custom data kind.</li>
<li>GADTs - they provide a much bigger flexibility in defining your types, in many cases without the need for type classes. They allow different constructors of one parametrised type (of a higher kind) to return specific types (of basic kind).</li>
</ol>
<p>Haskell offers many different approaches to design your whole system, not just its data, in types. This post is just a small sample of what is possible with advanced Haskell types.</p>
  </section>
  <section class="links">
    <a href="https://www.reddit.com/submit?url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2020-04-29-why-use-advanced-haskell-types.html&title=Why use advanced Haskell types?" target="_blank"><img src="/images/reddit.png"></a>
    <a href="https://twitter.com/intent/tweet?via=epoberezkin&text=Why%20use%20advanced%20Haskell%20types%3F&hashtags=haskell%2Ccoding&original_referer=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2020-04-29-why-use-advanced-haskell-types.html&url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2020-04-29-why-use-advanced-haskell-types.html" target="_blank"><img src="/images/tweet.png"></a>
    
      <a href="https://github.com/epoberezkin/advanced-haskell-types" target="_blank"><img src="/images/repo.png"></a>
    
  </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Haskell — a higher order language</title>
    <link href="https://www.poberezkin.com/posts/2020-03-15-haskell-a-higher-order-language.html" />
    <id>https://www.poberezkin.com/posts/2020-03-15-haskell-a-higher-order-language.html</id>
    <published>2020-03-15T00:00:00Z</published>
    <updated>2020-03-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <section class="header">
    <div class="info">
      Posted on
      
        <a href="https://medium.com/@epoberezkin/haskell-a-higher-order-language-ade461d453c7">March 15, 2020</a>
      
      
        by Evgeny Poberezkin
      
    </div>
    <div class="info">
      
        Tags: <a title="All pages tagged &#39;haskell&#39;." href="/tags/haskell.html" rel="tag">haskell</a>, <a title="All pages tagged &#39;executable&#39;." href="/tags/executable.html" rel="tag">executable</a>, <a title="All pages tagged &#39;coding&#39;." href="/tags/coding.html" rel="tag">coding</a>
      
    </div>
  </section>
  <section>
    <p><img src="/images/haskell.png" width="40%" style="float: left; margin: 20px 20px 10px 0;"></p>
<p>The thesis here is that Haskell is not just one of many functional programming languages — it is a different, more advanced programming paradigm.</p>
<p>Haskell is indeed a functional language, but calling Haskell “a functional language” is like calling a skyscraper “a dwelling” — while technically correct, it does not describe how the latter is much more than just a place to live.</p>
<p>What defines a programming language? From the point of view of category theory, there are two major components of each programming language: data types and transformations between them — in category theory terminology, “objects” and “morphisms”.</p>
<p><strong>The first claim</strong> here (that must be challenged) is that all programming languages but Haskell (and more recent Idris) are based on “morphisms” — code, procedures or functions that transform and manipulate the data. Data types in these languages play the secondary role — to ensure validity and to improve predictability of the “morphisms”.</p>
<p>Haskell, being a functional language, counterintuitively, is not based on functions — it is based on types, or “objects” in category theory terminology. Types ensuring the validity of transformations almost seems secondary in Haskell (however useful), while the primary purpose of types is to formally describe the system model and the relationship between the elements of the system (including functions that also have types).</p>
<p>But a bigger distinction between Haskell and other languages is in the nature of the language semantics. <strong>The second claim</strong> (that also must be challenged) is that while other languages have semantics tightly coupled with the syntax — the meaning of the code is defined by its grammar, Haskell semantics is defined by the combination of code and context (e.g., created by the types that belong to Monad class). In this way, Haskell is much closer than other programming languages to the natural human languages that also have semantics defined by the combination of grammar and context (see interpretive and generative semantics of human languages).</p>
<p>For example, a simple <code>sequence</code> function that is defined as:</p>
<pre class="haskell-ignore"><code>sequence :: Monad m =&gt; [m a] -&gt; m [a]
sequence ms = foldr k (return []) ms
            where
              k m m&#39; = do { x &lt;- m; xs &lt;- m&#39;; return (x:xs) }</code></pre>
<p>can mean different things depending on the context that is defined by <code>m</code>.</p>
<p>Applied to IO it can mean performing IO actions in sequence:</p>
<pre class="haskell-ignore"><code>sequence [getLine, getLine]</code></pre>
<p>returns a single IO action that resolves into the list of 2 strings.</p>
<p>Applied to the list of instances of <code>Maybe</code> type, it would check that all of them contain some value and either return <code>Just</code> list of these value or Nothing if any of them is <code>Nothing</code>:</p>
<pre class="haskell-ignore"><code>sequence [Just 1, Just 2, Just 3] = Just [1, 2, 3]
sequence [Just 1, Just 2, Nothing] = Nothing</code></pre>
<p>Applied to the list of 2 lists, it will perform indeterminate computation and return all possible permutations of list items where the first item comes from the first list, and the second — from the second list:</p>
<pre class="haskell-ignore"><code>sequence [[1,2],[3,4]] = [[1,3],[1,4],[2,3],[2,4]]
sequence [[1,2],[3,4], []] = [] -- [] is &quot;undefined&quot; in this context</code></pre>
<p>Context-dependent semantics of Haskell code makes Haskell more difficult to learn. As the same syntax can mean many different things, achieving fluency requires more effort than with other languages. But it also makes Haskell infinitely more expressive than any other language — you can implement any new semantics you want by adding the new context to the same code. Therefore, while Haskell requires more investment from you than other programming languages, the return on this investment is infinitely higher.</p>
<p>Some Haskell books (e.g. <a href="https://learnyouahaskell.github.io">LYAH</a>) and lectures (e.g <a href="https://www.seas.upenn.edu/~cis194/fall16/index.html">Penn course</a>) do not capture this fundamental distinction well enough. Instead, they focus on the functional nature of Haskell, and present Monad as almost some work-around to allow using pure functions for context-aware computations (IO, State, indeterminism, etc.). Unfortunately, it creates a barrier to entry for the new developers, because when people are asked to make a larger than usual investment to learn yet one more functional programming language with quirky syntax, this investment is difficult to justify without understanding first that Haskell is a more powerful programming paradigm. How many people abandoned Haskell before grasping its power?</p>
<p>A good book that explains how Haskell is a higher order language is <a href="https://en.wikibooks.org/wiki/Haskell">Haskell</a> in wiki-books. Once you get over “<a href="https://en.wikibooks.org/wiki/Haskell/Understanding_monads">Understanding monads</a>” section, the Haskell advantage should become apparent.</p>
<p>If you want to see some relatively simple magic you can do with Haskell, watch the talk by <a href="https://github.com/EncodePanda">Paweł Szulc</a> at Lambda World’19, particularly where he <a href="https://www.youtube.com/watch?v=idU7GdlfP9Q&amp;feature=youtu.be&amp;t=625">talks about Servant</a> — the library to create REST APIs in Haskell. Before you write a single line of implementation code, you can get the whole API definition from a single type definition (I am replacing alpacas from Paweł’s farm with users here):</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE DataKinds, DeriveAnyClass, DeriveGeneric, TypeOperators #-}</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Servant</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Servant.Server</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Network.Wai.Handler.Warp</span> (run)</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Aeson</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">GHC.Generics</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Map</span> <span class="kw">as</span> <span class="dt">M</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">User</span> <span class="ot">=</span> <span class="dt">User</span> {</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a><span class="ot">  name  ::</span> <span class="dt">String</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>} <span class="kw">deriving</span> (<span class="dt">Generic</span>, <span class="dt">ToJSON</span>, <span class="dt">FromJSON</span>)</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">UserAPI</span> <span class="ot">=</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>       <span class="st">&quot;user&quot;</span> <span class="op">:&gt;</span> <span class="dt">Get</span> &#39;[<span class="dt">JSON</span>] (<span class="dt">M.Map</span> <span class="dt">Int</span> <span class="dt">User</span>)</span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>  <span class="op">:&lt;|&gt;</span> <span class="st">&quot;user&quot;</span> <span class="op">:&gt;</span> <span class="dt">Capture</span> <span class="st">&quot;userId&quot;</span> <span class="dt">Int</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>              <span class="op">:&gt;</span> <span class="dt">Get</span> &#39;[<span class="dt">JSON</span>] <span class="dt">User</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>  <span class="op">:&lt;|&gt;</span> <span class="st">&quot;user&quot;</span> <span class="op">:&gt;</span> <span class="dt">Capture</span> <span class="st">&quot;userId&quot;</span> <span class="dt">Int</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>              <span class="op">:&gt;</span> <span class="dt">ReqBody</span> &#39;[<span class="dt">JSON</span>] <span class="dt">User</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>              <span class="op">:&gt;</span> <span class="dt">PutCreated</span> &#39;[<span class="dt">JSON</span>] <span class="dt">NoContent</span></span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a><span class="ot">userApi ::</span> <span class="dt">Proxy</span> <span class="dt">UserAPI</span></span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a>userApi <span class="ot">=</span> <span class="dt">Proxy</span></span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a><span class="co">-- UserAPI type defines this API:</span></span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a><span class="co">-- GET /user   - Response: {&quot;1&quot;:{&quot;name&quot;:&quot;jane&quot;}}, 200</span></span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a><span class="co">-- GET /user/1 - Response: {&quot;name&quot;:&quot;jane&quot;}, 200</span></span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a><span class="co">-- PUT /user/2 Body: {&quot;name&quot;:&quot;John D.&quot;} - Response: NoContent, 201</span></span></code></pre></div>
<p>And before you even start implementing this API you can get client functions to call this API with a few lines of code:</p>
<pre class="haskell-ignore"><code>-- import Servant.Client

getAll :&lt;|&gt; getUser :&lt;|&gt; putUser = client userApi

-- client functions types:
getAll :: ClientM (M.Map Int User)
getUser :: Int -&gt; ClientM User
putUser :: Int -&gt; User -&gt; ClientM User</code></pre>
<p>With just a few annotations you can generate API docs from UserAPI type:</p>
<pre class="haskell-ignore"><code>instance ToCapture (Capture &quot;userId&quot; Int) where
  toCapture _ =
    DocCapture &quot;userId&quot;
               &quot;Id that uniquely identifies a user in the system&quot;

instance ToSample (User) where
  toSamples _ = singleSample $ User &quot;Jane&quot;

instance ToSample (M.Map Int User) where
  toSamples _ = singleSample $ M.singleton 1 (User &quot;Jane&quot;)

apiDocs :: API
apiDocs = docs userApi

main :: IO ()
main = (writeFile &quot;docs.md&quot; . markdown) apiDocs</code></pre>
<p>To run this server you just need to implement it, the mock implementation is very simple, but the Haskell type system ensures that the type of implementation is correct (<code>Server UserAPI</code> that is based on <code>UserAPI</code> type):</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>dummy <span class="ot">=</span> <span class="dt">User</span> <span class="st">&quot;Jane&quot;</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="ot">fetchAll ::</span> <span class="dt">Monad</span> m <span class="ot">=&gt;</span> m (<span class="dt">M.Map</span> <span class="dt">Int</span> <span class="dt">User</span>)</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>fetchAll <span class="ot">=</span> <span class="fu">pure</span> <span class="op">$</span> M.singleton <span class="dv">1</span> dummy</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="ot">fetch ::</span> <span class="dt">Monad</span> m <span class="ot">=&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> m <span class="dt">User</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>fetch <span class="fu">id</span> <span class="ot">=</span> <span class="fu">pure</span> dummy</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="ot">insert ::</span> <span class="dt">Monad</span> m <span class="ot">=&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">User</span> <span class="ot">-&gt;</span> m <span class="dt">NoContent</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>insert <span class="fu">id</span> user <span class="ot">=</span> <span class="fu">pure</span> <span class="dt">NoContent</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a><span class="ot">server ::</span> <span class="dt">Server</span> <span class="dt">UserAPI</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>server <span class="ot">=</span> fetchAll <span class="op">:&lt;|&gt;</span> fetch <span class="op">:&lt;|&gt;</span> insert</span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a><span class="ot">app ::</span> <span class="dt">Application</span></span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a>app <span class="ot">=</span> serve userApi server</span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a>  <span class="fu">putStrLn</span> <span class="st">&quot;http://localhost:8080/user&quot;</span></span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a>  run <span class="dv">8080</span> app</span></code></pre></div>
<p>The above does feel like magic! You can run this server right from this post with <code>stack run users-api</code>.</p>
<p>Morphism-based programming languages (i.e., all other languages) force programmers to model the whole system outside of the code — using SQL schema, JSON schema, diagrams, etc. Type-based languages (Haskell and Idris) allow for type-driven development, when the whole system can be modelled top-down with algebraic data types, rather than bottom-up with functions as in other languages.</p>
<p>Haskell being type-based language with context-dependent semantics is a higher order language that is almost one of a kind — there seems to be no other mature programming language that allows the same level of expressiveness as Haskell does.</p>
  </section>
  <section class="links">
    <a href="https://www.reddit.com/submit?url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2020-03-15-haskell-a-higher-order-language.html&title=Haskell — a higher order language" target="_blank"><img src="/images/reddit.png"></a>
    <a href="https://twitter.com/intent/tweet?via=epoberezkin&text=Haskell%20%E2%80%94%20a%20higher%20order%20language&hashtags=haskell%2Cexecutable%2Ccoding&original_referer=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2020-03-15-haskell-a-higher-order-language.html&url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2020-03-15-haskell-a-higher-order-language.html" target="_blank"><img src="/images/tweet.png"></a>
    
  </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Why you should Open-Source for Real</title>
    <link href="https://www.poberezkin.com/posts/2019-07-10-talk-why-you-should-open-source-for-real.html" />
    <id>https://www.poberezkin.com/posts/2019-07-10-talk-why-you-should-open-source-for-real.html</id>
    <published>2019-07-10T00:00:00Z</published>
    <updated>2019-07-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <section class="header">
    <div class="info">
      Posted on
      
        <a href="https://skillsmatter.com/skillscasts/14213-lightning-talk-coding-you-either-love-or-hate-it-or-why-you-should-open-source-for-real">July 10, 2019</a>
      
      
        by Evgeny Poberezkin
      
    </div>
    <div class="info">
      
        Tags: <a title="All pages tagged &#39;talk&#39;." href="/tags/talk.html" rel="tag">talk</a>, <a title="All pages tagged &#39;coding&#39;." href="/tags/coding.html" rel="tag">coding</a>, <a title="All pages tagged &#39;open-source&#39;." href="/tags/open-source.html" rel="tag">open-source</a>
      
    </div>
  </section>
  <section>
    <p>This is a <a href="https://skillsmatter.com/skillscasts/14213-lightning-talk-coding-you-either-love-or-hate-it-or-why-you-should-open-source-for-real">talk at FullStack London 2019</a>.</p>
<p><a href="https://skillsmatter.com/skillscasts/14213-lightning-talk-coding-you-either-love-or-hate-it-or-why-you-should-open-source-for-real">
<img src="/images/talk2019.jpg" alt="Why You Should Open-Source For Real" width="100%">
</a></p>
<blockquote>
<p>Coding is hard but you still love it. But you also hate it, at least on some days.</p>
</blockquote>
<blockquote>
<p>Humans are unpredictable so you chose to work with code and computers. But code outcomes are becoming increasingly unpredictable, and to succeed in coding you need to succeed with other humans.</p>
</blockquote>
<blockquote>
<p>Open-source contribution is a complete waste of time. But it is also the best investment of time you can make to become a better engineer and it will also make you a better human being (maybe).</p>
</blockquote>
  </section>
  <section class="links">
    <a href="https://www.reddit.com/submit?url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2019-07-10-talk-why-you-should-open-source-for-real.html&title=Why you should Open-Source for Real" target="_blank"><img src="/images/reddit.png"></a>
    <a href="https://twitter.com/intent/tweet?via=epoberezkin&text=Why%20you%20should%20Open-Source%20for%20Real&hashtags=talk%2Ccoding%2Copen-source&original_referer=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2019-07-10-talk-why-you-should-open-source-for-real.html&url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2019-07-10-talk-why-you-should-open-source-for-real.html" target="_blank"><img src="/images/tweet.png"></a>
    
  </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Locked in the Narrative?</title>
    <link href="https://www.poberezkin.com/posts/2019-05-31-locked-in-the-narrative.html" />
    <id>https://www.poberezkin.com/posts/2019-05-31-locked-in-the-narrative.html</id>
    <published>2019-05-31T00:00:00Z</published>
    <updated>2019-05-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <section class="header">
    <div class="info">
      Posted on
      
        <a href="https://medium.com/@epoberezkin/locked-in-the-narrative-921bc45006dd">May 31, 2019</a>
      
      
        by Evgeny Poberezkin
      
    </div>
    <div class="info">
      
        Tags: <a title="All pages tagged &#39;essay&#39;." href="/tags/essay.html" rel="tag">essay</a>
      
    </div>
  </section>
  <section>
    <p>When we are children, we choose the stories of our future lives. “I will be a cosmonaut.” Or “I will be a doctor”. Our stories are supported by parents — toys fuel our fantasies until they burn out and we move on.</p>
<p>For most of us these stories change many times as we grow up. Few stay fixated on the story to live it, fewer turn out to be happy when they do.</p>
<p>As we become older we continue choosing such stories. “I want to be a manager.” Or “I want to create tools for other engineers.” Or “The people have voted, we must respect it.”</p>
<p>Led by these stories, we often get from being unhappy to being miserable. And the cycle repeats again — we choose a new story to believe in.</p>
<p>We complain about lacking freedom, but the strongest prison is the one we put ourselves in without knowing it exists. We are pressured to make choices all our life. “Will you have tea or coffee?” “What college did you apply to?” “What is your next career step?” “How have you invested your money?”</p>
<p>Making these decisions is important, but when they are not rooted in the reality of who we are and instead based on the stories we chose to believe, we can’t be happy. The best decision you can make, is to not make the decision until it is your own and not led by your current story. But resisting the urge to make the decision is hard — it takes growing up.</p>
<p>To be free we need to remember that most of our ideas about the world and about ourselves are just stories re-told by other people. Very rarely we hear an original story, and when we do, we often just ignore it.</p>
<p>We can discover our own truths about who we are, what we want and to write the story of our life ourselves. Until then, we can follow the opportunities and keep our options open — the story of our life may just write itself.</p>
  </section>
  <section class="links">
    <a href="https://www.reddit.com/submit?url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2019-05-31-locked-in-the-narrative.html&title=Locked in the Narrative?" target="_blank"><img src="/images/reddit.png"></a>
    <a href="https://twitter.com/intent/tweet?via=epoberezkin&text=Locked%20in%20the%20Narrative%3F&hashtags=essay&original_referer=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2019-05-31-locked-in-the-narrative.html&url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2019-05-31-locked-in-the-narrative.html" target="_blank"><img src="/images/tweet.png"></a>
    
  </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Auditing development guidelines in GitHub repos</title>
    <link href="https://www.poberezkin.com/posts/2017-07-12-talk-auditing-development-guidelines-in-github-repositories.html" />
    <id>https://www.poberezkin.com/posts/2017-07-12-talk-auditing-development-guidelines-in-github-repositories.html</id>
    <published>2017-07-12T00:00:00Z</published>
    <updated>2017-07-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <section class="header">
    <div class="info">
      Posted on
      
        <a href="https://skillsmatter.com/skillscasts/10399-auditing-development-guidelines-in-github-repositories">July 12, 2017</a>
      
      
        by Evgeny Poberezkin
      
    </div>
    <div class="info">
      
        Tags: <a title="All pages tagged &#39;talk&#39;." href="/tags/talk.html" rel="tag">talk</a>, <a title="All pages tagged &#39;github&#39;." href="/tags/github.html" rel="tag">github</a>, <a title="All pages tagged &#39;coding&#39;." href="/tags/coding.html" rel="tag">coding</a>, <a title="All pages tagged &#39;open-source&#39;." href="/tags/open-source.html" rel="tag">open-source</a>
      
    </div>
  </section>
  <section>
    <p>This is a <a href="https://skillsmatter.com/skillscasts/10399-auditing-development-guidelines-in-github-repositories">talk at FullStack London 2017</a>.</p>
<p><a href="https://skillsmatter.com/skillscasts/10399-auditing-development-guidelines-in-github-repositories">
<img src="/images/talk2017_2.jpg" alt="Auditing Development Guidelines in GitHub Repositories" width="100%">
</a></p>
<blockquote>
<p>If your organisation has hundreds of code repositories you probably have some guidelines for them: how they are documented, how branches are protected, whether direct commits to master branch are allowed or only PRs should be used and all PRs should be reviewed, whether tests are run and code coverage is reported to PRs, etc.</p>
</blockquote>
<blockquote>
<p>Making sure that those guidelines are followed is a difficult task - even if all team members agree to do so, sometimes we simply forget or don’t have time to implement the necessary changes.</p>
</blockquote>
<blockquote>
<p>Once we’ve agreed on our development guidelines, I was looking for a tool to automate such auditing for our team, so that in the same way as eslint can be used for testing code guidelines based on the rules, we could use this tool to audit our repositories in GitHub organisations. I couldn’t find one so I created it.</p>
</blockquote>
<blockquote>
<p>Meet <a href="https://github.com/MailOnline/gh-lint">gh-lint</a> - a rule-based command-line utility that audits all your GitHub repositories generating results in TAP (Test Anything Protocol) format that can be consumed by <a href="https://github.com/MailOnline/tap-github-issues">tap-github-issues</a> reporter that can create, update and close issues in GitHub repositories.</p>
</blockquote>
  </section>
  <section class="links">
    <a href="https://www.reddit.com/submit?url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2017-07-12-talk-auditing-development-guidelines-in-github-repositories.html&title=Auditing development guidelines in GitHub repos" target="_blank"><img src="/images/reddit.png"></a>
    <a href="https://twitter.com/intent/tweet?via=epoberezkin&text=Auditing%20development%20guidelines%20in%20GitHub%20repos&hashtags=talk%2Cgithub%2Ccoding%2Copen-source&original_referer=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2017-07-12-talk-auditing-development-guidelines-in-github-repositories.html&url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2017-07-12-talk-auditing-development-guidelines-in-github-repositories.html" target="_blank"><img src="/images/tweet.png"></a>
    
      <a href="https://github.com/mailonline/gh-lint" target="_blank"><img src="/images/repo.png"></a>
    
  </section>
</article>
]]></summary>
</entry>
<entry>
    <title>WTF is Reactive Programming</title>
    <link href="https://www.poberezkin.com/posts/2017-04-28-talk-wtf-is-reactive-programming.html" />
    <id>https://www.poberezkin.com/posts/2017-04-28-talk-wtf-is-reactive-programming.html</id>
    <published>2017-04-28T00:00:00Z</published>
    <updated>2017-04-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <section class="header">
    <div class="info">
      Posted on
      
        April 28, 2017
      
      
        by Evgeny Poberezkin
      
    </div>
    <div class="info">
      
        Tags: <a title="All pages tagged &#39;talk&#39;." href="/tags/talk.html" rel="tag">talk</a>, <a title="All pages tagged &#39;reactive&#39;." href="/tags/reactive.html" rel="tag">reactive</a>
      
    </div>
  </section>
  <section>
    <p>This is a <a href="https://www.infoq.com/presentations/reactive-programming-evolution/">talk at Progscon 2017</a>.</p>
<p>Slides are available in <a href="https://www.slideshare.net/epoberezkin/wtf-is-reactive-programming-75512905">slideshare</a>.</p>
<p><a href="https://www.infoq.com/presentations/reactive-programming-evolution/">
<img src="/images/talk2017_1.png" alt="WTF is Reactive Programming" width="100%">
</a></p>
<blockquote>
<p>This is a journey through the evolution of both the definition and implementations of Reactive Programming and how they have been converging in a quest to make building responsive applications a sane process.</p>
</blockquote>
<blockquote>
<p>We are still at the point where there is no complete consensus on what a reactive application is; I will explore how this consensus is evolving and what problems it brings.</p>
</blockquote>
<blockquote>
<p>I am going to talk about the past, present and possible futures of reactive programming and how you can survive it all.</p>
</blockquote>
  </section>
  <section class="links">
    <a href="https://www.reddit.com/submit?url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2017-04-28-talk-wtf-is-reactive-programming.html&title=WTF is Reactive Programming" target="_blank"><img src="/images/reddit.png"></a>
    <a href="https://twitter.com/intent/tweet?via=epoberezkin&text=WTF%20is%20Reactive%20Programming&hashtags=talk%2Creactive&original_referer=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2017-04-28-talk-wtf-is-reactive-programming.html&url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2017-04-28-talk-wtf-is-reactive-programming.html" target="_blank"><img src="/images/tweet.png"></a>
    
  </section>
</article>
]]></summary>
</entry>
<entry>
    <title>TDD doesn’t work… Maybe CDD would?</title>
    <link href="https://www.poberezkin.com/posts/2017-02-19-tdd-doesnt-work-maybe-cdd-would.html" />
    <id>https://www.poberezkin.com/posts/2017-02-19-tdd-doesnt-work-maybe-cdd-would.html</id>
    <published>2017-02-19T00:00:00Z</published>
    <updated>2017-02-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <section class="header">
    <div class="info">
      Posted on
      
        <a href="https://medium.com/@epoberezkin/tdd-doesnt-work-maybe-cdd-would-1fd756d2ca4b">February 19, 2017</a>
      
      
        by Evgeny Poberezkin
      
    </div>
    <div class="info">
      
        Tags: <a title="All pages tagged &#39;tests&#39;." href="/tags/tests.html" rel="tag">tests</a>, <a title="All pages tagged &#39;coding&#39;." href="/tags/coding.html" rel="tag">coding</a>
      
    </div>
  </section>
  <section>
    <p>Test Driven Development existed long before the term itself. It’s been “rediscovered” and popularised by Kent Beck, the creator of Extreme Programming. He wrote on Quora:</p>
<p><img src="/images/tdd1.png" alt="Kent Beck on Quora" title="...How else could you program?"></p>
<p>The complexity of software systems since those ancient times has evolved to a point when it is no longer possible to define the expected application behaviours in as simple terms as “the output tape you expect”.</p>
<p>The software development community is split, with opinions ranging from “<a href="https://dhh.dk/2014/tdd-is-dead-long-live-testing.html">TDD is dead. Long live testing</a>” (by <a href="https://dhh.dk/">David Heinemeier Hansson</a>, the creator of Ruby on Rails and the founder &amp; CTO of Basecamp):</p>
<blockquote>
<p><em>Test-first fundamentalism is like abstinence-only sex ed: An unrealistic, ineffective morality campaign for self-loathing and shaming.</em></p>
</blockquote>
<p>to “<a href="https://dzone.com/articles/whats-wrong-test-driven">What’s Wrong with Test-Driven Development (TDD)</a>”:</p>
<blockquote>
<p><em>[TDD] is a powerful methodology that helped me combat “analysis paralysis”, create robust, maintainable code and there’s the added benefit of the resulting unit tests which provide a safety-net against regression bugs.</em></p>
</blockquote>
<p>The latter one says that TDD is nearly perfect, we are simply doing it wrong, being scared to leave our comfort zones and to watch our tests fail… I wish it were as simple as that.</p>
<p><img src="/images/tdd2.png" alt="If it's so simple, why doesn't everybody doing it?" width="100%"></p>
<p>Really, why?</p>
<p>There is also no consensus about how software should be designed, even among developers who preach and practice TDD. Some moderate believers say that <a href="https://vladikk.com/2016/01/22/tdd-what-went-wrong/">TDD is NOT “Test Driven Design”</a>, that it should be used together with Domain Driven Design and call for reformation into TDD 2.0. Zealots insist that “<a href="https://dzone.com/articles/whats-wrong-test-driven">TDD is a design methodology - the unit tests are just a by-product of the process</a>”.</p>
<hr />
<p>Ok, let’s step back from the heat of the battle and ask ourselves what objectives we want to achieve, with or without TDD?</p>
<p>At a high level, software developers in both camps want to have lower costs of creating and using software. It means:</p>
<ol type="1">
<li>Reducing the number of bugs</li>
<li>Making changes with minimal regressions</li>
<li>Releasing changes with lower risk of failures</li>
<li>Maintaining code easily and running tests quickly</li>
<li>etc.</li>
</ol>
<p>We definitely need team-wide processes for the development project success. <a href="http://blog.cleancoder.com/uncle-bob/2014/06/17/IsTddDeadFinalThoughts.html">Uncle Bob writes</a> that if only a part of the team does TDD and another one doesn’t it will lead to divorce. But do we really need an industry-wide standard development process to achieve those objectives?</p>
<p>Software development projects are as diverse as businesses. As the complexity of the businesses was growing they in many cases transitioned from process management to <a href="https://en.wikipedia.org/wiki/Management_by_objectives">management by objectives</a>.</p>
<p>So what metrics in software development should we manage to achieve a higher level objective of reducing the costs?</p>
<p>I can see a strong inverse correlation between number of costly issues (bugs, regressions) and code coverage. That’s exactly the reason why a majority of popular open-source projects display this metric. A higher code coverage is usually seen as a higher reliability of the code, both by developers who follow TDD and those who don’t.</p>
<p><img src="/images/tdd3.png" alt="inverse correlation of bugs and code coverage" title="It's only a picture for 'inverse correlation', not the result of some research" width="100%"></p>
<hr />
<p>My development process aims to achieve an effective design and high code coverage. It could be called <strong>Coverage Driven Development</strong> and consists of three phases:</p>
<h3 id="plan-design">1. Plan &amp; Design</h3>
<p>I make a list of features and requirements for a both minimal and viable implementation that can be given to the end-users. The plan allows to foresee external dependencies and all requirements that the application should satisfy, and the design should be coordinated with this plan.</p>
<p>At this point there are no (or very few) external constraints to help structure the code. So I quickly iterate code to figure out how basic models, APIs, functions and classes should look. I am not worried if my code even works, and I usually don’t write tests during this phase, they only hinder the understanding of what the right design is.</p>
<p>Iterating code allows to avoid unnecessary intermediary abstractions that often plague TDD-written code and achieves a robust foundation of code structure. And it helps to transfer a visual image of the system that only exists in the the sketches or in the mind into the code and see if this picture still makes sense and whether it supports the whole plan. If it does, I go to the next phase, in not - I continue iterating the code until it does. Depending on the complexity of the system this phase can take from a couple of hours to a couple of days, or even weeks in a really big project.</p>
<h3 id="develop">2. Develop</h3>
<p>Before development continues, I write tests for all the code written in design phase to achieve code coverage of 95%+.</p>
<p>Each feature in the plan (that continues to evolve) requires some design thinking so I continue rapid code iteration and refactoring and in most cases I write tests only after code, getting to 95%+ code coverage before going to the next feature.</p>
<p>Depending on your quality requirements and the code size you can set a higher threshold for code coverage in your project, but the cost or writing and maintaining the tests grows very quickly as you approach 100%.</p>
<h3 id="maintain">3. Maintain</h3>
<p>This phase starts long before MVP is complete. In case when bugs are discovered or some simple changes should be made I almost always write a failing test BEFORE writing any code, exactly as TDD instructs. In this phase it just makes more sense. During the implementation of the fix I often discover some other issues and do some refactoring, but I don’t always write tests for them as I fix them - switching context damages focus and speed. Once the implementation is done I write additional tests to maintain code coverage at 95%+ level.</p>
<p><img src="/images/tdd4.png" alt="Coverage Driven Development phases" width="100%"></p>
<hr />
<p>This is not a linear process, it is a cycle that repeats multiple times, even before the application reaches the end-users. Also these phases are not strictly separated in time, they are more like “modes of operation” that can overlap.</p>
<p>The whole development process is driven by a single objective quality metric - code coverage. Uncle Bob sees TDD as a pre-requisite to achieving high code coverage (see “<a href="http://blog.cleancoder.com/uncle-bob/2014/06/17/IsTddDeadFinalThoughts.html#a-team-divided">Is TDD Dead?</a>”). But it’s not the case, you can maintain high code coverage without practicing TDD all the time.</p>
<p>You just need to follow several simple steps:</p>
<ol type="1">
<li>Implement code coverage measurement as early as possible.</li>
<li>Make the measurement run on every build.</li>
<li>Make coverage visible in your source code repository.</li>
<li>Make coverage change visible in PRs.</li>
<li>Only merge PRs if they increase the coverage or if it is already higher than the threshold agreed with the team for the project.</li>
</ol>
<p>Code coverage as a metric is not perfect, and I often hear the following criticism:</p>
<ol type="1">
<li>“It depends on code style”. It is true, but it does not reduce the efficiency of code coverage as quality metric. Adopting consistent code style for the team makes code coverage measurement consistent as well.</li>
<li>“100% coverage does not guarantee the absence of bugs”. It is also true, but neither does following TDD. No sufficiently complex system is free of bugs. While the absence of bugs is theoretically possible to achieve, and even possible to prove in some cases, it is prohibitively expensive. On the other hand maintaining high code coverage dramatically reduces the number of bugs and the probability of regressions.</li>
</ol>
<hr />
<p>If you are not using code coverage as part of your development process, it’s definitely worth trying. If nothing else, it will give you an increased satisfaction from writing tests. And all developers seem to agree that we should write tests to reduce the cost of software.</p>
<p><img src="/images/tdd5.png" alt="Acheived 100% code coverage" title="… but the bug is still there" max-width="100%"></p>
  </section>
  <section class="links">
    <a href="https://www.reddit.com/submit?url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2017-02-19-tdd-doesnt-work-maybe-cdd-would.html&title=TDD doesn’t work… Maybe CDD would?" target="_blank"><img src="/images/reddit.png"></a>
    <a href="https://twitter.com/intent/tweet?via=epoberezkin&text=TDD%20doesn%E2%80%99t%20work%E2%80%A6%20Maybe%20CDD%20would%3F&hashtags=tests%2Ccoding&original_referer=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2017-02-19-tdd-doesnt-work-maybe-cdd-would.html&url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2017-02-19-tdd-doesnt-work-maybe-cdd-would.html" target="_blank"><img src="/images/tweet.png"></a>
    
  </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Eval is evil, but not why you may think</title>
    <link href="https://www.poberezkin.com/posts/2016-09-10-eval-is-evil-but-not-why-you-may-think.html" />
    <id>https://www.poberezkin.com/posts/2016-09-10-eval-is-evil-but-not-why-you-may-think.html</id>
    <published>2016-09-10T00:00:00Z</published>
    <updated>2016-09-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <section class="header">
    <div class="info">
      Posted on
      
        <a href="https://medium.com/mail-online/eval-is-evil-but-not-why-you-may-think-25961f9b01bb">September 10, 2016</a>
      
      
        by Evgeny Poberezkin
      
    </div>
    <div class="info">
      
        Tags: <a title="All pages tagged &#39;javascript&#39;." href="/tags/javascript.html" rel="tag">javascript</a>, <a title="All pages tagged &#39;coding&#39;." href="/tags/coding.html" rel="tag">coding</a>
      
    </div>
  </section>
  <section>
    <p>I have been hearing the mantra “eval is evil” for many years by now and none of the arguments presented to support it made any sense until very recently. Let’s explore the myths of eval, uncover the real evil behind it and find out the alternative way to reap eval’s benefits without its evilness.</p>
<p>All the code examples below are available in <a href="https://github.com/epoberezkin/eval-is-evil">eval-is-evil</a> repository.</p>
<h2 id="myth-1-eval-is-bad-for-performance">Myth #1: Eval Is Bad For Performance</h2>
<p>This statement is usually supported by some trivial example like this:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> foo <span class="op">=</span> <span class="pp">eval</span>(<span class="st">&#39;bar.&#39;</span> <span class="op">+</span> x)<span class="op">;</span></span></code></pre></div>
<p>This code can be used to access bar object property which name is stored in the variable x. Instead, the author would argue, you should use the code below to access such property:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> foo <span class="op">=</span> bar[x]<span class="op">;</span></span></code></pre></div>
<p>Although this way of using eval indeed reduces execution speed, I cannot imagine any JavaScript developer, however unexperienced, who would think of using eval in this case.</p>
<p>Let’s consider another example that also involves property accesses but <strong>where using <em>eval</em> dramatically improves performance</strong>.</p>
<p>We have some nested object and we need to define some transformation of this object to a shallow object. We want to define such transformation using configuration rather than just writing code. It can be preferable if we want to be able to dynamically change such configuration and in many other scenarios. So if our nested object looks something like this:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> source <span class="op">=</span> {</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">services</span><span class="op">:</span> {</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">db</span><span class="op">:</span> {</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>      <span class="dt">host</span><span class="op">:</span> <span class="st">&#39;db.example.com&#39;</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    }<span class="op">,</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">audit</span><span class="op">:</span> {</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>      <span class="dt">host</span><span class="op">:</span> <span class="st">&#39;audit.example.com&#39;</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span></code></pre></div>
<p>and the shallow object we want to have should look this way:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> result <span class="op">=</span> {</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">db</span><span class="op">:</span> <span class="st">&#39;db.example.com&#39;</span><span class="op">,</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">audit</span><span class="op">:</span> <span class="st">&#39;audit.example.com&#39;</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span></code></pre></div>
<p>the transformation from nested to shallow object could look as this one:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> transformation <span class="op">=</span> {</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">db</span><span class="op">:</span> <span class="st">&#39;/services/db/host&#39;</span><span class="op">,</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">audit</span><span class="op">:</span> <span class="st">&#39;/services/audit/host&#39;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span></code></pre></div>
<p>By the way, the format of the string defining the location of the data in the nested object is called <a href="https://tools.ietf.org/html/rfc6901">JSON pointer</a>.</p>
<p>Ok, so if we had such transformation, how would we write the code to transform a nested object to a shallow one? One approach is to simply iterate properties in the transformation and generate the resulting object:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">transform</span>(source) {</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">var</span> result <span class="op">=</span> {}<span class="op">;</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> (<span class="kw">var</span> key <span class="kw">in</span> transformation) {</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">var</span> path <span class="op">=</span> transformation[key]<span class="op">;</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">var</span> segments <span class="op">=</span> path<span class="op">.</span><span class="fu">split</span>(<span class="st">&#39;/&#39;</span>)<span class="op">;</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">var</span> data <span class="op">=</span> source<span class="op">;</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> (<span class="kw">var</span> i<span class="op">=</span><span class="dv">1</span><span class="op">;</span> i<span class="op">&lt;</span>segments<span class="op">.</span><span class="at">length</span><span class="op">;</span> i<span class="op">++</span>) {</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>      data <span class="op">=</span> data <span class="op">&amp;&amp;</span> data[segments[i]]<span class="op">;</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>    result[key] <span class="op">=</span> data<span class="op">;</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> result<span class="op">;</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Although this code works, it is not very efficient if the transformation has to be performed on the server many times.</p>
<p>Another approach would be to <strong>generate</strong> the code that performs the transformation and convert this code into a function using eval (or Function constructor):</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> code <span class="op">=</span> <span class="st">&#39;return { &#39;</span><span class="op">;</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> (<span class="kw">var</span> key <span class="kw">in</span> transformation) {</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">var</span> path <span class="op">=</span> transformation[key]<span class="op">;</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">var</span> segments <span class="op">=</span> path<span class="op">.</span><span class="fu">split</span>(<span class="st">&#39;/&#39;</span>)<span class="op">;</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">var</span> data <span class="op">=</span> <span class="st">&#39;source&#39;</span><span class="op">;</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">var</span> expr <span class="op">=</span> data<span class="op">;</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> (<span class="kw">var</span> i<span class="op">=</span><span class="dv">1</span><span class="op">;</span> i<span class="op">&lt;</span>segments<span class="op">.</span><span class="at">length</span><span class="op">;</span> i<span class="op">++</span>) {</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>    data <span class="op">+=</span> <span class="st">&#39;.&#39;</span> <span class="op">+</span> segments[i]<span class="op">;</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>    expr <span class="op">+=</span> <span class="st">&#39; &amp;&amp; &#39;</span> <span class="op">+</span> data<span class="op">;</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>  code <span class="op">+=</span> key <span class="op">+</span> <span class="st">&#39;: &#39;</span> <span class="op">+</span> expr <span class="op">+</span> <span class="st">&#39;, &#39;</span><span class="op">;</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>code <span class="op">+=</span> <span class="st">&#39;};&#39;</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> transform <span class="op">=</span> <span class="pp">eval</span>(<span class="st">&#39;(function(source) { &#39;</span> <span class="op">+</span> code <span class="op">+</span> <span class="st">&#39; })&#39;</span>)<span class="op">;</span></span></code></pre></div>
<p>The last line can be replaced with:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> transform <span class="op">=</span> <span class="kw">new</span> <span class="bu">Function</span>(<span class="st">&#39;source&#39;</span><span class="op">,</span> code)<span class="op">;</span></span></code></pre></div>
<p>For our transformation the generated function will be:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> (source) {</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> {</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">db</span><span class="op">:</span> source <span class="op">&amp;&amp;</span> source<span class="op">.</span><span class="at">services</span> <span class="op">&amp;&amp;</span> source<span class="op">.</span><span class="at">services</span><span class="op">.</span><span class="at">db</span> <span class="op">&amp;&amp;</span> source<span class="op">.</span><span class="at">services</span><span class="op">.</span><span class="at">db</span><span class="op">.</span><span class="at">host</span><span class="op">,</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">audit</span><span class="op">:</span> source <span class="op">&amp;&amp;</span> source<span class="op">.</span><span class="at">services</span> <span class="op">&amp;&amp;</span> source<span class="op">.</span><span class="at">services</span><span class="op">.</span><span class="at">audit</span> <span class="op">&amp;&amp;</span> source<span class="op">.</span><span class="at">services</span><span class="op">.</span><span class="at">audit</span><span class="op">.</span><span class="at">host</span><span class="op">,</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>  }<span class="op">;</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>This dynamically generated code will execute many times faster than the first example where the transformation is performed using a loop. Creating this function takes some execution time but it happens only once.</p>
<p>This example shows that you can substantially improve the performance of your application using dynamic code generation and eval. The same approach is used for generating model accessor methods (get, set, etc.) in <a href="https://github.com/milojs/milo">milo.js</a> framework.</p>
<h2 id="myth-2-eval-is-security-risk">Myth #2: Eval Is Security Risk</h2>
<p>This statement probably assumes that you would receive JavaScript code in the request to the server and execute it using eval:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>app<span class="op">.</span><span class="fu">get</span>(<span class="st">&#39;/execute&#39;</span><span class="op">,</span> <span class="kw">function</span>(req<span class="op">,</span> res) {</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>  res<span class="op">.</span><span class="fu">send</span>(<span class="pp">eval</span>(req<span class="op">.</span><span class="at">body</span><span class="op">.</span><span class="at">code</span>))<span class="op">;</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>})<span class="op">;</span></span></code></pre></div>
<p>The code above indeed has some problems. If <code>req.body.code</code> were <code>process.exit(1)</code> the application would exit with error. Some worse things may easily happen too. But I cannot see how anybody could write code like this. User input is usually sanitised, particularly in cases when this input is used for code execution/generation.</p>
<p>Let’s consider another example. Say, we have a mass mailing application that sends the messages to the list of recipients and we require that the message that the user submits is a template using available fields from a recipient record:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> recipients <span class="op">=</span> [</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>  { <span class="dt">first_name</span><span class="op">:</span> <span class="st">&#39;John&#39;</span><span class="op">,</span> <span class="dt">last_name</span><span class="op">:</span> <span class="st">&#39;Smith&#39;</span> }<span class="op">,</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>  { <span class="dt">first_name</span><span class="op">:</span> <span class="st">&#39;Jane&#39;</span><span class="op">,</span> <span class="dt">last_name</span><span class="op">:</span> <span class="st">&#39;Doe&#39;</span> }</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>]<span class="op">;</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> messageTemplate <span class="op">=</span> <span class="st">&#39;Hello {{first_name}} {{last_name}}!&#39;</span><span class="op">;</span></span></code></pre></div>
<p>We could create the actual messages to all users in a loop:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> messages <span class="op">=</span> recipients<span class="op">.</span><span class="fu">map</span>(createMessage)<span class="op">;</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">createMessage</span>(recipient) {</span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> messageTemplate<span class="op">.</span><span class="fu">replace</span>(<span class="ss">/{{</span><span class="sc">([a-z_]+)</span><span class="ss">}}/ig</span><span class="op">,</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">function</span>(match<span class="op">,</span> key) {</span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> recipients[key]<span class="op">;</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>  )<span class="op">;</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>The code above will create all the messages we need, but there is a much faster way to achieve it. We can generate the function createMessage. It doesn’t have any security implications even though messageTemplate is received from the user:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> code <span class="op">=</span> <span class="st">&#39;return &quot;&#39;</span><span class="op">;</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>code <span class="op">+=</span> messageTemplate<span class="op">.</span><span class="fu">replace</span>(<span class="ss">/{{</span><span class="sc">([a-z_]+)</span><span class="ss">}}/ig</span><span class="op">,</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">function</span>(match<span class="op">,</span> key) {</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="st">&#39;&quot; + data.&#39;</span> <span class="op">+</span> key <span class="op">+</span> <span class="st">&#39; + &quot;&#39;</span><span class="op">;</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>)<span class="op">;</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>code <span class="op">+=</span> <span class="st">&#39;&quot;;&#39;</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> createMessage <span class="op">=</span> <span class="pp">eval</span>(<span class="st">&#39;(function(data) { &#39;</span> <span class="op">+</span> code <span class="op">+</span> <span class="st">&#39; })&#39;</span>)<span class="op">;</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a><span class="co">// or new Function(&#39;data&#39;, code);</span></span></code></pre></div>
<p>In a few lines of code we have created a super-simple “templating engine” that compiles templates into JavaScript functions.</p>
<p>The template <code>"Hello {{first_name}} {{last_name}}!"</code> will be compiled to:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span>(data) {</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="st">&quot;Hello &quot;</span> <span class="op">+</span> data<span class="op">.</span><span class="at">first_name</span> <span class="op">+</span> <span class="st">&quot; &quot;</span> <span class="op">+</span> data<span class="op">.</span><span class="at">last_name</span> <span class="op">+</span> <span class="st">&quot;!&quot;</span><span class="op">;</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Executing the function above is hundreds (if not thousands) times faster than the code that does not use eval. Creating this function is always safe — if some unsafe code is used inside curly braces it will not be executed because the regular expression won’t match. For example, the template</p>
<pre><code>&quot;Hello {{process.exit(1)}}!&quot;</code></pre>
<p>will generate this function:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span>(data) {</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="st">&quot;Hello {{process.exit(1)}}!&quot;</span><span class="op">;</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>i.e. an unsafe interpolation was not replaced with the code.</p>
<p>The same approach to compiling templates into JavaScript functions is used in the fastest and the most concise <a href="https://github.com/olado/doT">templating engine doT</a>.</p>
<h2 id="myth-3-eval-is-difficult-to-debug">Myth #3: Eval Is Difficult To Debug</h2>
<p>I am not sure where this is coming from. The code passed to eval is a normal JavaScript code — you can add breakpoints, inspect variables, etc. Debugging code passed to eval or to Function constructor is not that much different from debugging any JavaScript code, you just need to either format it during code generation or to use <a href="https://github.com/beautify-web/js-beautify">js-beautify</a> package.</p>
<p>Let’s consider one more example when you want to define a super-simple schema for your object (not <a href="http://json-schema.org/">JSON-schema</a>!) and validate it according to this schema:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> schema <span class="op">=</span> {</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">foo</span><span class="op">:</span> <span class="st">&#39;identifier&#39;</span><span class="op">,</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">bar</span><span class="op">:</span> <span class="st">&#39;date&#39;</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span></code></pre></div>
<p>We assume here that all properties should be strings and they should match some known formats (<code>identifier</code> and <code>date</code> in this case).</p>
<p>Our formats can be defined as regular expressions:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> formats <span class="op">=</span> {</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">identifier</span><span class="op">:</span> <span class="ss">/</span><span class="sc">^[a-z_$][a-z0-9_$]*$</span><span class="ss">/i</span><span class="op">,</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">date</span><span class="op">:</span> <span class="ss">/</span><span class="sc">^\d{2}\/\d{2}\/\d{4}$</span><span class="ss">/</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span></code></pre></div>
<p>The data that we want to validate:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> validData <span class="op">=</span> {</span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">foo</span><span class="op">:</span> <span class="st">&#39;abc&#39;</span><span class="op">,</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">bar</span><span class="op">:</span> <span class="st">&#39;15/09/2016&#39;</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> invalidData <span class="op">=</span> {</span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a>  <span class="dt">foo</span><span class="op">:</span> <span class="st">&#39;1&#39;</span><span class="op">,</span></span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a>  <span class="dt">bar</span><span class="op">:</span> <span class="st">&#39;15-09-2016&#39;</span></span>
<span id="cb19-9"><a href="#cb19-9" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span></code></pre></div>
<p>We can validate the data by iterating the properties in the schema and checking the data properties against the formats:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">validate</span>(schema<span class="op">,</span> data) {</span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> (<span class="kw">var</span> prop <span class="kw">in</span> schema) {</span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">var</span> value <span class="op">=</span> data[prop]<span class="op">;</span></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> (<span class="kw">typeof</span> value <span class="op">!=</span> <span class="st">&#39;string&#39;</span>) <span class="cf">return</span> <span class="kw">false</span><span class="op">;</span></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">var</span> pattern <span class="op">=</span> formats[schema[prop]]<span class="op">;</span></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> (<span class="op">!</span>pattern<span class="op">.</span><span class="fu">test</span>(value)) <span class="cf">return</span> <span class="kw">false</span><span class="op">;</span></span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="kw">true</span><span class="op">;</span></span>
<span id="cb20-9"><a href="#cb20-9" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>An alternative approach is to generate the code of the validating function from the schema and create this function using <em>eval</em>:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> code <span class="op">=</span> <span class="st">&#39;&#39;</span><span class="op">;</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> (<span class="kw">var</span> prop <span class="kw">in</span> schema) {</span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">var</span> data <span class="op">=</span> <span class="st">&#39;data.&#39;</span> <span class="op">+</span> prop<span class="op">;</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a>  code <span class="op">+=</span> <span class="st">&#39;if (typeof &#39;</span> <span class="op">+</span> data <span class="op">+</span> <span class="st">&#39; != &quot;string&quot;) return false;&#39;</span><span class="op">;</span></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a>  code <span class="op">+=</span> <span class="st">&#39;if (!formats.&#39;</span> <span class="op">+</span> schema[prop] <span class="op">+</span> <span class="st">&#39;.test(&#39;</span></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a>            <span class="op">+</span> data <span class="op">+</span> <span class="st">&#39;)) return false;&#39;</span><span class="op">;</span></span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb21-8"><a href="#cb21-8" aria-hidden="true" tabindex="-1"></a>code <span class="op">+=</span> <span class="st">&#39;return true;&#39;</span><span class="op">;</span></span>
<span id="cb21-9"><a href="#cb21-9" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> validate <span class="op">=</span> <span class="pp">eval</span>(<span class="st">&#39;(function(data) { &#39;</span> <span class="op">+</span> code <span class="op">+</span> <span class="st">&#39; })&#39;</span>)<span class="op">;</span></span></code></pre></div>
<p>Our simple schema above would “compile” to this function:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> (data) {</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (<span class="kw">typeof</span> data<span class="op">.</span><span class="at">foo</span> <span class="op">!=</span> <span class="st">&quot;string&quot;</span>) <span class="cf">return</span> <span class="kw">false</span><span class="op">;</span></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (<span class="op">!</span>formats<span class="op">.</span><span class="at">identifier</span><span class="op">.</span><span class="fu">test</span>(data<span class="op">.</span><span class="at">foo</span>)) <span class="cf">return</span> <span class="kw">false</span><span class="op">;</span></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (<span class="kw">typeof</span> data<span class="op">.</span><span class="at">bar</span> <span class="op">!=</span> <span class="st">&quot;string&quot;</span>) <span class="cf">return</span> <span class="kw">false</span><span class="op">;</span></span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (<span class="op">!</span>formats<span class="op">.</span><span class="at">date</span><span class="op">.</span><span class="fu">test</span>(data<span class="op">.</span><span class="at">bar</span>)) <span class="cf">return</span> <span class="kw">false</span><span class="op">;</span></span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="kw">true</span><span class="op">;</span></span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>This approach to data validation when the schema is compiled to a JavaScript function is used in several JSON-Schema validators, including the fastest one — <a href="https://github.com/epoberezkin/ajv">Ajv</a> that I have created.</p>
<h2 id="so-why-eval-is-evil">So Why Eval Is Evil?</h2>
<p><em>Eval</em> can dramatically improve performance, it doesn’t create security risks if used properly and it can be debugged without any problems. Why it should never be used then?</p>
<p>The problem with eval is that whenever eval creates a function, it becomes a closure that retains access to ALL variables in the current and in ALL parent scopes, regardless whether they are used by this closure or not. If you debug <code>validate</code> function from the third example in the chrome inspector you will see it:</p>
<p><img src="/images/eval1.png" alt="eval closure" title="eval creates big closure"></p>
<p>Unlike <em>eval</em>, <em>Function</em> constructor doesn’t have this problem, the function that it returns is created in the global scope and it is not a closure.</p>
<p>Vyacheslav Egorov <a href="https://mrale.ph/blog/2012/09/23/grokking-v8-closures-for-fun.html">wrote about it</a> 4 years ago and it is still the case today — eval is not optimised in node.js and browsers in the way normal closures are, that only retain access to the scope variables they use.</p>
<p>This issue has been pointed out by <a href="https://github.com/rf">Russ Frank</a> who has recently submitted a <a href="https://github.com/epoberezkin/ajv/pull/293">PR to Ajv</a> that replaced <em>eval</em> with <em>Function</em> constructor to reduce memory utilisation.</p>
<p>In all examples but the last one we could easily replace <em>eval</em> with <em>new Function</em>. In the last example though the generated function should be a closure — it needs access to <em>formats</em> that are defined in the parent scope. So if we simply use <em>Function</em> constructor in the same way as before it won’t work. Instead we can do this:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> createValidate <span class="op">=</span> <span class="kw">new</span> <span class="bu">Function</span>(<span class="st">&#39;formats&#39;</span><span class="op">,</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a>                       <span class="st">&#39;return function(data) { &#39;</span> <span class="op">+</span> code <span class="op">+</span> <span class="st">&#39; }&#39;</span>)<span class="op">;</span></span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> validate <span class="op">=</span> <span class="fu">createValidate</span>(formats)<span class="op">;</span></span></code></pre></div>
<p>As you can see <em>Function</em> constructor is used to create a function that returns a closure that has access to <em>formats</em>, but not to anything else:</p>
<p><img src="/images/eval2.png" alt="Function constructor closure" title="Function constructor allows to control closure"></p>
<p>Although this code is more verbose than with <em>eval</em> it doesn’t have the issue that makes <em>eval</em> really evil — <strong>retaining access to everything in all scopes</strong> from the current to the global.</p>
<p>So while code generation can be used to achieve serious performance benefits, direct calls to <em>eval</em> should be avoided. Instead <em>Function</em> constructor (or at least <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval">indirect calls</a> to <em>eval</em>) should be used.</p>
  </section>
  <section class="links">
    <a href="https://www.reddit.com/submit?url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2016-09-10-eval-is-evil-but-not-why-you-may-think.html&title=Eval is evil, but not why you may think" target="_blank"><img src="/images/reddit.png"></a>
    <a href="https://twitter.com/intent/tweet?via=epoberezkin&text=Eval%20is%20evil%2C%20but%20not%20why%20you%20may%20think&hashtags=javascript%2Ccoding&original_referer=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2016-09-10-eval-is-evil-but-not-why-you-may-think.html&url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2016-09-10-eval-is-evil-but-not-why-you-may-think.html" target="_blank"><img src="/images/tweet.png"></a>
    
      <a href="https://github.com/epoberezkin/eval-is-evil" target="_blank"><img src="/images/repo.png"></a>
    
  </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Batch API requests with JSONScript</title>
    <link href="https://www.poberezkin.com/posts/2016-07-13-talk-batch-execution-existing-endpoints-services-jsonscript.html" />
    <id>https://www.poberezkin.com/posts/2016-07-13-talk-batch-execution-existing-endpoints-services-jsonscript.html</id>
    <published>2016-07-13T00:00:00Z</published>
    <updated>2016-07-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <section class="header">
    <div class="info">
      Posted on
      
        <a href="https://skillsmatter.com/skillscasts/8395-batch-execution-of-existing-endpoints-and-services-with-jsonscript">July 13, 2016</a>
      
      
        by Evgeny Poberezkin
      
    </div>
    <div class="info">
      
        Tags: <a title="All pages tagged &#39;talk&#39;." href="/tags/talk.html" rel="tag">talk</a>, <a title="All pages tagged &#39;javascript&#39;." href="/tags/javascript.html" rel="tag">javascript</a>, <a title="All pages tagged &#39;open-source&#39;." href="/tags/open-source.html" rel="tag">open-source</a>
      
    </div>
  </section>
  <section>
    <p>This is a <a href="https://skillsmatter.com/skillscasts/8395-batch-execution-of-existing-endpoints-and-services-with-jsonscript">talk at FullStack London 2016</a>.</p>
<p><a href="https://skillsmatter.com/skillscasts/8395-batch-execution-of-existing-endpoints-and-services-with-jsonscript">
<img src="/images/talk2016.jpg" alt="Batch API requests with JSONScript" width="100%">
</a></p>
<blockquote>
<p>A very common situation in web development: you need to make multiple requests, often with some conditions and logic between calls, to get the required result.</p>
</blockquote>
<blockquote>
<p>It can be achieved in three ways:</p>
</blockquote>
<blockquote>
<ol type="1">
<li>Sending multiple requests to the server and implementing all the processing logic in the client. The advantage of this approach is that the server remains unchanged and the client can easily change the logic and flow of requests. The disadvantage is the latency and the traffic - each request should travel via the network.</li>
<li>Implementing additional methods/endpoints/parameters in the server. The advantage of this approach is that the client has to make only one request. The disadvantage is that it requires changing the server (= coding + testing + documenting + deploying + monitoring + supporting…). When it is possible, it inevitably leads to the growing complexity of the remote system as more and more specialised methods/APIs are added to it.</li>
<li>Implement batch endpoints, e.g. using JSON RPC standard. While they allows to execute multiple calls in a single HTTP request, it doesn’t allow to implement any logic between the calls.</li>
</ol>
</blockquote>
<blockquote>
<p><a href="https://www.jsonscript.org/">JSONScript</a> is a simple tool that allows to create “a batch endpoint on steroids” - server-side scripted execution of existing endpoints and services.</p>
</blockquote>
<blockquote>
<p>It is currently implemented in express middleware that allows to add JSONScript batch endpoint in a single line of code.</p>
</blockquote>
  </section>
  <section class="links">
    <a href="https://www.reddit.com/submit?url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2016-07-13-talk-batch-execution-existing-endpoints-services-jsonscript.html&title=Batch API requests with JSONScript" target="_blank"><img src="/images/reddit.png"></a>
    <a href="https://twitter.com/intent/tweet?via=epoberezkin&text=Batch%20API%20requests%20with%20JSONScript&hashtags=talk%2Cjavascript%2Copen-source&original_referer=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2016-07-13-talk-batch-execution-existing-endpoints-services-jsonscript.html&url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2016-07-13-talk-batch-execution-existing-endpoints-services-jsonscript.html" target="_blank"><img src="/images/tweet.png"></a>
    
      <a href="https://github.com/JSONScript/jsonscript" target="_blank"><img src="/images/repo.png"></a>
    
  </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Validating data with JSON-schema</title>
    <link href="https://www.poberezkin.com/posts/2016-03-03-validating-data-with-json-schema.html" />
    <id>https://www.poberezkin.com/posts/2016-03-03-validating-data-with-json-schema.html</id>
    <published>2016-03-03T00:00:00Z</published>
    <updated>2016-03-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <section class="header">
    <div class="info">
      Posted on
      
        March  3, 2016
      
      
        by Evgeny Poberezkin
      
    </div>
    <div class="info">
      
        Tags: <a title="All pages tagged &#39;json-schema&#39;." href="/tags/json-schema.html" rel="tag">json-schema</a>, <a title="All pages tagged &#39;tutorial&#39;." href="/tags/tutorial.html" rel="tag">tutorial</a>, <a title="All pages tagged &#39;coding&#39;." href="/tags/coding.html" rel="tag">coding</a>, <a title="All pages tagged &#39;ajv&#39;." href="/tags/ajv.html" rel="tag">ajv</a>
      
    </div>
  </section>
  <section>
    <p>Tutsplus.com published my <a href="https://code.tutsplus.com/tutorials/validating-data-with-json-schema-part-1--cms-25343">2 part tutorial</a> on how to use JSON-schemas and also about some other related stuff:</p>
<ul>
<li>use schemas to define default values and to filter data</li>
<li>version 5 proposals for the JSON-schema standard</li>
<li>define custom validation keywords</li>
<li>JSON-schema validators comparison (so far my <a href="https://github.com/epoberezkin/ajv">Ajv</a> is ahead :)</li>
</ul>
  </section>
  <section class="links">
    <a href="https://www.reddit.com/submit?url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2016-03-03-validating-data-with-json-schema.html&title=Validating data with JSON-schema" target="_blank"><img src="/images/reddit.png"></a>
    <a href="https://twitter.com/intent/tweet?via=epoberezkin&text=Validating%20data%20with%20JSON-schema&hashtags=json-schema%2Ctutorial%2Ccoding%2Cajv&original_referer=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2016-03-03-validating-data-with-json-schema.html&url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2016-03-03-validating-data-with-json-schema.html" target="_blank"><img src="/images/tweet.png"></a>
    
      <a href="https://github.com/epoberezkin/tutsplus-json-schema" target="_blank"><img src="/images/repo.png"></a>
    
  </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Milo - The Reactive Javascript Framework</title>
    <link href="https://www.poberezkin.com/posts/2014-10-23-talk-milo-reactive-javascript-framework.html" />
    <id>https://www.poberezkin.com/posts/2014-10-23-talk-milo-reactive-javascript-framework.html</id>
    <published>2014-10-23T00:00:00Z</published>
    <updated>2014-10-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <section class="header">
    <div class="info">
      Posted on
      
        <a href="https://skillsmatter.com/skillscasts/5857-milo-the-reactive-javascript-framework">October 23, 2014</a>
      
      
        by Jason Green and Evgeny Poberezkin
      
    </div>
    <div class="info">
      
        Tags: <a title="All pages tagged &#39;talk&#39;." href="/tags/talk.html" rel="tag">talk</a>, <a title="All pages tagged &#39;javascript&#39;." href="/tags/javascript.html" rel="tag">javascript</a>, <a title="All pages tagged &#39;open-source&#39;." href="/tags/open-source.html" rel="tag">open-source</a>, <a title="All pages tagged &#39;reactive&#39;." href="/tags/reactive.html" rel="tag">reactive</a>
      
    </div>
  </section>
  <section>
    <p>This is a <a href="https://skillsmatter.com/skillscasts/5857-milo-the-reactive-javascript-framework">talk at FullStack London 2014</a>.</p>
<p><a href="https://skillsmatter.com/skillscasts/5857-milo-the-reactive-javascript-framework">
<img src="/images/talk2014.jpg" alt="Milo - The Reactive Javascript Framework" width="100%">
</a></p>
<blockquote>
<p>We have a single page application. It means that we have data models and we have to react to changes in these models. We also need to propagate data through the different parts of the application and to update views when data changes.</p>
</blockquote>
<blockquote>
<p>There are quite a few frameworks that allow this on a basic level, but as the complexity of the application grows, the controller code becomes bloated with callbacks and glue code transferring data between models.</p>
</blockquote>
<blockquote>
<p>With Milo framework it takes just a few lines of code to create a reactive data graph capable of propagating, transforming and validating data between models and views of any depth.</p>
</blockquote>
<blockquote>
<p>In this talk we will explain the concepts and building blocks that make it possible, such as observable models, “DOM as data” and two-way data connectors. We will also build a simple TODO app and show how data-graph can be used in large-scale application architecture.</p>
</blockquote>
  </section>
  <section class="links">
    <a href="https://www.reddit.com/submit?url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2014-10-23-talk-milo-reactive-javascript-framework.html&title=Milo - The Reactive Javascript Framework" target="_blank"><img src="/images/reddit.png"></a>
    <a href="https://twitter.com/intent/tweet?via=epoberezkin&text=Milo%20-%20The%20Reactive%20Javascript%20Framework&hashtags=talk%2Cjavascript%2Copen-source%2Creactive&original_referer=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2014-10-23-talk-milo-reactive-javascript-framework.html&url=https%3A%2F%2Fwww.poberezkin.com%2Fposts%2F2014-10-23-talk-milo-reactive-javascript-framework.html" target="_blank"><img src="/images/tweet.png"></a>
    
      <a href="https://github.com/milojs/milo" target="_blank"><img src="/images/repo.png"></a>
    
  </section>
</article>
]]></summary>
</entry>

</feed>
